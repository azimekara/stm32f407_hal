
gun6_i2cmpueksenokuma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009e30  08009e30  00019e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e4c  08009e4c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e54  08009e54  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008d8  20000098  20000098  00020098  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000970  20000970  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c13  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bd3  00000000  00000000  00039cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  0003d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  0003ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d8f  00000000  00000000  0003fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8d6  00000000  00000000  00064b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce86c  00000000  00000000  0007f465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014dcd1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053ec  00000000  00000000  0014dd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e18 	.word	0x08009e18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08009e18 	.word	0x08009e18

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 feae 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f81c 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 f942 	bl	8000f3c <MX_GPIO_Init>
  MX_I2S3_Init();
 8000cb8:	f000 f8b0 	bl	8000e1c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000cbc:	f000 f8de 	bl	8000e7c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000cc0:	f008 fc62 	bl	8009588 <MX_USB_HOST_Init>
  MX_I2C3_Init();
 8000cc4:	f000 f87c 	bl	8000dc0 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 f90e 	bl	8000ee8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setupr();
 8000ccc:	f000 fa4c 	bl	8001168 <setupr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000cd0:	f008 fc80 	bl	80095d4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	  readr();
 8000cd4:	f000 fadc 	bl	8001290 <readr>
	  uart();
 8000cd8:	f000 fbd0 	bl	800147c <uart>
	  memset(uart,'\0',sizeof(uart));
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4801      	ldr	r0, [pc, #4]	; (8000ce8 <main+0x40>)
 8000ce2:	f008 ff93 	bl	8009c0c <memset>
  {
 8000ce6:	e7f3      	b.n	8000cd0 <main+0x28>
 8000ce8:	0800147d 	.word	0x0800147d

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	; 0x50
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	2230      	movs	r2, #48	; 0x30
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f008 ff86 	bl	8009c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a27      	ldr	r2, [pc, #156]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <SystemClock_Config+0xd0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <SystemClock_Config+0xd0>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <SystemClock_Config+0xd0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fa12 	bl	800519c <HAL_RCC_OscConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d7e:	f000 f9eb 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d86:	2302      	movs	r3, #2
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2105      	movs	r1, #5
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 fc73 	bl	800568c <HAL_RCC_ClockConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dac:	f000 f9d4 	bl	8001158 <Error_Handler>
  }
}
 8000db0:	bf00      	nop
 8000db2:	3750      	adds	r7, #80	; 0x50
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <MX_I2C3_Init+0x54>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <MX_I2C3_Init+0x58>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000de2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_I2C3_Init+0x50>)
 8000dfe:	f002 fd6d 	bl	80038dc <HAL_I2C_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e08:	f000 f9a6 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200000d8 	.word	0x200000d8
 8000e14:	40005c00 	.word	0x40005c00
 8000e18:	000186a0 	.word	0x000186a0

08000e1c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e22:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <MX_I2S3_Init+0x58>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <MX_I2S3_Init+0x5c>)
 8000e46:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_I2S3_Init+0x54>)
 8000e5c:	f003 fcfe 	bl	800485c <HAL_I2S_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000e66:	f000 f977 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000012c 	.word	0x2000012c
 8000e74:	40003c00 	.word	0x40003c00
 8000e78:	00017700 	.word	0x00017700

08000e7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e82:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <MX_SPI1_Init+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec8:	220a      	movs	r2, #10
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ece:	f004 ff3d 	bl	8005d4c <HAL_SPI_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ed8:	f000 f93e 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000174 	.word	0x20000174
 8000ee4:	40013000 	.word	0x40013000

08000ee8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <MX_USART2_UART_Init+0x50>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f20:	f004 ff9d 	bl	8005e5e <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2a:	f000 f915 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200001cc 	.word	0x200001cc
 8000f38:	40004400 	.word	0x40004400

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
 8000f56:	4b7a      	ldr	r3, [pc, #488]	; (8001140 <MX_GPIO_Init+0x204>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a79      	ldr	r2, [pc, #484]	; (8001140 <MX_GPIO_Init+0x204>)
 8000f5c:	f043 0310 	orr.w	r3, r3, #16
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b77      	ldr	r3, [pc, #476]	; (8001140 <MX_GPIO_Init+0x204>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	4b73      	ldr	r3, [pc, #460]	; (8001140 <MX_GPIO_Init+0x204>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a72      	ldr	r2, [pc, #456]	; (8001140 <MX_GPIO_Init+0x204>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b70      	ldr	r3, [pc, #448]	; (8001140 <MX_GPIO_Init+0x204>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <MX_GPIO_Init+0x204>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a6b      	ldr	r2, [pc, #428]	; (8001140 <MX_GPIO_Init+0x204>)
 8000f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b69      	ldr	r3, [pc, #420]	; (8001140 <MX_GPIO_Init+0x204>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b65      	ldr	r3, [pc, #404]	; (8001140 <MX_GPIO_Init+0x204>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a64      	ldr	r2, [pc, #400]	; (8001140 <MX_GPIO_Init+0x204>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b62      	ldr	r3, [pc, #392]	; (8001140 <MX_GPIO_Init+0x204>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <MX_GPIO_Init+0x204>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a5d      	ldr	r2, [pc, #372]	; (8001140 <MX_GPIO_Init+0x204>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <MX_GPIO_Init+0x204>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b57      	ldr	r3, [pc, #348]	; (8001140 <MX_GPIO_Init+0x204>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a56      	ldr	r2, [pc, #344]	; (8001140 <MX_GPIO_Init+0x204>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b54      	ldr	r3, [pc, #336]	; (8001140 <MX_GPIO_Init+0x204>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	4851      	ldr	r0, [pc, #324]	; (8001144 <MX_GPIO_Init+0x208>)
 8001000:	f001 f848 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2101      	movs	r1, #1
 8001008:	484f      	ldr	r0, [pc, #316]	; (8001148 <MX_GPIO_Init+0x20c>)
 800100a:	f001 f843 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800100e:	2200      	movs	r2, #0
 8001010:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001014:	484d      	ldr	r0, [pc, #308]	; (800114c <MX_GPIO_Init+0x210>)
 8001016:	f001 f83d 	bl	8002094 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800101a:	2308      	movs	r3, #8
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4844      	ldr	r0, [pc, #272]	; (8001144 <MX_GPIO_Init+0x208>)
 8001032:	f000 fe93 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001036:	2301      	movs	r3, #1
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	483e      	ldr	r0, [pc, #248]	; (8001148 <MX_GPIO_Init+0x20c>)
 800104e:	f000 fe85 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001052:	2308      	movs	r3, #8
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001062:	2305      	movs	r3, #5
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4836      	ldr	r0, [pc, #216]	; (8001148 <MX_GPIO_Init+0x20c>)
 800106e:	f000 fe75 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001072:	2301      	movs	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001076:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4832      	ldr	r0, [pc, #200]	; (8001150 <MX_GPIO_Init+0x214>)
 8001088:	f000 fe68 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800108c:	2304      	movs	r3, #4
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	482d      	ldr	r0, [pc, #180]	; (8001154 <MX_GPIO_Init+0x218>)
 80010a0:	f000 fe5c 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b6:	2305      	movs	r3, #5
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4824      	ldr	r0, [pc, #144]	; (8001154 <MX_GPIO_Init+0x218>)
 80010c2:	f000 fe4b 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80010ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	481b      	ldr	r0, [pc, #108]	; (800114c <MX_GPIO_Init+0x210>)
 80010e0:	f000 fe3c 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010e4:	2320      	movs	r3, #32
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4815      	ldr	r0, [pc, #84]	; (800114c <MX_GPIO_Init+0x210>)
 80010f8:	f000 fe30 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80010fc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001102:	2312      	movs	r3, #18
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001106:	2301      	movs	r3, #1
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110e:	2304      	movs	r3, #4
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <MX_GPIO_Init+0x218>)
 800111a:	f000 fe1f 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800111e:	2302      	movs	r3, #2
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001122:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_GPIO_Init+0x208>)
 8001134:	f000 fe12 	bl	8001d5c <HAL_GPIO_Init>

}
 8001138:	bf00      	nop
 800113a:	3730      	adds	r7, #48	; 0x30
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40021000 	.word	0x40021000
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
 8001162:	0000      	movs	r0, r0
 8001164:	0000      	movs	r0, r0
	...

08001168 <setupr>:
int mpu9250inst, ak8963inst;

char init_seq = 0;

void setupr(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x6B, 1, &deger1, 1, 100);
 800116e:	2364      	movs	r3, #100	; 0x64
 8001170:	9302      	str	r3, [sp, #8]
 8001172:	2301      	movs	r3, #1
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <setupr+0x100>)
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	226b      	movs	r2, #107	; 0x6b
 800117e:	21d0      	movs	r1, #208	; 0xd0
 8001180:	483a      	ldr	r0, [pc, #232]	; (800126c <setupr+0x104>)
 8001182:	f002 fcef 	bl	8003b64 <HAL_I2C_Mem_Write>
	// Accel Range +-2g
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1C, 1, &deger1, 1, 100);
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <setupr+0x100>)
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	221c      	movs	r2, #28
 8001196:	21d0      	movs	r1, #208	; 0xd0
 8001198:	4834      	ldr	r0, [pc, #208]	; (800126c <setupr+0x104>)
 800119a:	f002 fce3 	bl	8003b64 <HAL_I2C_Mem_Write>
	accl_scale = 16384.0;
 800119e:	4934      	ldr	r1, [pc, #208]	; (8001270 <setupr+0x108>)
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <setupr+0x10c>)
 80011a6:	e9c1 2300 	strd	r2, r3, [r1]
	// Filter 420 Hz
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1D, 1, &deger4, 1, 100);
 80011aa:	2364      	movs	r3, #100	; 0x64
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b31      	ldr	r3, [pc, #196]	; (8001278 <setupr+0x110>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	221d      	movs	r2, #29
 80011ba:	21d0      	movs	r1, #208	; 0xd0
 80011bc:	482b      	ldr	r0, [pc, #172]	; (800126c <setupr+0x104>)
 80011be:	f002 fcd1 	bl	8003b64 <HAL_I2C_Mem_Write>
	 // Gyro Range +-250 degrees/s
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1B, 1, &deger1, 1, 100);
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <setupr+0x100>)
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	221b      	movs	r2, #27
 80011d2:	21d0      	movs	r1, #208	; 0xd0
 80011d4:	4825      	ldr	r0, [pc, #148]	; (800126c <setupr+0x104>)
 80011d6:	f002 fcc5 	bl	8003b64 <HAL_I2C_Mem_Write>
	gyro_scale = 131.0;
 80011da:	4928      	ldr	r1, [pc, #160]	; (800127c <setupr+0x114>)
 80011dc:	a31e      	add	r3, pc, #120	; (adr r3, 8001258 <setupr+0xf0>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	e9c1 2300 	strd	r2, r3, [r1]
	// DLPF Bandwidth = 10
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x1A, 1, &deger3, 1, 100);
 80011e6:	2364      	movs	r3, #100	; 0x64
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <setupr+0x118>)
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	221a      	movs	r2, #26
 80011f6:	21d0      	movs	r1, #208	; 0xd0
 80011f8:	481c      	ldr	r0, [pc, #112]	; (800126c <setupr+0x104>)
 80011fa:	f002 fcb3 	bl	8003b64 <HAL_I2C_Mem_Write>
	// Enable Magnetometer (address 0x0c)
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x37, 1, &deger2, 1, 100);
 80011fe:	2364      	movs	r3, #100	; 0x64
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <setupr+0x11c>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2237      	movs	r2, #55	; 0x37
 800120e:	21d0      	movs	r1, #208	; 0xd0
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <setupr+0x104>)
 8001212:	f002 fca7 	bl	8003b64 <HAL_I2C_Mem_Write>
	// Set power-down mode before the transition to another mode.
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x0A, 1, &deger1, 1, 100);
 8001216:	2364      	movs	r3, #100	; 0x64
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	2301      	movs	r3, #1
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <setupr+0x100>)
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	220a      	movs	r2, #10
 8001226:	21d0      	movs	r1, #208	; 0xd0
 8001228:	4810      	ldr	r0, [pc, #64]	; (800126c <setupr+0x104>)
 800122a:	f002 fc9b 	bl	8003b64 <HAL_I2C_Mem_Write>
	// Set Continuous measurement mode 0x12 - 8Hz & 16-bit; 0x16 - 100 Hz & 16-bit
	HAL_I2C_Mem_Write(&hi2c3, 0xd0, 0x0A, 1, &deger5, 1, 100);
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2301      	movs	r3, #1
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <setupr+0x120>)
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	220a      	movs	r2, #10
 800123e:	21d0      	movs	r1, #208	; 0xd0
 8001240:	480a      	ldr	r0, [pc, #40]	; (800126c <setupr+0x104>)
 8001242:	f002 fc8f 	bl	8003b64 <HAL_I2C_Mem_Write>
	magn_scale = 6826.7;
 8001246:	4911      	ldr	r1, [pc, #68]	; (800128c <setupr+0x124>)
 8001248:	a305      	add	r3, pc, #20	; (adr r3, 8001260 <setupr+0xf8>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	00000000 	.word	0x00000000
 800125c:	40606000 	.word	0x40606000
 8001260:	33333333 	.word	0x33333333
 8001264:	40baaab3 	.word	0x40baaab3
 8001268:	20000210 	.word	0x20000210
 800126c:	200000d8 	.word	0x200000d8
 8001270:	20000260 	.word	0x20000260
 8001274:	40d00000 	.word	0x40d00000
 8001278:	20000002 	.word	0x20000002
 800127c:	20000268 	.word	0x20000268
 8001280:	20000001 	.word	0x20000001
 8001284:	20000000 	.word	0x20000000
 8001288:	20000003 	.word	0x20000003
 800128c:	20000270 	.word	0x20000270

08001290 <readr>:

void readr(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c3, 0xd1, 0x3B, 1, pDataa, 6, 100);
 8001296:	2364      	movs	r3, #100	; 0x64
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	2306      	movs	r3, #6
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <readr+0x1ac>)
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	223b      	movs	r2, #59	; 0x3b
 80012a6:	21d1      	movs	r1, #209	; 0xd1
 80012a8:	4865      	ldr	r0, [pc, #404]	; (8001440 <readr+0x1b0>)
 80012aa:	f002 fd55 	bl	8003d58 <HAL_I2C_Mem_Read>

	accl_x =(double) ((pDataa[0] << 8) | pDataa[1])/accl_scale;
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <readr+0x1ac>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	4a61      	ldr	r2, [pc, #388]	; (800143c <readr+0x1ac>)
 80012b6:	7852      	ldrb	r2, [r2, #1]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f8d6 	bl	800046c <__aeabi_i2d>
 80012c0:	4b60      	ldr	r3, [pc, #384]	; (8001444 <readr+0x1b4>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff fa65 	bl	8000794 <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	495e      	ldr	r1, [pc, #376]	; (8001448 <readr+0x1b8>)
 80012d0:	e9c1 2300 	strd	r2, r3, [r1]
	accl_y =(double) ((pDataa[2] << 8) | pDataa[3])/accl_scale;
 80012d4:	4b59      	ldr	r3, [pc, #356]	; (800143c <readr+0x1ac>)
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	4a58      	ldr	r2, [pc, #352]	; (800143c <readr+0x1ac>)
 80012dc:	78d2      	ldrb	r2, [r2, #3]
 80012de:	4313      	orrs	r3, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f8c3 	bl	800046c <__aeabi_i2d>
 80012e6:	4b57      	ldr	r3, [pc, #348]	; (8001444 <readr+0x1b4>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff fa52 	bl	8000794 <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4955      	ldr	r1, [pc, #340]	; (800144c <readr+0x1bc>)
 80012f6:	e9c1 2300 	strd	r2, r3, [r1]
	accl_z =(double) ((pDataa[4] << 8) | pDataa[5])/accl_scale;
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <readr+0x1ac>)
 80012fc:	791b      	ldrb	r3, [r3, #4]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4a4e      	ldr	r2, [pc, #312]	; (800143c <readr+0x1ac>)
 8001302:	7952      	ldrb	r2, [r2, #5]
 8001304:	4313      	orrs	r3, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f8b0 	bl	800046c <__aeabi_i2d>
 800130c:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <readr+0x1b4>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fa3f 	bl	8000794 <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	494d      	ldr	r1, [pc, #308]	; (8001450 <readr+0x1c0>)
 800131c:	e9c1 2300 	strd	r2, r3, [r1]

	//memset(pDataa,'\0',sizeof(pDataa));

	HAL_I2C_Mem_Read(&hi2c3, 0xd1, 0x43, 1, pDatag, 6, 100);
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2306      	movs	r3, #6
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <readr+0x1c4>)
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	2243      	movs	r2, #67	; 0x43
 8001330:	21d1      	movs	r1, #209	; 0xd1
 8001332:	4843      	ldr	r0, [pc, #268]	; (8001440 <readr+0x1b0>)
 8001334:	f002 fd10 	bl	8003d58 <HAL_I2C_Mem_Read>

	gyro_x =(double) ((pDatag[0] << 8) | pDatag[1])/gyro_scale;
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <readr+0x1c4>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	4a45      	ldr	r2, [pc, #276]	; (8001454 <readr+0x1c4>)
 8001340:	7852      	ldrb	r2, [r2, #1]
 8001342:	4313      	orrs	r3, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f891 	bl	800046c <__aeabi_i2d>
 800134a:	4b43      	ldr	r3, [pc, #268]	; (8001458 <readr+0x1c8>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa20 	bl	8000794 <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4940      	ldr	r1, [pc, #256]	; (800145c <readr+0x1cc>)
 800135a:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_y =(double) ((pDatag[2] << 8) | pDatag[3])/gyro_scale;
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <readr+0x1c4>)
 8001360:	789b      	ldrb	r3, [r3, #2]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	4a3b      	ldr	r2, [pc, #236]	; (8001454 <readr+0x1c4>)
 8001366:	78d2      	ldrb	r2, [r2, #3]
 8001368:	4313      	orrs	r3, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f87e 	bl	800046c <__aeabi_i2d>
 8001370:	4b39      	ldr	r3, [pc, #228]	; (8001458 <readr+0x1c8>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff fa0d 	bl	8000794 <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4938      	ldr	r1, [pc, #224]	; (8001460 <readr+0x1d0>)
 8001380:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_z =(double) ((pDatag[4] << 8) | pDatag[5])/gyro_scale;
 8001384:	4b33      	ldr	r3, [pc, #204]	; (8001454 <readr+0x1c4>)
 8001386:	791b      	ldrb	r3, [r3, #4]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	4a32      	ldr	r2, [pc, #200]	; (8001454 <readr+0x1c4>)
 800138c:	7952      	ldrb	r2, [r2, #5]
 800138e:	4313      	orrs	r3, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f86b 	bl	800046c <__aeabi_i2d>
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <readr+0x1c8>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f9fa 	bl	8000794 <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	492f      	ldr	r1, [pc, #188]	; (8001464 <readr+0x1d4>)
 80013a6:	e9c1 2300 	strd	r2, r3, [r1]

//	memset(pDatam,'\0',sizeof(pDatam));

	HAL_I2C_Mem_Read(&hi2c3, 0xd1, 0x03, 1, pDatam, 6, 100);
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2306      	movs	r3, #6
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <readr+0x1d8>)
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	21d1      	movs	r1, #209	; 0xd1
 80013bc:	4820      	ldr	r0, [pc, #128]	; (8001440 <readr+0x1b0>)
 80013be:	f002 fccb 	bl	8003d58 <HAL_I2C_Mem_Read>

	magn_x =(double) ((pDatam[0] << 8) | pDatam[1])/magn_scale;
 80013c2:	4b29      	ldr	r3, [pc, #164]	; (8001468 <readr+0x1d8>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <readr+0x1d8>)
 80013ca:	7852      	ldrb	r2, [r2, #1]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f84c 	bl	800046c <__aeabi_i2d>
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <readr+0x1dc>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f9db 	bl	8000794 <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4923      	ldr	r1, [pc, #140]	; (8001470 <readr+0x1e0>)
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
	magn_y =(double) ((pDatam[2] << 8) | pDatam[3])/magn_scale;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <readr+0x1d8>)
 80013ea:	789b      	ldrb	r3, [r3, #2]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <readr+0x1d8>)
 80013f0:	78d2      	ldrb	r2, [r2, #3]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f839 	bl	800046c <__aeabi_i2d>
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <readr+0x1dc>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f9c8 	bl	8000794 <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	491a      	ldr	r1, [pc, #104]	; (8001474 <readr+0x1e4>)
 800140a:	e9c1 2300 	strd	r2, r3, [r1]
	magn_z =(double) ((pDatam[4] << 8) | pDatam[5])/magn_scale;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <readr+0x1d8>)
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <readr+0x1d8>)
 8001416:	7952      	ldrb	r2, [r2, #5]
 8001418:	4313      	orrs	r3, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f826 	bl	800046c <__aeabi_i2d>
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <readr+0x1dc>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f9b5 	bl	8000794 <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4912      	ldr	r1, [pc, #72]	; (8001478 <readr+0x1e8>)
 8001430:	e9c1 2300 	strd	r2, r3, [r1]


//	memset(pDatam,'\0',sizeof(pDatam));
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200000b4 	.word	0x200000b4
 8001440:	200000d8 	.word	0x200000d8
 8001444:	20000260 	.word	0x20000260
 8001448:	20000218 	.word	0x20000218
 800144c:	20000220 	.word	0x20000220
 8001450:	20000228 	.word	0x20000228
 8001454:	200000c0 	.word	0x200000c0
 8001458:	20000268 	.word	0x20000268
 800145c:	20000230 	.word	0x20000230
 8001460:	20000238 	.word	0x20000238
 8001464:	20000240 	.word	0x20000240
 8001468:	200000cc 	.word	0x200000cc
 800146c:	20000270 	.word	0x20000270
 8001470:	20000248 	.word	0x20000248
 8001474:	20000250 	.word	0x20000250
 8001478:	20000258 	.word	0x20000258

0800147c <uart>:

void uart(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
	uint8_t uartb[9] = {accl_x,accl_y,accl_z,gyro_x,gyro_y,gyro_z,magn_x,magn_y,magn_z};
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <uart+0xd8>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fa6a 	bl	8000964 <__aeabi_d2uiz>
 8001490:	4603      	mov	r3, r0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	713b      	strb	r3, [r7, #4]
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <uart+0xdc>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fa60 	bl	8000964 <__aeabi_d2uiz>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	717b      	strb	r3, [r7, #5]
 80014aa:	4b2c      	ldr	r3, [pc, #176]	; (800155c <uart+0xe0>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fa56 	bl	8000964 <__aeabi_d2uiz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	71bb      	strb	r3, [r7, #6]
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <uart+0xe4>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fa4c 	bl	8000964 <__aeabi_d2uiz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <uart+0xe8>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fa42 	bl	8000964 <__aeabi_d2uiz>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	723b      	strb	r3, [r7, #8]
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <uart+0xec>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fa38 	bl	8000964 <__aeabi_d2uiz>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	727b      	strb	r3, [r7, #9]
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <uart+0xf0>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fa2e 	bl	8000964 <__aeabi_d2uiz>
 8001508:	4603      	mov	r3, r0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	72bb      	strb	r3, [r7, #10]
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <uart+0xf4>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fa24 	bl	8000964 <__aeabi_d2uiz>
 800151c:	4603      	mov	r3, r0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	72fb      	strb	r3, [r7, #11]
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <uart+0xf8>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fa1a 	bl	8000964 <__aeabi_d2uiz>
 8001530:	4603      	mov	r3, r0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, uartb, 9, 100);
 8001536:	1d39      	adds	r1, r7, #4
 8001538:	2364      	movs	r3, #100	; 0x64
 800153a:	2209      	movs	r2, #9
 800153c:	480e      	ldr	r0, [pc, #56]	; (8001578 <uart+0xfc>)
 800153e:	f004 fcdb 	bl	8005ef8 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001546:	f000 fad3 	bl	8001af0 <HAL_Delay>
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000218 	.word	0x20000218
 8001558:	20000220 	.word	0x20000220
 800155c:	20000228 	.word	0x20000228
 8001560:	20000230 	.word	0x20000230
 8001564:	20000238 	.word	0x20000238
 8001568:	20000240 	.word	0x20000240
 800156c:	20000248 	.word	0x20000248
 8001570:	20000250 	.word	0x20000250
 8001574:	20000258 	.word	0x20000258
 8001578:	200001cc 	.word	0x200001cc

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <HAL_MspInit+0x4c>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_MspInit+0x4c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ba:	2007      	movs	r0, #7
 80015bc:	f000 fb8c 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_I2C_MspInit+0xc4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d14b      	bne.n	8001686 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a27      	ldr	r2, [pc, #156]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001638:	2304      	movs	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4815      	ldr	r0, [pc, #84]	; (8001698 <HAL_I2C_MspInit+0xcc>)
 8001644:	f000 fb8a 	bl	8001d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164e:	2312      	movs	r3, #18
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800165a:	2304      	movs	r3, #4
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <HAL_I2C_MspInit+0xd0>)
 8001666:	f000 fb79 	bl	8001d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 8001674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_I2C_MspInit+0xc8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40005c00 	.word	0x40005c00
 8001694:	40023800 	.word	0x40023800
 8001698:	40020800 	.word	0x40020800
 800169c:	40020000 	.word	0x40020000

080016a0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a31      	ldr	r2, [pc, #196]	; (8001790 <HAL_I2S_MspInit+0xf0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d15a      	bne.n	8001786 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016d0:	2301      	movs	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80016d4:	23c0      	movs	r3, #192	; 0xc0
 80016d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 f9f3 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80016ec:	f7ff fd34 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_I2S_MspInit+0xf4>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001744:	2310      	movs	r3, #16
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001754:	2306      	movs	r3, #6
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	480e      	ldr	r0, [pc, #56]	; (8001798 <HAL_I2S_MspInit+0xf8>)
 8001760:	f000 fafc 	bl	8001d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001764:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001776:	2306      	movs	r3, #6
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <HAL_I2S_MspInit+0xfc>)
 8001782:	f000 faeb 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3738      	adds	r7, #56	; 0x38
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40003c00 	.word	0x40003c00
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020800 	.word	0x40020800

080017a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <HAL_SPI_MspInit+0x84>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d12b      	bne.n	800181a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_SPI_MspInit+0x88>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017fa:	23e0      	movs	r3, #224	; 0xe0
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800180a:	2305      	movs	r3, #5
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_SPI_MspInit+0x8c>)
 8001816:	f000 faa1 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40013000 	.word	0x40013000
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000

08001830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_UART_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12b      	bne.n	80018aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_UART_MspInit+0x88>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_UART_MspInit+0x88>)
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_UART_MspInit+0x88>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_UART_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_UART_MspInit+0x88>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_UART_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800188a:	230c      	movs	r3, #12
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800189a:	2307      	movs	r3, #7
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_UART_MspInit+0x8c>)
 80018a6:	f000 fa59 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40004400 	.word	0x40004400
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190c:	f000 f8d0 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <OTG_FS_IRQHandler+0x10>)
 800191a:	f000 fe3f 	bl	800259c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000065c 	.word	0x2000065c

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f008 f91e 	bl	8009b98 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20020000 	.word	0x20020000
 8001988:	00000400 	.word	0x00000400
 800198c:	20000278 	.word	0x20000278
 8001990:	20000970 	.word	0x20000970

08001994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019be:	490e      	ldr	r1, [pc, #56]	; (80019f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d4:	4c0b      	ldr	r4, [pc, #44]	; (8001a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e2:	f7ff ffd7 	bl	8001994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e6:	f008 f8dd 	bl	8009ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ea:	f7ff f95d 	bl	8000ca8 <main>
  bx  lr    
 80019ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80019fc:	08009e5c 	.word	0x08009e5c
  ldr r2, =_sbss
 8001a00:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001a04:	20000970 	.word	0x20000970

08001a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_Init+0x40>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_Init+0x40>)
 8001a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_Init+0x40>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f94f 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f808 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff fd9c 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f967 	bl	8001d42 <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f92f 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000004 	.word	0x20000004
 8001aa8:	2000000c 	.word	0x2000000c
 8001aac:	20000008 	.word	0x20000008

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	2000027c 	.word	0x2000027c

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	2000027c 	.word	0x2000027c

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000000c 	.word	0x2000000c

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <__NVIC_EnableIRQ+0x38>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff8e 	bl	8001bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff29 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff3e 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff8e 	bl	8001c2c <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5d 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff31 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffa2 	bl	8001c94 <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e16b      	b.n	8002050 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 815a 	bne.w	800204a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d005      	beq.n	8001dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d130      	bne.n	8001e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0201 	and.w	r2, r3, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d017      	beq.n	8001e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80b4 	beq.w	800204a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b60      	ldr	r3, [pc, #384]	; (8002068 <HAL_GPIO_Init+0x30c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <HAL_GPIO_Init+0x30c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_GPIO_Init+0x30c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efe:	4a5b      	ldr	r2, [pc, #364]	; (800206c <HAL_GPIO_Init+0x310>)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_GPIO_Init+0x314>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d02b      	beq.n	8001f82 <HAL_GPIO_Init+0x226>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a51      	ldr	r2, [pc, #324]	; (8002074 <HAL_GPIO_Init+0x318>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d025      	beq.n	8001f7e <HAL_GPIO_Init+0x222>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a50      	ldr	r2, [pc, #320]	; (8002078 <HAL_GPIO_Init+0x31c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01f      	beq.n	8001f7a <HAL_GPIO_Init+0x21e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4f      	ldr	r2, [pc, #316]	; (800207c <HAL_GPIO_Init+0x320>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x21a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4e      	ldr	r2, [pc, #312]	; (8002080 <HAL_GPIO_Init+0x324>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x216>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4d      	ldr	r2, [pc, #308]	; (8002084 <HAL_GPIO_Init+0x328>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	; (8002088 <HAL_GPIO_Init+0x32c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x20e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4b      	ldr	r2, [pc, #300]	; (800208c <HAL_GPIO_Init+0x330>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x20a>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e00e      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f66:	2308      	movs	r3, #8
 8001f68:	e00c      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	e00a      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x228>
 8001f82:	2300      	movs	r3, #0
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f94:	4935      	ldr	r1, [pc, #212]	; (800206c <HAL_GPIO_Init+0x310>)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc6:	4a32      	ldr	r2, [pc, #200]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_GPIO_Init+0x334>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_GPIO_Init+0x334>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_GPIO_Init+0x334>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_GPIO_Init+0x334>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3301      	adds	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b0f      	cmp	r3, #15
 8002054:	f67f ae90 	bls.w	8001d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40013800 	.word	0x40013800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40021000 	.word	0x40021000
 8002084:	40021400 	.word	0x40021400
 8002088:	40021800 	.word	0x40021800
 800208c:	40021c00 	.word	0x40021c00
 8002090:	40013c00 	.word	0x40013c00

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b0:	e003      	b.n	80020ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	619a      	str	r2, [r3, #24]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c8:	b08f      	sub	sp, #60	; 0x3c
 80020ca:	af0a      	add	r7, sp, #40	; 0x28
 80020cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e054      	b.n	8002182 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f007 faa6 	bl	8009644 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2203      	movs	r2, #3
 80020fc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fad4 	bl	80066c4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	687e      	ldr	r6, [r7, #4]
 8002124:	466d      	mov	r5, sp
 8002126:	f106 0410 	add.w	r4, r6, #16
 800212a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002136:	e885 0003 	stmia.w	r5, {r0, r1}
 800213a:	1d33      	adds	r3, r6, #4
 800213c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213e:	6838      	ldr	r0, [r7, #0]
 8002140:	f004 fa4e 	bl	80065e0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f004 facb 	bl	80066e6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	687e      	ldr	r6, [r7, #4]
 8002158:	466d      	mov	r5, sp
 800215a:	f106 0410 	add.w	r4, r6, #16
 800215e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002166:	e894 0003 	ldmia.w	r4, {r0, r1}
 800216a:	e885 0003 	stmia.w	r5, {r0, r1}
 800216e:	1d33      	adds	r3, r6, #4
 8002170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002172:	6838      	ldr	r0, [r7, #0]
 8002174:	f004 fc54 	bl	8006a20 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800218a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800218a:	b590      	push	{r4, r7, lr}
 800218c:	b089      	sub	sp, #36	; 0x24
 800218e:	af04      	add	r7, sp, #16
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	4608      	mov	r0, r1
 8002194:	4611      	mov	r1, r2
 8002196:	461a      	mov	r2, r3
 8002198:	4603      	mov	r3, r0
 800219a:	70fb      	strb	r3, [r7, #3]
 800219c:	460b      	mov	r3, r1
 800219e:	70bb      	strb	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_HCD_HC_Init+0x28>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e076      	b.n	80022a0 <HAL_HCD_HC_Init+0x116>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	333d      	adds	r3, #61	; 0x3d
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3338      	adds	r3, #56	; 0x38
 80021da:	787a      	ldrb	r2, [r7, #1]
 80021dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3340      	adds	r3, #64	; 0x40
 80021ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021ee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3339      	adds	r3, #57	; 0x39
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	333f      	adds	r3, #63	; 0x3f
 8002210:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002214:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	78ba      	ldrb	r2, [r7, #2]
 800221a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800221e:	b2d0      	uxtb	r0, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	333a      	adds	r3, #58	; 0x3a
 800222c:	4602      	mov	r2, r0
 800222e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002230:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da09      	bge.n	800224c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	333b      	adds	r3, #59	; 0x3b
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e008      	b.n	800225e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	333b      	adds	r3, #59	; 0x3b
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	333c      	adds	r3, #60	; 0x3c
 800226c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002270:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	787c      	ldrb	r4, [r7, #1]
 8002278:	78ba      	ldrb	r2, [r7, #2]
 800227a:	78f9      	ldrb	r1, [r7, #3]
 800227c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	f897 3020 	ldrb.w	r3, [r7, #32]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4623      	mov	r3, r4
 800228e:	f004 fd4d 	bl	8006d2c <USB_HC_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd90      	pop	{r4, r7, pc}

080022a8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_HCD_HC_Halt+0x1e>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e00f      	b.n	80022e6 <HAL_HCD_HC_Halt+0x3e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 ff9d 	bl	8007216 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	70fb      	strb	r3, [r7, #3]
 8002302:	460b      	mov	r3, r1
 8002304:	70bb      	strb	r3, [r7, #2]
 8002306:	4613      	mov	r3, r2
 8002308:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	333b      	adds	r3, #59	; 0x3b
 8002318:	78ba      	ldrb	r2, [r7, #2]
 800231a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	333f      	adds	r3, #63	; 0x3f
 800232a:	787a      	ldrb	r2, [r7, #1]
 800232c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800232e:	7c3b      	ldrb	r3, [r7, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d112      	bne.n	800235a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3342      	adds	r3, #66	; 0x42
 8002342:	2203      	movs	r2, #3
 8002344:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	333d      	adds	r3, #61	; 0x3d
 8002354:	7f3a      	ldrb	r2, [r7, #28]
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e008      	b.n	800236c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3342      	adds	r3, #66	; 0x42
 8002368:	2202      	movs	r2, #2
 800236a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b03      	cmp	r3, #3
 8002370:	f200 80c6 	bhi.w	8002500 <HAL_HCD_HC_SubmitRequest+0x210>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	0800238d 	.word	0x0800238d
 8002380:	080024ed 	.word	0x080024ed
 8002384:	080023f1 	.word	0x080023f1
 8002388:	0800246f 	.word	0x0800246f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800238c:	7c3b      	ldrb	r3, [r7, #16]
 800238e:	2b01      	cmp	r3, #1
 8002390:	f040 80b8 	bne.w	8002504 <HAL_HCD_HC_SubmitRequest+0x214>
 8002394:	78bb      	ldrb	r3, [r7, #2]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 80b4 	bne.w	8002504 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800239c:	8b3b      	ldrh	r3, [r7, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3355      	adds	r3, #85	; 0x55
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3355      	adds	r3, #85	; 0x55
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3342      	adds	r3, #66	; 0x42
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023da:	e093      	b.n	8002504 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3342      	adds	r3, #66	; 0x42
 80023ea:	2202      	movs	r2, #2
 80023ec:	701a      	strb	r2, [r3, #0]
      break;
 80023ee:	e089      	b.n	8002504 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023f0:	78bb      	ldrb	r3, [r7, #2]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11d      	bne.n	8002432 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3355      	adds	r3, #85	; 0x55
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3342      	adds	r3, #66	; 0x42
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800241c:	e073      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3342      	adds	r3, #66	; 0x42
 800242c:	2202      	movs	r2, #2
 800242e:	701a      	strb	r2, [r3, #0]
      break;
 8002430:	e069      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	3354      	adds	r3, #84	; 0x54
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3342      	adds	r3, #66	; 0x42
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
      break;
 8002458:	e055      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	3342      	adds	r3, #66	; 0x42
 8002468:	2202      	movs	r2, #2
 800246a:	701a      	strb	r2, [r3, #0]
      break;
 800246c:	e04b      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800246e:	78bb      	ldrb	r3, [r7, #2]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11d      	bne.n	80024b0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3355      	adds	r3, #85	; 0x55
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3342      	adds	r3, #66	; 0x42
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800249a:	e034      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3342      	adds	r3, #66	; 0x42
 80024aa:	2202      	movs	r2, #2
 80024ac:	701a      	strb	r2, [r3, #0]
      break;
 80024ae:	e02a      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3354      	adds	r3, #84	; 0x54
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3342      	adds	r3, #66	; 0x42
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
      break;
 80024d6:	e016      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3342      	adds	r3, #66	; 0x42
 80024e6:	2202      	movs	r2, #2
 80024e8:	701a      	strb	r2, [r3, #0]
      break;
 80024ea:	e00c      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	3342      	adds	r3, #66	; 0x42
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
      break;
 80024fe:	e002      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002500:	bf00      	nop
 8002502:	e000      	b.n	8002506 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002504:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3344      	adds	r3, #68	; 0x44
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	8b3a      	ldrh	r2, [r7, #24]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	202c      	movs	r0, #44	; 0x2c
 8002520:	fb00 f303 	mul.w	r3, r0, r3
 8002524:	440b      	add	r3, r1
 8002526:	334c      	adds	r3, #76	; 0x4c
 8002528:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3360      	adds	r3, #96	; 0x60
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3350      	adds	r3, #80	; 0x50
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3339      	adds	r3, #57	; 0x39
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3361      	adds	r3, #97	; 0x61
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	222c      	movs	r2, #44	; 0x2c
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	3338      	adds	r3, #56	; 0x38
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	18d1      	adds	r1, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	f004 fcf0 	bl	8006f70 <USB_HC_StartXfer>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop

0800259c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 f9f1 	bl	800699a <USB_GetMode>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	f040 80f6 	bne.w	80027ac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f004 f9d5 	bl	8006974 <USB_ReadInterrupts>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80ec 	beq.w	80027aa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 f9cc 	bl	8006974 <USB_ReadInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025e6:	d104      	bne.n	80025f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f9bc 	bl	8006974 <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002606:	d104      	bne.n	8002612 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002610:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f004 f9ac 	bl	8006974 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002622:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002626:	d104      	bne.n	8002632 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002630:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f004 f99c 	bl	8006974 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d103      	bne.n	800264e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2202      	movs	r2, #2
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f004 f98e 	bl	8006974 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002662:	d11c      	bne.n	800269e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800266c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800267e:	2110      	movs	r1, #16
 8002680:	6938      	ldr	r0, [r7, #16]
 8002682:	f004 f87d 	bl	8006780 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002686:	6938      	ldr	r0, [r7, #16]
 8002688:	f004 f8ae 	bl	80067e8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f004 fa84 	bl	8006ba0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f007 f851 	bl	8009740 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 f966 	bl	8006974 <USB_ReadInterrupts>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b2:	d102      	bne.n	80026ba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f001 f89e 	bl	80037f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 f958 	bl	8006974 <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d106      	bne.n	80026dc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f007 f81a 	bl	8009708 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2208      	movs	r2, #8
 80026da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 f947 	bl	8006974 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d101      	bne.n	80026f4 <HAL_HCD_IRQHandler+0x158>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_HCD_IRQHandler+0x15a>
 80026f4:	2300      	movs	r3, #0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d012      	beq.n	8002720 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699a      	ldr	r2, [r3, #24]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0210 	bic.w	r2, r2, #16
 8002708:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 ffa1 	bl	8003652 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0210 	orr.w	r2, r2, #16
 800271e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f004 f925 	bl	8006974 <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002734:	d13a      	bne.n	80027ac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f004 fd5a 	bl	80071f4 <USB_HC_ReadInterrupt>
 8002740:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e025      	b.n	8002794 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d018      	beq.n	800278e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002772:	d106      	bne.n	8002782 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4619      	mov	r1, r3
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8ab 	bl	80028d6 <HCD_HC_IN_IRQHandler>
 8002780:	e005      	b.n	800278e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fbf9 	bl	8002f80 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	429a      	cmp	r2, r3
 800279c:	d3d4      	bcc.n	8002748 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a6:	615a      	str	r2, [r3, #20]
 80027a8:	e000      	b.n	80027ac <HAL_HCD_IRQHandler+0x210>
      return;
 80027aa:	bf00      	nop
    }
  }
}
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_HCD_Start+0x16>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e013      	b.n	80027f0 <HAL_HCD_Start+0x3e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 fa46 	bl	8006c68 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 ff5e 	bl	80066a2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_HCD_Stop+0x16>
 800280a:	2302      	movs	r3, #2
 800280c:	e00d      	b.n	800282a <HAL_HCD_Stop+0x32>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fe34 	bl	8007488 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f004 f9e8 	bl	8006c14 <USB_ResetPort>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3360      	adds	r3, #96	; 0x60
 8002868:	781b      	ldrb	r3, [r3, #0]
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3350      	adds	r3, #80	; 0x50
 8002890:	681b      	ldr	r3, [r3, #0]
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 fa2c 	bl	8006d08 <USB_GetCurrentFrame>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fa07 	bl	8006cda <USB_GetHostSpeed>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b04      	cmp	r3, #4
 8002904:	d11a      	bne.n	800293c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	2304      	movs	r3, #4
 8002916:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3361      	adds	r3, #97	; 0x61
 8002926:	2206      	movs	r2, #6
 8002928:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fc6e 	bl	8007216 <USB_HC_Halt>
 800293a:	e0af      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002952:	d11b      	bne.n	800298c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002966:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3361      	adds	r3, #97	; 0x61
 8002976:	2207      	movs	r2, #7
 8002978:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f004 fc46 	bl	8007216 <USB_HC_Halt>
 800298a:	e087      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b20      	cmp	r3, #32
 80029a0:	d109      	bne.n	80029b6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	461a      	mov	r2, r3
 80029b0:	2320      	movs	r3, #32
 80029b2:	6093      	str	r3, [r2, #8]
 80029b4:	e072      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d11a      	bne.n	8002a02 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	461a      	mov	r2, r3
 80029da:	2308      	movs	r3, #8
 80029dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3361      	adds	r3, #97	; 0x61
 80029ec:	2205      	movs	r2, #5
 80029ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fc0b 	bl	8007216 <USB_HC_Halt>
 8002a00:	e04c      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d11b      	bne.n	8002a52 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3361      	adds	r3, #97	; 0x61
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 fbe3 	bl	8007216 <USB_HC_Halt>
 8002a50:	e024      	b.n	8002a9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b80      	cmp	r3, #128	; 0x80
 8002a66:	d119      	bne.n	8002a9c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3361      	adds	r3, #97	; 0x61
 8002a88:	2206      	movs	r2, #6
 8002a8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 fbbd 	bl	8007216 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab2:	d112      	bne.n	8002ada <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 fba9 	bl	8007216 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ad8:	e24e      	b.n	8002f78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f040 80df 	bne.w	8002cb0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d019      	beq.n	8002b2e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3348      	adds	r3, #72	; 0x48
 8002b08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	0159      	lsls	r1, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	440b      	add	r3, r1
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b1c:	1ad2      	subs	r2, r2, r3
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	202c      	movs	r0, #44	; 0x2c
 8002b24:	fb00 f303 	mul.w	r3, r0, r3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3350      	adds	r3, #80	; 0x50
 8002b2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3361      	adds	r3, #97	; 0x61
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	335c      	adds	r3, #92	; 0x5c
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2301      	movs	r3, #1
 8002b62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	333f      	adds	r3, #63	; 0x3f
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	333f      	adds	r3, #63	; 0x3f
 8002b86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d111      	bne.n	8002bb0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 fb3d 	bl	8007216 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2310      	movs	r3, #16
 8002bac:	6093      	str	r3, [r2, #8]
 8002bae:	e03a      	b.n	8002c26 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	333f      	adds	r3, #63	; 0x3f
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d009      	beq.n	8002bd8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	333f      	adds	r3, #63	; 0x3f
 8002bd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d126      	bne.n	8002c26 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	0151      	lsls	r1, r2, #5
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	440a      	add	r2, r1
 8002bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bf6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3360      	adds	r3, #96	; 0x60
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	b2d9      	uxtb	r1, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	202c      	movs	r0, #44	; 0x2c
 8002c14:	fb00 f303 	mul.w	r3, r0, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3360      	adds	r3, #96	; 0x60
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f006 fd9b 	bl	800975c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d12b      	bne.n	8002c86 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3348      	adds	r3, #72	; 0x48
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	202c      	movs	r0, #44	; 0x2c
 8002c44:	fb00 f202 	mul.w	r2, r0, r2
 8002c48:	440a      	add	r2, r1
 8002c4a:	3240      	adds	r2, #64	; 0x40
 8002c4c:	8812      	ldrh	r2, [r2, #0]
 8002c4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 818e 	beq.w	8002f78 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3354      	adds	r3, #84	; 0x54
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	f083 0301 	eor.w	r3, r3, #1
 8002c70:	b2d8      	uxtb	r0, r3
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3354      	adds	r3, #84	; 0x54
 8002c80:	4602      	mov	r2, r0
 8002c82:	701a      	strb	r2, [r3, #0]
}
 8002c84:	e178      	b.n	8002f78 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3354      	adds	r3, #84	; 0x54
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f083 0301 	eor.w	r3, r3, #1
 8002c9a:	b2d8      	uxtb	r0, r3
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3354      	adds	r3, #84	; 0x54
 8002caa:	4602      	mov	r2, r0
 8002cac:	701a      	strb	r2, [r3, #0]
}
 8002cae:	e163      	b.n	8002f78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	f040 80f6 	bne.w	8002eb4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3361      	adds	r3, #97	; 0x61
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d109      	bne.n	8002cf0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e0c9      	b.n	8002e84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3361      	adds	r3, #97	; 0x61
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d109      	bne.n	8002d18 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3360      	adds	r3, #96	; 0x60
 8002d12:	2205      	movs	r2, #5
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e0b5      	b.n	8002e84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3361      	adds	r3, #97	; 0x61
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d009      	beq.n	8002d40 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3361      	adds	r3, #97	; 0x61
 8002d3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d150      	bne.n	8002de2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	335c      	adds	r3, #92	; 0x5c
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	202c      	movs	r0, #44	; 0x2c
 8002d58:	fb00 f303 	mul.w	r3, r0, r3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	335c      	adds	r3, #92	; 0x5c
 8002d60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	335c      	adds	r3, #92	; 0x5c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d912      	bls.n	8002d9c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	335c      	adds	r3, #92	; 0x5c
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3360      	adds	r3, #96	; 0x60
 8002d96:	2204      	movs	r2, #4
 8002d98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d9a:	e073      	b.n	8002e84 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3360      	adds	r3, #96	; 0x60
 8002daa:	2202      	movs	r2, #2
 8002dac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dc4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dcc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002de0:	e050      	b.n	8002e84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3361      	adds	r3, #97	; 0x61
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d122      	bne.n	8002e3c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3360      	adds	r3, #96	; 0x60
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e1e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e26:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e023      	b.n	8002e84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3361      	adds	r3, #97	; 0x61
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	d119      	bne.n	8002e84 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	335c      	adds	r3, #92	; 0x5c
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	202c      	movs	r0, #44	; 0x2c
 8002e68:	fb00 f303 	mul.w	r3, r0, r3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	335c      	adds	r3, #92	; 0x5c
 8002e70:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3360      	adds	r3, #96	; 0x60
 8002e80:	2204      	movs	r2, #4
 8002e82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	2302      	movs	r3, #2
 8002e94:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	b2d9      	uxtb	r1, r3
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	202c      	movs	r0, #44	; 0x2c
 8002ea0:	fb00 f303 	mul.w	r3, r0, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3360      	adds	r3, #96	; 0x60
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f006 fc55 	bl	800975c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002eb2:	e061      	b.n	8002f78 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d156      	bne.n	8002f78 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	333f      	adds	r3, #63	; 0x3f
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d111      	bne.n	8002f02 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	335c      	adds	r3, #92	; 0x5c
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 f98b 	bl	8007216 <USB_HC_Halt>
 8002f00:	e031      	b.n	8002f66 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	333f      	adds	r3, #63	; 0x3f
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	333f      	adds	r3, #63	; 0x3f
 8002f24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d11d      	bne.n	8002f66 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	335c      	adds	r3, #92	; 0x5c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d110      	bne.n	8002f66 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3361      	adds	r3, #97	; 0x61
 8002f52:	2203      	movs	r2, #3
 8002f54:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 f958 	bl	8007216 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	461a      	mov	r2, r3
 8002f74:	2310      	movs	r3, #16
 8002f76:	6093      	str	r3, [r2, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d11a      	bne.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3361      	adds	r3, #97	; 0x61
 8002fd0:	2206      	movs	r2, #6
 8002fd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 f919 	bl	8007216 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002fe4:	e331      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d12e      	bne.n	800305a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	461a      	mov	r2, r3
 800300a:	2320      	movs	r3, #32
 800300c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	333d      	adds	r3, #61	; 0x3d
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	f040 8313 	bne.w	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	333d      	adds	r3, #61	; 0x3d
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3360      	adds	r3, #96	; 0x60
 8003044:	2202      	movs	r2, #2
 8003046:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f004 f8df 	bl	8007216 <USB_HC_Halt>
}
 8003058:	e2f7      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003070:	d112      	bne.n	8003098 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003084:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f004 f8c0 	bl	8007216 <USB_HC_Halt>
}
 8003096:	e2d8      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d140      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	335c      	adds	r3, #92	; 0x5c
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d111      	bne.n	80030fa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	333d      	adds	r3, #61	; 0x3d
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	461a      	mov	r2, r3
 80030f6:	2340      	movs	r3, #64	; 0x40
 80030f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	461a      	mov	r2, r3
 8003108:	2301      	movs	r3, #1
 800310a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3361      	adds	r3, #97	; 0x61
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f004 f874 	bl	8007216 <USB_HC_Halt>
}
 800312e:	e28c      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d12c      	bne.n	80031a0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3361      	adds	r3, #97	; 0x61
 8003154:	2204      	movs	r2, #4
 8003156:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	333d      	adds	r3, #61	; 0x3d
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	335c      	adds	r3, #92	; 0x5c
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f004 f845 	bl	8007216 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003198:	461a      	mov	r2, r3
 800319a:	2340      	movs	r3, #64	; 0x40
 800319c:	6093      	str	r3, [r2, #8]
}
 800319e:	e254      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d11a      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	461a      	mov	r2, r3
 80031c4:	2308      	movs	r3, #8
 80031c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3361      	adds	r3, #97	; 0x61
 80031d6:	2205      	movs	r2, #5
 80031d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f004 f816 	bl	8007216 <USB_HC_Halt>
}
 80031ea:	e22e      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d140      	bne.n	8003284 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	335c      	adds	r3, #92	; 0x5c
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3361      	adds	r3, #97	; 0x61
 8003222:	2203      	movs	r2, #3
 8003224:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	333d      	adds	r3, #61	; 0x3d
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d112      	bne.n	8003260 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	333c      	adds	r3, #60	; 0x3c
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	333d      	adds	r3, #61	; 0x3d
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f003 ffd3 	bl	8007216 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	461a      	mov	r2, r3
 800327e:	2310      	movs	r3, #16
 8003280:	6093      	str	r3, [r2, #8]
}
 8003282:	e1e2      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d164      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d111      	bne.n	80032c6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3361      	adds	r3, #97	; 0x61
 80032b0:	2206      	movs	r2, #6
 80032b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 ffa9 	bl	8007216 <USB_HC_Halt>
 80032c4:	e044      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	335c      	adds	r3, #92	; 0x5c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	202c      	movs	r0, #44	; 0x2c
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	440b      	add	r3, r1
 80032e4:	335c      	adds	r3, #92	; 0x5c
 80032e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	335c      	adds	r3, #92	; 0x5c
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d920      	bls.n	800333e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	335c      	adds	r3, #92	; 0x5c
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3360      	adds	r3, #96	; 0x60
 800331c:	2204      	movs	r2, #4
 800331e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	b2d9      	uxtb	r1, r3
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	202c      	movs	r0, #44	; 0x2c
 800332a:	fb00 f303 	mul.w	r3, r0, r3
 800332e:	4413      	add	r3, r2
 8003330:	3360      	adds	r3, #96	; 0x60
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f006 fa10 	bl	800975c <HAL_HCD_HC_NotifyURBChange_Callback>
 800333c:	e008      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	3360      	adds	r3, #96	; 0x60
 800334c:	2202      	movs	r2, #2
 800334e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	6093      	str	r3, [r2, #8]
}
 8003362:	e172      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337a:	d11b      	bne.n	80033b4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3361      	adds	r3, #97	; 0x61
 800338a:	2208      	movs	r2, #8
 800338c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f003 ff3c 	bl	8007216 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	461a      	mov	r2, r3
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	6093      	str	r3, [r2, #8]
}
 80033b2:	e14a      	b.n	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	f040 813f 	bne.w	800364a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3361      	adds	r3, #97	; 0x61
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d17d      	bne.n	80034dc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3360      	adds	r3, #96	; 0x60
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	333f      	adds	r3, #63	; 0x3f
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d00a      	beq.n	800341c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	333f      	adds	r3, #63	; 0x3f
 8003414:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003416:	2b03      	cmp	r3, #3
 8003418:	f040 8100 	bne.w	800361c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d113      	bne.n	800344c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3355      	adds	r3, #85	; 0x55
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2d8      	uxtb	r0, r3
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3355      	adds	r3, #85	; 0x55
 8003448:	4602      	mov	r2, r0
 800344a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b01      	cmp	r3, #1
 8003452:	f040 80e3 	bne.w	800361c <HCD_HC_OUT_IRQHandler+0x69c>
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	334c      	adds	r3, #76	; 0x4c
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80d8 	beq.w	800361c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	334c      	adds	r3, #76	; 0x4c
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	202c      	movs	r0, #44	; 0x2c
 8003482:	fb00 f202 	mul.w	r2, r0, r2
 8003486:	440a      	add	r2, r1
 8003488:	3240      	adds	r2, #64	; 0x40
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	4413      	add	r3, r2
 800348e:	3b01      	subs	r3, #1
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	202c      	movs	r0, #44	; 0x2c
 8003496:	fb00 f202 	mul.w	r2, r0, r2
 800349a:	440a      	add	r2, r1
 800349c:	3240      	adds	r2, #64	; 0x40
 800349e:	8812      	ldrh	r2, [r2, #0]
 80034a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80b5 	beq.w	800361c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3355      	adds	r3, #85	; 0x55
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	f083 0301 	eor.w	r3, r3, #1
 80034c6:	b2d8      	uxtb	r0, r3
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	212c      	movs	r1, #44	; 0x2c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	3355      	adds	r3, #85	; 0x55
 80034d6:	4602      	mov	r2, r0
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	e09f      	b.n	800361c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	3361      	adds	r3, #97	; 0x61
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d109      	bne.n	8003504 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3360      	adds	r3, #96	; 0x60
 80034fe:	2202      	movs	r2, #2
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	e08b      	b.n	800361c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	3361      	adds	r3, #97	; 0x61
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d109      	bne.n	800352c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3360      	adds	r3, #96	; 0x60
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e077      	b.n	800361c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	3361      	adds	r3, #97	; 0x61
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d109      	bne.n	8003554 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	3360      	adds	r3, #96	; 0x60
 800354e:	2205      	movs	r2, #5
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e063      	b.n	800361c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3361      	adds	r3, #97	; 0x61
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b06      	cmp	r3, #6
 8003566:	d009      	beq.n	800357c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3361      	adds	r3, #97	; 0x61
 8003576:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003578:	2b08      	cmp	r3, #8
 800357a:	d14f      	bne.n	800361c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	335c      	adds	r3, #92	; 0x5c
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	202c      	movs	r0, #44	; 0x2c
 8003594:	fb00 f303 	mul.w	r3, r0, r3
 8003598:	440b      	add	r3, r1
 800359a:	335c      	adds	r3, #92	; 0x5c
 800359c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	335c      	adds	r3, #92	; 0x5c
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d912      	bls.n	80035d8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	335c      	adds	r3, #92	; 0x5c
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3360      	adds	r3, #96	; 0x60
 80035d2:	2204      	movs	r2, #4
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e021      	b.n	800361c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3360      	adds	r3, #96	; 0x60
 80035e6:	2202      	movs	r2, #2
 80035e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003600:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003608:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	4413      	add	r3, r2
 8003612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003616:	461a      	mov	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	2302      	movs	r3, #2
 800362c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	b2d9      	uxtb	r1, r3
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	202c      	movs	r0, #44	; 0x2c
 8003638:	fb00 f303 	mul.w	r3, r0, r3
 800363c:	4413      	add	r3, r2
 800363e:	3360      	adds	r3, #96	; 0x60
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f006 f889 	bl	800975c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800364a:	bf00      	nop
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b08a      	sub	sp, #40	; 0x28
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	0c5b      	lsrs	r3, r3, #17
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003686:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d004      	beq.n	8003698 <HCD_RXQLVL_IRQHandler+0x46>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b05      	cmp	r3, #5
 8003692:	f000 80a9 	beq.w	80037e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003696:	e0aa      	b.n	80037ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80a6 	beq.w	80037ec <HCD_RXQLVL_IRQHandler+0x19a>
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3344      	adds	r3, #68	; 0x44
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 809b 	beq.w	80037ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	3350      	adds	r3, #80	; 0x50
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	441a      	add	r2, r3
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	202c      	movs	r0, #44	; 0x2c
 80036d0:	fb00 f303 	mul.w	r3, r0, r3
 80036d4:	440b      	add	r3, r1
 80036d6:	334c      	adds	r3, #76	; 0x4c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d87a      	bhi.n	80037d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3344      	adds	r3, #68	; 0x44
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	b292      	uxth	r2, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	f003 f8e4 	bl	80068c4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	212c      	movs	r1, #44	; 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	3344      	adds	r3, #68	; 0x44
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	441a      	add	r2, r3
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	202c      	movs	r0, #44	; 0x2c
 8003716:	fb00 f303 	mul.w	r3, r0, r3
 800371a:	440b      	add	r3, r1
 800371c:	3344      	adds	r3, #68	; 0x44
 800371e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3350      	adds	r3, #80	; 0x50
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	441a      	add	r2, r3
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	202c      	movs	r0, #44	; 0x2c
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	440b      	add	r3, r1
 8003740:	3350      	adds	r3, #80	; 0x50
 8003742:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	0cdb      	lsrs	r3, r3, #19
 8003754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003758:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	3340      	adds	r3, #64	; 0x40
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4293      	cmp	r3, r2
 8003770:	d13c      	bne.n	80037ec <HCD_RXQLVL_IRQHandler+0x19a>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d039      	beq.n	80037ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800378e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003796:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	3354      	adds	r3, #84	; 0x54
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	f083 0301 	eor.w	r3, r3, #1
 80037be:	b2d8      	uxtb	r0, r3
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	3354      	adds	r3, #84	; 0x54
 80037ce:	4602      	mov	r2, r0
 80037d0:	701a      	strb	r2, [r3, #0]
      break;
 80037d2:	e00b      	b.n	80037ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	3360      	adds	r3, #96	; 0x60
 80037e2:	2204      	movs	r2, #4
 80037e4:	701a      	strb	r2, [r3, #0]
      break;
 80037e6:	e001      	b.n	80037ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80037ec:	bf00      	nop
  }
}
 80037ee:	bf00      	nop
 80037f0:	3728      	adds	r7, #40	; 0x28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003822:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d10b      	bne.n	8003846 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f005 ff73 	bl	8009724 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d132      	bne.n	80038b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f043 0308 	orr.w	r3, r3, #8
 8003856:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b04      	cmp	r3, #4
 8003860:	d126      	bne.n	80038b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d113      	bne.n	8003892 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003870:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003874:	d106      	bne.n	8003884 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2102      	movs	r1, #2
 800387c:	4618      	mov	r0, r3
 800387e:	f003 f98f 	bl	8006ba0 <USB_InitFSLSPClkSel>
 8003882:	e011      	b.n	80038a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f003 f988 	bl	8006ba0 <USB_InitFSLSPClkSel>
 8003890:	e00a      	b.n	80038a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d106      	bne.n	80038a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038a0:	461a      	mov	r2, r3
 80038a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f005 ff65 	bl	8009778 <HAL_HCD_PortEnabled_Callback>
 80038ae:	e002      	b.n	80038b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f005 ff6f 	bl	8009794 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d103      	bne.n	80038c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f043 0320 	orr.w	r3, r3, #32
 80038c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e12b      	b.n	8003b46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fe62 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800393e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003940:	f002 f89c 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8003944:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4a81      	ldr	r2, [pc, #516]	; (8003b50 <HAL_I2C_Init+0x274>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d807      	bhi.n	8003960 <HAL_I2C_Init+0x84>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a80      	ldr	r2, [pc, #512]	; (8003b54 <HAL_I2C_Init+0x278>)
 8003954:	4293      	cmp	r3, r2
 8003956:	bf94      	ite	ls
 8003958:	2301      	movls	r3, #1
 800395a:	2300      	movhi	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e006      	b.n	800396e <HAL_I2C_Init+0x92>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a7d      	ldr	r2, [pc, #500]	; (8003b58 <HAL_I2C_Init+0x27c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	bf94      	ite	ls
 8003968:	2301      	movls	r3, #1
 800396a:	2300      	movhi	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e0e7      	b.n	8003b46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a78      	ldr	r2, [pc, #480]	; (8003b5c <HAL_I2C_Init+0x280>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0c9b      	lsrs	r3, r3, #18
 8003980:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a6a      	ldr	r2, [pc, #424]	; (8003b50 <HAL_I2C_Init+0x274>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d802      	bhi.n	80039b0 <HAL_I2C_Init+0xd4>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	3301      	adds	r3, #1
 80039ae:	e009      	b.n	80039c4 <HAL_I2C_Init+0xe8>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	4a69      	ldr	r2, [pc, #420]	; (8003b60 <HAL_I2C_Init+0x284>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	3301      	adds	r3, #1
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	495c      	ldr	r1, [pc, #368]	; (8003b50 <HAL_I2C_Init+0x274>)
 80039e0:	428b      	cmp	r3, r1
 80039e2:	d819      	bhi.n	8003a18 <HAL_I2C_Init+0x13c>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e59      	subs	r1, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f2:	1c59      	adds	r1, r3, #1
 80039f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039f8:	400b      	ands	r3, r1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_I2C_Init+0x138>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1e59      	subs	r1, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a12:	e051      	b.n	8003ab8 <HAL_I2C_Init+0x1dc>
 8003a14:	2304      	movs	r3, #4
 8003a16:	e04f      	b.n	8003ab8 <HAL_I2C_Init+0x1dc>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d111      	bne.n	8003a44 <HAL_I2C_Init+0x168>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e58      	subs	r0, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	440b      	add	r3, r1
 8003a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e012      	b.n	8003a6a <HAL_I2C_Init+0x18e>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e58      	subs	r0, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	0099      	lsls	r1, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Init+0x196>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e022      	b.n	8003ab8 <HAL_I2C_Init+0x1dc>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10e      	bne.n	8003a98 <HAL_I2C_Init+0x1bc>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1e58      	subs	r0, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6859      	ldr	r1, [r3, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	440b      	add	r3, r1
 8003a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a96:	e00f      	b.n	8003ab8 <HAL_I2C_Init+0x1dc>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	0099      	lsls	r1, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	6809      	ldr	r1, [r1, #0]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6911      	ldr	r1, [r2, #16]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68d2      	ldr	r2, [r2, #12]
 8003af2:	4311      	orrs	r1, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	000186a0 	.word	0x000186a0
 8003b54:	001e847f 	.word	0x001e847f
 8003b58:	003d08ff 	.word	0x003d08ff
 8003b5c:	431bde83 	.word	0x431bde83
 8003b60:	10624dd3 	.word	0x10624dd3

08003b64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	817b      	strh	r3, [r7, #10]
 8003b76:	460b      	mov	r3, r1
 8003b78:	813b      	strh	r3, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b7e:	f7fd ffab 	bl	8001ad8 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	f040 80d9 	bne.w	8003d44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2319      	movs	r3, #25
 8003b98:	2201      	movs	r2, #1
 8003b9a:	496d      	ldr	r1, [pc, #436]	; (8003d50 <HAL_I2C_Mem_Write+0x1ec>)
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fc7f 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0cc      	b.n	8003d46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Mem_Write+0x56>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e0c5      	b.n	8003d46 <HAL_I2C_Mem_Write+0x1e2>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d007      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2221      	movs	r2, #33	; 0x21
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a4d      	ldr	r2, [pc, #308]	; (8003d54 <HAL_I2C_Mem_Write+0x1f0>)
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c22:	88f8      	ldrh	r0, [r7, #6]
 8003c24:	893a      	ldrh	r2, [r7, #8]
 8003c26:	8979      	ldrh	r1, [r7, #10]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	4603      	mov	r3, r0
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fab6 	bl	80041a4 <I2C_RequestMemoryWrite>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d052      	beq.n	8003ce4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e081      	b.n	8003d46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fd00 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00d      	beq.n	8003c6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d107      	bne.n	8003c6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e06b      	b.n	8003d46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d11b      	bne.n	8003ce4 <HAL_I2C_Mem_Write+0x180>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d017      	beq.n	8003ce4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1aa      	bne.n	8003c42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fcec 	bl	80046ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00d      	beq.n	8003d18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d107      	bne.n	8003d14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e016      	b.n	8003d46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	00100002 	.word	0x00100002
 8003d54:	ffff0000 	.word	0xffff0000

08003d58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d72:	f7fd feb1 	bl	8001ad8 <HAL_GetTick>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	f040 8208 	bne.w	8004196 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	2319      	movs	r3, #25
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	497b      	ldr	r1, [pc, #492]	; (8003f7c <HAL_I2C_Mem_Read+0x224>)
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fb85 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e1fb      	b.n	8004198 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_I2C_Mem_Read+0x56>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e1f4      	b.n	8004198 <HAL_I2C_Mem_Read+0x440>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d007      	beq.n	8003dd4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2222      	movs	r2, #34	; 0x22
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2240      	movs	r2, #64	; 0x40
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a5b      	ldr	r2, [pc, #364]	; (8003f80 <HAL_I2C_Mem_Read+0x228>)
 8003e14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e16:	88f8      	ldrh	r0, [r7, #6]
 8003e18:	893a      	ldrh	r2, [r7, #8]
 8003e1a:	8979      	ldrh	r1, [r7, #10]
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	4603      	mov	r3, r0
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fa52 	bl	80042d0 <I2C_RequestMemoryRead>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e1b0      	b.n	8004198 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d113      	bne.n	8003e66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	623b      	str	r3, [r7, #32]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e184      	b.n	8004170 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e164      	b.n	8004170 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d11b      	bne.n	8003ee6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ecc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	e144      	b.n	8004170 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003efc:	e138      	b.n	8004170 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	f200 80f1 	bhi.w	80040ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d123      	bne.n	8003f58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fc1b 	bl	8004750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e139      	b.n	8004198 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f56:	e10b      	b.n	8004170 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d14e      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	2200      	movs	r2, #0
 8003f68:	4906      	ldr	r1, [pc, #24]	; (8003f84 <HAL_I2C_Mem_Read+0x22c>)
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fa98 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e10e      	b.n	8004198 <HAL_I2C_Mem_Read+0x440>
 8003f7a:	bf00      	nop
 8003f7c:	00100002 	.word	0x00100002
 8003f80:	ffff0000 	.word	0xffff0000
 8003f84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffc:	e0b8      	b.n	8004170 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	2200      	movs	r2, #0
 8004006:	4966      	ldr	r1, [pc, #408]	; (80041a0 <HAL_I2C_Mem_Read+0x448>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fa49 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0bf      	b.n	8004198 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2200      	movs	r2, #0
 8004062:	494f      	ldr	r1, [pc, #316]	; (80041a0 <HAL_I2C_Mem_Read+0x448>)
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fa1b 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e091      	b.n	8004198 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040e8:	e042      	b.n	8004170 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fb2e 	bl	8004750 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e04c      	b.n	8004198 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b04      	cmp	r3, #4
 800413c:	d118      	bne.n	8004170 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	f47f aec2 	bne.w	8003efe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e000      	b.n	8004198 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3728      	adds	r7, #40	; 0x28
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	00010004 	.word	0x00010004

080041a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	461a      	mov	r2, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	817b      	strh	r3, [r7, #10]
 80041b6:	460b      	mov	r3, r1
 80041b8:	813b      	strh	r3, [r7, #8]
 80041ba:	4613      	mov	r3, r2
 80041bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f960 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f4:	d103      	bne.n	80041fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e05f      	b.n	80042c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004202:	897b      	ldrh	r3, [r7, #10]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	6a3a      	ldr	r2, [r7, #32]
 8004216:	492d      	ldr	r1, [pc, #180]	; (80042cc <I2C_RequestMemoryWrite+0x128>)
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f998 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e04c      	b.n	80042c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004240:	6a39      	ldr	r1, [r7, #32]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa02 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b04      	cmp	r3, #4
 8004254:	d107      	bne.n	8004266 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e02b      	b.n	80042c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d105      	bne.n	800427c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004270:	893b      	ldrh	r3, [r7, #8]
 8004272:	b2da      	uxtb	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	611a      	str	r2, [r3, #16]
 800427a:	e021      	b.n	80042c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800427c:	893b      	ldrh	r3, [r7, #8]
 800427e:	0a1b      	lsrs	r3, r3, #8
 8004280:	b29b      	uxth	r3, r3
 8004282:	b2da      	uxtb	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428c:	6a39      	ldr	r1, [r7, #32]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f9dc 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00d      	beq.n	80042b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d107      	bne.n	80042b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e005      	b.n	80042c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042b6:	893b      	ldrh	r3, [r7, #8]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	00010002 	.word	0x00010002

080042d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	817b      	strh	r3, [r7, #10]
 80042e2:	460b      	mov	r3, r1
 80042e4:	813b      	strh	r3, [r7, #8]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004308:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	2200      	movs	r2, #0
 8004312:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f8c2 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004330:	d103      	bne.n	800433a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0aa      	b.n	8004494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800433e:	897b      	ldrh	r3, [r7, #10]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800434c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	6a3a      	ldr	r2, [r7, #32]
 8004352:	4952      	ldr	r1, [pc, #328]	; (800449c <I2C_RequestMemoryRead+0x1cc>)
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f8fa 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e097      	b.n	8004494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	6a39      	ldr	r1, [r7, #32]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f964 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b04      	cmp	r3, #4
 8004390:	d107      	bne.n	80043a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e076      	b.n	8004494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d105      	bne.n	80043b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ac:	893b      	ldrh	r3, [r7, #8]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	611a      	str	r2, [r3, #16]
 80043b6:	e021      	b.n	80043fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043b8:	893b      	ldrh	r3, [r7, #8]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	b29b      	uxth	r3, r3
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	6a39      	ldr	r1, [r7, #32]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f93e 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00d      	beq.n	80043f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d107      	bne.n	80043ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e050      	b.n	8004494 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043f2:	893b      	ldrh	r3, [r7, #8]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	6a39      	ldr	r1, [r7, #32]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f923 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00d      	beq.n	8004428 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	2b04      	cmp	r3, #4
 8004412:	d107      	bne.n	8004424 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004422:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e035      	b.n	8004494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004436:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	2200      	movs	r2, #0
 8004440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f82b 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00d      	beq.n	800446c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445e:	d103      	bne.n	8004468 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e013      	b.n	8004494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800446c:	897b      	ldrh	r3, [r7, #10]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	4906      	ldr	r1, [pc, #24]	; (800449c <I2C_RequestMemoryRead+0x1cc>)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f863 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	00010002 	.word	0x00010002

080044a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b0:	e025      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d021      	beq.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fd fb0d 	bl	8001ad8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e023      	b.n	8004546 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10d      	bne.n	8004524 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	e00c      	b.n	800453e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	43da      	mvns	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d0b6      	beq.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800455c:	e051      	b.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456c:	d123      	bne.n	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004586:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0204 	orr.w	r2, r3, #4
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e046      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d021      	beq.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fd fa8b 	bl	8001ad8 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e020      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d10c      	bne.n	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	43da      	mvns	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e00b      	b.n	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	43da      	mvns	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4013      	ands	r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d18d      	bne.n	800455e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004658:	e02d      	b.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f8ce 	bl	80047fc <I2C_IsAcknowledgeFailed>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e02d      	b.n	80046c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d021      	beq.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fd fa31 	bl	8001ad8 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d116      	bne.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e007      	b.n	80046c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d1ca      	bne.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046da:	e02d      	b.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f88d 	bl	80047fc <I2C_IsAcknowledgeFailed>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e02d      	b.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d021      	beq.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7fd f9f0 	bl	8001ad8 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e007      	b.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b04      	cmp	r3, #4
 8004744:	d1ca      	bne.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800475c:	e042      	b.n	80047e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b10      	cmp	r3, #16
 800476a:	d119      	bne.n	80047a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0210 	mvn.w	r2, #16
 8004774:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e029      	b.n	80047f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a0:	f7fd f99a 	bl	8001ad8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d302      	bcc.n	80047b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d116      	bne.n	80047e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e007      	b.n	80047f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d1b5      	bne.n	800475e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004812:	d11b      	bne.n	800484c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800481c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	f043 0204 	orr.w	r2, r3, #4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e128      	b.n	8004ac0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a90      	ldr	r2, [pc, #576]	; (8004ac8 <HAL_I2S_Init+0x26c>)
 8004886:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7fc ff09 	bl	80016a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048a4:	f023 030f 	bic.w	r3, r3, #15
 80048a8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2202      	movs	r2, #2
 80048b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d060      	beq.n	800497c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80048c2:	2310      	movs	r3, #16
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e001      	b.n	80048cc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80048c8:	2320      	movs	r3, #32
 80048ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d802      	bhi.n	80048da <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80048da:	2001      	movs	r0, #1
 80048dc:	f001 f9d8 	bl	8005c90 <HAL_RCCEx_GetPeriphCLKFreq>
 80048e0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ea:	d125      	bne.n	8004938 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d010      	beq.n	8004916 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	461a      	mov	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	3305      	adds	r3, #5
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	e01f      	b.n	8004956 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	461a      	mov	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004932:	3305      	adds	r3, #5
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	e00e      	b.n	8004956 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	461a      	mov	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	3305      	adds	r3, #5
 8004954:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4a5c      	ldr	r2, [pc, #368]	; (8004acc <HAL_I2S_Init+0x270>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	08db      	lsrs	r3, r3, #3
 8004960:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e003      	b.n	8004984 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800497c:	2302      	movs	r3, #2
 800497e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d902      	bls.n	8004990 <HAL_I2S_Init+0x134>
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	2bff      	cmp	r3, #255	; 0xff
 800498e:	d907      	bls.n	80049a0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004994:	f043 0210 	orr.w	r2, r3, #16
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e08f      	b.n	8004ac0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	ea42 0103 	orr.w	r1, r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049be:	f023 030f 	bic.w	r3, r3, #15
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6851      	ldr	r1, [r2, #4]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6892      	ldr	r2, [r2, #8]
 80049ca:	4311      	orrs	r1, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68d2      	ldr	r2, [r2, #12]
 80049d0:	4311      	orrs	r1, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6992      	ldr	r2, [r2, #24]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049e2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d161      	bne.n	8004ab0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a38      	ldr	r2, [pc, #224]	; (8004ad0 <HAL_I2S_Init+0x274>)
 80049f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a37      	ldr	r2, [pc, #220]	; (8004ad4 <HAL_I2S_Init+0x278>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_I2S_Init+0x1a4>
 80049fc:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <HAL_I2S_Init+0x27c>)
 80049fe:	e001      	b.n	8004a04 <HAL_I2S_Init+0x1a8>
 8004a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	4932      	ldr	r1, [pc, #200]	; (8004ad4 <HAL_I2S_Init+0x278>)
 8004a0c:	428a      	cmp	r2, r1
 8004a0e:	d101      	bne.n	8004a14 <HAL_I2S_Init+0x1b8>
 8004a10:	4a31      	ldr	r2, [pc, #196]	; (8004ad8 <HAL_I2S_Init+0x27c>)
 8004a12:	e001      	b.n	8004a18 <HAL_I2S_Init+0x1bc>
 8004a14:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a1c:	f023 030f 	bic.w	r3, r3, #15
 8004a20:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2b      	ldr	r2, [pc, #172]	; (8004ad4 <HAL_I2S_Init+0x278>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <HAL_I2S_Init+0x1d4>
 8004a2c:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <HAL_I2S_Init+0x27c>)
 8004a2e:	e001      	b.n	8004a34 <HAL_I2S_Init+0x1d8>
 8004a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a34:	2202      	movs	r2, #2
 8004a36:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a25      	ldr	r2, [pc, #148]	; (8004ad4 <HAL_I2S_Init+0x278>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_I2S_Init+0x1ea>
 8004a42:	4b25      	ldr	r3, [pc, #148]	; (8004ad8 <HAL_I2S_Init+0x27c>)
 8004a44:	e001      	b.n	8004a4a <HAL_I2S_Init+0x1ee>
 8004a46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a56:	d003      	beq.n	8004a60 <HAL_I2S_Init+0x204>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e001      	b.n	8004a6c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a76:	4313      	orrs	r3, r2
 8004a78:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a80:	4313      	orrs	r3, r2
 8004a82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	897b      	ldrh	r3, [r7, #10]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a98:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <HAL_I2S_Init+0x278>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_I2S_Init+0x24c>
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <HAL_I2S_Init+0x27c>)
 8004aa6:	e001      	b.n	8004aac <HAL_I2S_Init+0x250>
 8004aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aac:	897a      	ldrh	r2, [r7, #10]
 8004aae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	08004bd3 	.word	0x08004bd3
 8004acc:	cccccccd 	.word	0xcccccccd
 8004ad0:	08004ce9 	.word	0x08004ce9
 8004ad4:	40003800 	.word	0x40003800
 8004ad8:	40003400 	.word	0x40003400

08004adc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	881a      	ldrh	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	1c9a      	adds	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10e      	bne.n	8004b6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff ffb8 	bl	8004adc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	b292      	uxth	r2, r2
 8004b88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	1c9a      	adds	r2, r3, #2
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10e      	bne.n	8004bca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff ff93 	bl	8004af0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b086      	sub	sp, #24
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d13a      	bne.n	8004c64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d109      	bne.n	8004c0c <I2S_IRQHandler+0x3a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d102      	bne.n	8004c0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ffb4 	bl	8004b74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d126      	bne.n	8004c64 <I2S_IRQHandler+0x92>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d11f      	bne.n	8004c64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f043 0202 	orr.w	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ff50 	bl	8004b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d136      	bne.n	8004cde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d109      	bne.n	8004c8e <I2S_IRQHandler+0xbc>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d102      	bne.n	8004c8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff45 	bl	8004b18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d122      	bne.n	8004cde <I2S_IRQHandler+0x10c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d11b      	bne.n	8004cde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	f043 0204 	orr.w	r2, r3, #4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff13 	bl	8004b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cde:	bf00      	nop
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a92      	ldr	r2, [pc, #584]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d101      	bne.n	8004d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d02:	4b92      	ldr	r3, [pc, #584]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d04:	e001      	b.n	8004d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a8b      	ldr	r2, [pc, #556]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d101      	bne.n	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d20:	4b8a      	ldr	r3, [pc, #552]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d22:	e001      	b.n	8004d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d34:	d004      	beq.n	8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f040 8099 	bne.w	8004e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d107      	bne.n	8004d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f925 	bl	8004fa4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d107      	bne.n	8004d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f9c8 	bl	8005104 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b40      	cmp	r3, #64	; 0x40
 8004d7c:	d13a      	bne.n	8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d035      	beq.n	8004df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a6e      	ldr	r2, [pc, #440]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004d92:	4b6e      	ldr	r3, [pc, #440]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d94:	e001      	b.n	8004d9a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004d96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4969      	ldr	r1, [pc, #420]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004da2:	428b      	cmp	r3, r1
 8004da4:	d101      	bne.n	8004daa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004da6:	4b69      	ldr	r3, [pc, #420]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004da8:	e001      	b.n	8004dae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004daa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004db2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	f043 0202 	orr.w	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fe88 	bl	8004b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	f040 80c3 	bne.w	8004f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80bd 	beq.w	8004f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a49      	ldr	r2, [pc, #292]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e26:	4b49      	ldr	r3, [pc, #292]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e28:	e001      	b.n	8004e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4944      	ldr	r1, [pc, #272]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e36:	428b      	cmp	r3, r1
 8004e38:	d101      	bne.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e3a:	4b44      	ldr	r3, [pc, #272]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e3c:	e001      	b.n	8004e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	f043 0204 	orr.w	r2, r3, #4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fe4a 	bl	8004b04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e70:	e089      	b.n	8004f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d107      	bne.n	8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f8be 	bl	8005008 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d107      	bne.n	8004ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8fd 	bl	80050a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d12f      	bne.n	8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d02a      	beq.n	8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ec8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d101      	bne.n	8004ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ed4:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ed6:	e001      	b.n	8004edc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4919      	ldr	r1, [pc, #100]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	d101      	bne.n	8004eec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ee8:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eea:	e001      	b.n	8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ef0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ef4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f043 0202 	orr.w	r2, r3, #2
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fdfa 	bl	8004b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d136      	bne.n	8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d031      	beq.n	8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d101      	bne.n	8004f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f2e:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f30:	e001      	b.n	8004f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4902      	ldr	r1, [pc, #8]	; (8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f3e:	428b      	cmp	r3, r1
 8004f40:	d106      	bne.n	8004f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004f42:	4b02      	ldr	r3, [pc, #8]	; (8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f44:	e006      	b.n	8004f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004f46:	bf00      	nop
 8004f48:	40003800 	.word	0x40003800
 8004f4c:	40003400 	.word	0x40003400
 8004f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f58:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f043 0204 	orr.w	r2, r3, #4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fdc0 	bl	8004b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f84:	e000      	b.n	8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f86:	bf00      	nop
}
 8004f88:	bf00      	nop
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	1c99      	adds	r1, r3, #2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6251      	str	r1, [r2, #36]	; 0x24
 8004fb6:	881a      	ldrh	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d113      	bne.n	8004ffe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fe4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d106      	bne.n	8004ffe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ffc9 	bl	8004f90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	1c99      	adds	r1, r3, #2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6251      	str	r1, [r2, #36]	; 0x24
 800501a:	8819      	ldrh	r1, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <I2SEx_TxISR_I2SExt+0x90>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <I2SEx_TxISR_I2SExt+0x22>
 8005026:	4b1d      	ldr	r3, [pc, #116]	; (800509c <I2SEx_TxISR_I2SExt+0x94>)
 8005028:	e001      	b.n	800502e <I2SEx_TxISR_I2SExt+0x26>
 800502a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800502e:	460a      	mov	r2, r1
 8005030:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d121      	bne.n	800508e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <I2SEx_TxISR_I2SExt+0x90>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d101      	bne.n	8005058 <I2SEx_TxISR_I2SExt+0x50>
 8005054:	4b11      	ldr	r3, [pc, #68]	; (800509c <I2SEx_TxISR_I2SExt+0x94>)
 8005056:	e001      	b.n	800505c <I2SEx_TxISR_I2SExt+0x54>
 8005058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	490d      	ldr	r1, [pc, #52]	; (8005098 <I2SEx_TxISR_I2SExt+0x90>)
 8005064:	428b      	cmp	r3, r1
 8005066:	d101      	bne.n	800506c <I2SEx_TxISR_I2SExt+0x64>
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <I2SEx_TxISR_I2SExt+0x94>)
 800506a:	e001      	b.n	8005070 <I2SEx_TxISR_I2SExt+0x68>
 800506c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005070:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005074:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ff81 	bl	8004f90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40003800 	.word	0x40003800
 800509c:	40003400 	.word	0x40003400

080050a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68d8      	ldr	r0, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	1c99      	adds	r1, r3, #2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80050b8:	b282      	uxth	r2, r0
 80050ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d113      	bne.n	80050fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff ff4a 	bl	8004f90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050fc:	bf00      	nop
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a20      	ldr	r2, [pc, #128]	; (8005194 <I2SEx_RxISR_I2SExt+0x90>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d101      	bne.n	800511a <I2SEx_RxISR_I2SExt+0x16>
 8005116:	4b20      	ldr	r3, [pc, #128]	; (8005198 <I2SEx_RxISR_I2SExt+0x94>)
 8005118:	e001      	b.n	800511e <I2SEx_RxISR_I2SExt+0x1a>
 800511a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800511e:	68d8      	ldr	r0, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	1c99      	adds	r1, r3, #2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	62d1      	str	r1, [r2, #44]	; 0x2c
 800512a:	b282      	uxth	r2, r0
 800512c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d121      	bne.n	800518a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a12      	ldr	r2, [pc, #72]	; (8005194 <I2SEx_RxISR_I2SExt+0x90>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d101      	bne.n	8005154 <I2SEx_RxISR_I2SExt+0x50>
 8005150:	4b11      	ldr	r3, [pc, #68]	; (8005198 <I2SEx_RxISR_I2SExt+0x94>)
 8005152:	e001      	b.n	8005158 <I2SEx_RxISR_I2SExt+0x54>
 8005154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	490d      	ldr	r1, [pc, #52]	; (8005194 <I2SEx_RxISR_I2SExt+0x90>)
 8005160:	428b      	cmp	r3, r1
 8005162:	d101      	bne.n	8005168 <I2SEx_RxISR_I2SExt+0x64>
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <I2SEx_RxISR_I2SExt+0x94>)
 8005166:	e001      	b.n	800516c <I2SEx_RxISR_I2SExt+0x68>
 8005168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800516c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005170:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d106      	bne.n	800518a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff ff03 	bl	8004f90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40003800 	.word	0x40003800
 8005198:	40003400 	.word	0x40003400

0800519c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e267      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d075      	beq.n	80052a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ba:	4b88      	ldr	r3, [pc, #544]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d00c      	beq.n	80051e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051c6:	4b85      	ldr	r3, [pc, #532]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d112      	bne.n	80051f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d2:	4b82      	ldr	r3, [pc, #520]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051de:	d10b      	bne.n	80051f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e0:	4b7e      	ldr	r3, [pc, #504]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d05b      	beq.n	80052a4 <HAL_RCC_OscConfig+0x108>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d157      	bne.n	80052a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e242      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d106      	bne.n	8005210 <HAL_RCC_OscConfig+0x74>
 8005202:	4b76      	ldr	r3, [pc, #472]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a75      	ldr	r2, [pc, #468]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e01d      	b.n	800524c <HAL_RCC_OscConfig+0xb0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x98>
 800521a:	4b70      	ldr	r3, [pc, #448]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6f      	ldr	r2, [pc, #444]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	4b6d      	ldr	r3, [pc, #436]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6c      	ldr	r2, [pc, #432]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800522c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e00b      	b.n	800524c <HAL_RCC_OscConfig+0xb0>
 8005234:	4b69      	ldr	r3, [pc, #420]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a68      	ldr	r2, [pc, #416]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800523a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	4b66      	ldr	r3, [pc, #408]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a65      	ldr	r2, [pc, #404]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800524a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d013      	beq.n	800527c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005254:	f7fc fc40 	bl	8001ad8 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800525c:	f7fc fc3c 	bl	8001ad8 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b64      	cmp	r3, #100	; 0x64
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e207      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526e:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0xc0>
 800527a:	e014      	b.n	80052a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fc fc2c 	bl	8001ad8 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005284:	f7fc fc28 	bl	8001ad8 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	; 0x64
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e1f3      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005296:	4b51      	ldr	r3, [pc, #324]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0xe8>
 80052a2:	e000      	b.n	80052a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d063      	beq.n	800537a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052b2:	4b4a      	ldr	r3, [pc, #296]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052be:	4b47      	ldr	r3, [pc, #284]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d11c      	bne.n	8005304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ca:	4b44      	ldr	r3, [pc, #272]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d116      	bne.n	8005304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d6:	4b41      	ldr	r3, [pc, #260]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_RCC_OscConfig+0x152>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e1c7      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ee:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4937      	ldr	r1, [pc, #220]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005302:	e03a      	b.n	800537a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800530c:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCC_OscConfig+0x244>)
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7fc fbe1 	bl	8001ad8 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800531a:	f7fc fbdd 	bl	8001ad8 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e1a8      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532c:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005338:	4b28      	ldr	r3, [pc, #160]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4925      	ldr	r1, [pc, #148]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]
 800534c:	e015      	b.n	800537a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fc fbc0 	bl	8001ad8 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535c:	f7fc fbbc 	bl	8001ad8 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e187      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d036      	beq.n	80053f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <HAL_RCC_OscConfig+0x248>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fc fba0 	bl	8001ad8 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800539c:	f7fc fb9c 	bl	8001ad8 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e167      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80053b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x200>
 80053ba:	e01b      	b.n	80053f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <HAL_RCC_OscConfig+0x248>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c2:	f7fc fb89 	bl	8001ad8 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c8:	e00e      	b.n	80053e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ca:	f7fc fb85 	bl	8001ad8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d907      	bls.n	80053e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e150      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
 80053dc:	40023800 	.word	0x40023800
 80053e0:	42470000 	.word	0x42470000
 80053e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e8:	4b88      	ldr	r3, [pc, #544]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80053ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1ea      	bne.n	80053ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8097 	beq.w	8005530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005406:	4b81      	ldr	r3, [pc, #516]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	4b7d      	ldr	r3, [pc, #500]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	4a7c      	ldr	r2, [pc, #496]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800541c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005420:	6413      	str	r3, [r2, #64]	; 0x40
 8005422:	4b7a      	ldr	r3, [pc, #488]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800542e:	2301      	movs	r3, #1
 8005430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005432:	4b77      	ldr	r3, [pc, #476]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d118      	bne.n	8005470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800543e:	4b74      	ldr	r3, [pc, #464]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a73      	ldr	r2, [pc, #460]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800544a:	f7fc fb45 	bl	8001ad8 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005452:	f7fc fb41 	bl	8001ad8 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e10c      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005464:	4b6a      	ldr	r3, [pc, #424]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d106      	bne.n	8005486 <HAL_RCC_OscConfig+0x2ea>
 8005478:	4b64      	ldr	r3, [pc, #400]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	4a63      	ldr	r2, [pc, #396]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	6713      	str	r3, [r2, #112]	; 0x70
 8005484:	e01c      	b.n	80054c0 <HAL_RCC_OscConfig+0x324>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b05      	cmp	r3, #5
 800548c:	d10c      	bne.n	80054a8 <HAL_RCC_OscConfig+0x30c>
 800548e:	4b5f      	ldr	r3, [pc, #380]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4a5e      	ldr	r2, [pc, #376]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005494:	f043 0304 	orr.w	r3, r3, #4
 8005498:	6713      	str	r3, [r2, #112]	; 0x70
 800549a:	4b5c      	ldr	r3, [pc, #368]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	4a5b      	ldr	r2, [pc, #364]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	6713      	str	r3, [r2, #112]	; 0x70
 80054a6:	e00b      	b.n	80054c0 <HAL_RCC_OscConfig+0x324>
 80054a8:	4b58      	ldr	r3, [pc, #352]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	4a57      	ldr	r2, [pc, #348]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	6713      	str	r3, [r2, #112]	; 0x70
 80054b4:	4b55      	ldr	r3, [pc, #340]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	4a54      	ldr	r2, [pc, #336]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054ba:	f023 0304 	bic.w	r3, r3, #4
 80054be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d015      	beq.n	80054f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fc fb06 	bl	8001ad8 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d0:	f7fc fb02 	bl	8001ad8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e0cb      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e6:	4b49      	ldr	r3, [pc, #292]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0ee      	beq.n	80054d0 <HAL_RCC_OscConfig+0x334>
 80054f2:	e014      	b.n	800551e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f4:	f7fc faf0 	bl	8001ad8 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fc faec 	bl	8001ad8 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e0b5      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005512:	4b3e      	ldr	r3, [pc, #248]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ee      	bne.n	80054fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d105      	bne.n	8005530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005524:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	4a38      	ldr	r2, [pc, #224]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800552e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80a1 	beq.w	800567c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800553a:	4b34      	ldr	r3, [pc, #208]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b08      	cmp	r3, #8
 8005544:	d05c      	beq.n	8005600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d141      	bne.n	80055d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554e:	4b31      	ldr	r3, [pc, #196]	; (8005614 <HAL_RCC_OscConfig+0x478>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fc fac0 	bl	8001ad8 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555c:	f7fc fabc 	bl	8001ad8 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e087      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800556e:	4b27      	ldr	r3, [pc, #156]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	019b      	lsls	r3, r3, #6
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	3b01      	subs	r3, #1
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	491b      	ldr	r1, [pc, #108]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a4:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <HAL_RCC_OscConfig+0x478>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055aa:	f7fc fa95 	bl	8001ad8 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b2:	f7fc fa91 	bl	8001ad8 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e05c      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCC_OscConfig+0x416>
 80055d0:	e054      	b.n	800567c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <HAL_RCC_OscConfig+0x478>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d8:	f7fc fa7e 	bl	8001ad8 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fc fa7a 	bl	8001ad8 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e045      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x444>
 80055fe:	e03d      	b.n	800567c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d107      	bne.n	8005618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e038      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
 800560c:	40023800 	.word	0x40023800
 8005610:	40007000 	.word	0x40007000
 8005614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005618:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <HAL_RCC_OscConfig+0x4ec>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d028      	beq.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005630:	429a      	cmp	r2, r3
 8005632:	d121      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d11a      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800564e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005650:	4293      	cmp	r3, r2
 8005652:	d111      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	3b01      	subs	r3, #1
 8005662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d107      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d001      	beq.n	800567c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800

0800568c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0cc      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056a0:	4b68      	ldr	r3, [pc, #416]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d90c      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b65      	ldr	r3, [pc, #404]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b63      	ldr	r3, [pc, #396]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0b8      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d020      	beq.n	8005716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056e0:	4b59      	ldr	r3, [pc, #356]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a58      	ldr	r2, [pc, #352]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f8:	4b53      	ldr	r3, [pc, #332]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a52      	ldr	r2, [pc, #328]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005704:	4b50      	ldr	r3, [pc, #320]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	494d      	ldr	r1, [pc, #308]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	4313      	orrs	r3, r2
 8005714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d044      	beq.n	80057ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d107      	bne.n	800573a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	4b47      	ldr	r3, [pc, #284]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d119      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e07f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d003      	beq.n	800574a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005746:	2b03      	cmp	r3, #3
 8005748:	d107      	bne.n	800575a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574a:	4b3f      	ldr	r3, [pc, #252]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e06f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575a:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e067      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800576a:	4b37      	ldr	r3, [pc, #220]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f023 0203 	bic.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4934      	ldr	r1, [pc, #208]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	4313      	orrs	r3, r2
 800577a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800577c:	f7fc f9ac 	bl	8001ad8 <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	e00a      	b.n	800579a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005784:	f7fc f9a8 	bl	8001ad8 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e04f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579a:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 020c 	and.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d1eb      	bne.n	8005784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ac:	4b25      	ldr	r3, [pc, #148]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d20c      	bcs.n	80057d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b22      	ldr	r3, [pc, #136]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	4b20      	ldr	r3, [pc, #128]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d001      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e032      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e0:	4b19      	ldr	r3, [pc, #100]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4916      	ldr	r1, [pc, #88]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fe:	4b12      	ldr	r3, [pc, #72]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	490e      	ldr	r1, [pc, #56]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005812:	f000 f821 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8005816:	4602      	mov	r2, r0
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	490a      	ldr	r1, [pc, #40]	; (800584c <HAL_RCC_ClockConfig+0x1c0>)
 8005824:	5ccb      	ldrb	r3, [r1, r3]
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800582c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fc f90c 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023c00 	.word	0x40023c00
 8005848:	40023800 	.word	0x40023800
 800584c:	08009e34 	.word	0x08009e34
 8005850:	20000004 	.word	0x20000004
 8005854:	20000008 	.word	0x20000008

08005858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800585c:	b094      	sub	sp, #80	; 0x50
 800585e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	647b      	str	r3, [r7, #68]	; 0x44
 8005864:	2300      	movs	r3, #0
 8005866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005868:	2300      	movs	r3, #0
 800586a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005870:	4b79      	ldr	r3, [pc, #484]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b08      	cmp	r3, #8
 800587a:	d00d      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x40>
 800587c:	2b08      	cmp	r3, #8
 800587e:	f200 80e1 	bhi.w	8005a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x34>
 8005886:	2b04      	cmp	r3, #4
 8005888:	d003      	beq.n	8005892 <HAL_RCC_GetSysClockFreq+0x3a>
 800588a:	e0db      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b73      	ldr	r3, [pc, #460]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005890:	e0db      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005892:	4b73      	ldr	r3, [pc, #460]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8005894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005896:	e0d8      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005898:	4b6f      	ldr	r3, [pc, #444]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058a2:	4b6d      	ldr	r3, [pc, #436]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d063      	beq.n	8005976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ae:	4b6a      	ldr	r3, [pc, #424]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	099b      	lsrs	r3, r3, #6
 80058b4:	2200      	movs	r2, #0
 80058b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c0:	633b      	str	r3, [r7, #48]	; 0x30
 80058c2:	2300      	movs	r3, #0
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
 80058c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058ca:	4622      	mov	r2, r4
 80058cc:	462b      	mov	r3, r5
 80058ce:	f04f 0000 	mov.w	r0, #0
 80058d2:	f04f 0100 	mov.w	r1, #0
 80058d6:	0159      	lsls	r1, r3, #5
 80058d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058dc:	0150      	lsls	r0, r2, #5
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4621      	mov	r1, r4
 80058e4:	1a51      	subs	r1, r2, r1
 80058e6:	6139      	str	r1, [r7, #16]
 80058e8:	4629      	mov	r1, r5
 80058ea:	eb63 0301 	sbc.w	r3, r3, r1
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058fc:	4659      	mov	r1, fp
 80058fe:	018b      	lsls	r3, r1, #6
 8005900:	4651      	mov	r1, sl
 8005902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005906:	4651      	mov	r1, sl
 8005908:	018a      	lsls	r2, r1, #6
 800590a:	4651      	mov	r1, sl
 800590c:	ebb2 0801 	subs.w	r8, r2, r1
 8005910:	4659      	mov	r1, fp
 8005912:	eb63 0901 	sbc.w	r9, r3, r1
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800592a:	4690      	mov	r8, r2
 800592c:	4699      	mov	r9, r3
 800592e:	4623      	mov	r3, r4
 8005930:	eb18 0303 	adds.w	r3, r8, r3
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	462b      	mov	r3, r5
 8005938:	eb49 0303 	adc.w	r3, r9, r3
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800594a:	4629      	mov	r1, r5
 800594c:	024b      	lsls	r3, r1, #9
 800594e:	4621      	mov	r1, r4
 8005950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005954:	4621      	mov	r1, r4
 8005956:	024a      	lsls	r2, r1, #9
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595e:	2200      	movs	r2, #0
 8005960:	62bb      	str	r3, [r7, #40]	; 0x28
 8005962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005968:	f7fb f81c 	bl	80009a4 <__aeabi_uldivmod>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4613      	mov	r3, r2
 8005972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005974:	e058      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005976:	4b38      	ldr	r3, [pc, #224]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	099b      	lsrs	r3, r3, #6
 800597c:	2200      	movs	r2, #0
 800597e:	4618      	mov	r0, r3
 8005980:	4611      	mov	r1, r2
 8005982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005986:	623b      	str	r3, [r7, #32]
 8005988:	2300      	movs	r3, #0
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	f04f 0000 	mov.w	r0, #0
 8005998:	f04f 0100 	mov.w	r1, #0
 800599c:	0159      	lsls	r1, r3, #5
 800599e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059a2:	0150      	lsls	r0, r2, #5
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4641      	mov	r1, r8
 80059aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80059ae:	4649      	mov	r1, r9
 80059b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059c8:	ebb2 040a 	subs.w	r4, r2, sl
 80059cc:	eb63 050b 	sbc.w	r5, r3, fp
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	00eb      	lsls	r3, r5, #3
 80059da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059de:	00e2      	lsls	r2, r4, #3
 80059e0:	4614      	mov	r4, r2
 80059e2:	461d      	mov	r5, r3
 80059e4:	4643      	mov	r3, r8
 80059e6:	18e3      	adds	r3, r4, r3
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	464b      	mov	r3, r9
 80059ec:	eb45 0303 	adc.w	r3, r5, r3
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059fe:	4629      	mov	r1, r5
 8005a00:	028b      	lsls	r3, r1, #10
 8005a02:	4621      	mov	r1, r4
 8005a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a08:	4621      	mov	r1, r4
 8005a0a:	028a      	lsls	r2, r1, #10
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a12:	2200      	movs	r2, #0
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	61fa      	str	r2, [r7, #28]
 8005a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a1c:	f7fa ffc2 	bl	80009a4 <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4613      	mov	r3, r2
 8005a26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a42:	e002      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3750      	adds	r7, #80	; 0x50
 8005a50:	46bd      	mov	sp, r7
 8005a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	00f42400 	.word	0x00f42400
 8005a60:	007a1200 	.word	0x007a1200

08005a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000004 	.word	0x20000004

08005a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a80:	f7ff fff0 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	0a9b      	lsrs	r3, r3, #10
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	08009e44 	.word	0x08009e44

08005aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005aa8:	f7ff ffdc 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	0b5b      	lsrs	r3, r3, #13
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	4903      	ldr	r1, [pc, #12]	; (8005ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aba:	5ccb      	ldrb	r3, [r1, r3]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	08009e44 	.word	0x08009e44

08005acc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d035      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005af4:	4b62      	ldr	r3, [pc, #392]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005afa:	f7fb ffed 	bl	8001ad8 <HAL_GetTick>
 8005afe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b02:	f7fb ffe9 	bl	8001ad8 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e0b0      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b14:	4b5b      	ldr	r3, [pc, #364]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f0      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	019a      	lsls	r2, r3, #6
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	071b      	lsls	r3, r3, #28
 8005b2c:	4955      	ldr	r1, [pc, #340]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b34:	4b52      	ldr	r3, [pc, #328]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b3a:	f7fb ffcd 	bl	8001ad8 <HAL_GetTick>
 8005b3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b40:	e008      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b42:	f7fb ffc9 	bl	8001ad8 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e090      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b54:	4b4b      	ldr	r3, [pc, #300]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8083 	beq.w	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	4b44      	ldr	r3, [pc, #272]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	4a43      	ldr	r2, [pc, #268]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b7e:	4b41      	ldr	r3, [pc, #260]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b8a:	4b3f      	ldr	r3, [pc, #252]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a3e      	ldr	r2, [pc, #248]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b96:	f7fb ff9f 	bl	8001ad8 <HAL_GetTick>
 8005b9a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b9e:	f7fb ff9b 	bl	8001ad8 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e062      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bb0:	4b35      	ldr	r3, [pc, #212]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bbc:	4b31      	ldr	r3, [pc, #196]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d02f      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d028      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bda:	4b2a      	ldr	r3, [pc, #168]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005be4:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bea:	4b28      	ldr	r3, [pc, #160]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005bf0:	4a24      	ldr	r2, [pc, #144]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bf6:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d114      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c02:	f7fb ff69 	bl	8001ad8 <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c08:	e00a      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c0a:	f7fb ff65 	bl	8001ad8 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e02a      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c20:	4b18      	ldr	r3, [pc, #96]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0ee      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c38:	d10d      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005c3a:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4e:	490d      	ldr	r1, [pc, #52]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	608b      	str	r3, [r1, #8]
 8005c54:	e005      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c5c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c60:	6093      	str	r3, [r2, #8]
 8005c62:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6e:	4905      	ldr	r1, [pc, #20]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	42470068 	.word	0x42470068
 8005c84:	40023800 	.word	0x40023800
 8005c88:	40007000 	.word	0x40007000
 8005c8c:	42470e40 	.word	0x42470e40

08005c90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d13e      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005cae:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d12f      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cc4:	4b1e      	ldr	r3, [pc, #120]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005cc6:	617b      	str	r3, [r7, #20]
          break;
 8005cc8:	e02f      	b.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005cca:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd6:	d108      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005cd8:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce0:	4a18      	ldr	r2, [pc, #96]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e007      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cf2:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d00:	099b      	lsrs	r3, r3, #6
 8005d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d14:	0f1b      	lsrs	r3, r3, #28
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	617b      	str	r3, [r7, #20]
          break;
 8005d22:	e002      	b.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]
          break;
 8005d28:	bf00      	nop
        }
      }
      break;
 8005d2a:	bf00      	nop
    }
  }
  return frequency;
 8005d2c:	697b      	ldr	r3, [r7, #20]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	00bb8000 	.word	0x00bb8000
 8005d44:	007a1200 	.word	0x007a1200
 8005d48:	00f42400 	.word	0x00f42400

08005d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e07b      	b.n	8005e56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d108      	bne.n	8005d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d6e:	d009      	beq.n	8005d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	61da      	str	r2, [r3, #28]
 8005d76:	e005      	b.n	8005d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fb fcfe 	bl	80017a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e08:	ea42 0103 	orr.w	r1, r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	0c1b      	lsrs	r3, r3, #16
 8005e22:	f003 0104 	and.w	r1, r3, #4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	f003 0210 	and.w	r2, r3, #16
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e03f      	b.n	8005ef0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fb fcd3 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2224      	movs	r2, #36	; 0x24
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f928 	bl	80060f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ec6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	4613      	mov	r3, r2
 8005f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d17c      	bne.n	8006012 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_UART_Transmit+0x2c>
 8005f1e:	88fb      	ldrh	r3, [r7, #6]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e075      	b.n	8006014 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Transmit+0x3e>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e06e      	b.n	8006014 <HAL_UART_Transmit+0x11c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2221      	movs	r2, #33	; 0x21
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f4c:	f7fb fdc4 	bl	8001ad8 <HAL_GetTick>
 8005f50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	88fa      	ldrh	r2, [r7, #6]
 8005f56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	d108      	bne.n	8005f7a <HAL_UART_Transmit+0x82>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	e003      	b.n	8005f82 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f8a:	e02a      	b.n	8005fe2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2200      	movs	r2, #0
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f840 	bl	800601c <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e036      	b.n	8006014 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	e007      	b.n	8005fd4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1cf      	bne.n	8005f8c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2140      	movs	r1, #64	; 0x40
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f810 	bl	800601c <UART_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e006      	b.n	8006014 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e000      	b.n	8006014 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006012:	2302      	movs	r3, #2
  }
}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b090      	sub	sp, #64	; 0x40
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602c:	e050      	b.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d04c      	beq.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <UART_WaitOnFlagUntilTimeout+0x30>
 800603c:	f7fb fd4c 	bl	8001ad8 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006048:	429a      	cmp	r2, r3
 800604a:	d241      	bcs.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	330c      	adds	r3, #12
 800606a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800606c:	637a      	str	r2, [r7, #52]	; 0x34
 800606e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e5      	bne.n	800604c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3314      	adds	r3, #20
 8006086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	613b      	str	r3, [r7, #16]
   return(result);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	63bb      	str	r3, [r7, #56]	; 0x38
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a0:	623a      	str	r2, [r7, #32]
 80060a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	69f9      	ldr	r1, [r7, #28]
 80060a6:	6a3a      	ldr	r2, [r7, #32]
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e5      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e00f      	b.n	80060f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	429a      	cmp	r2, r3
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d09f      	beq.n	800602e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3740      	adds	r7, #64	; 0x40
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060fc:	b0c0      	sub	sp, #256	; 0x100
 80060fe:	af00      	add	r7, sp, #0
 8006100:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	68d9      	ldr	r1, [r3, #12]
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	ea40 0301 	orr.w	r3, r0, r1
 8006120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	431a      	orrs	r2, r3
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	431a      	orrs	r2, r3
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006150:	f021 010c 	bic.w	r1, r1, #12
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800615e:	430b      	orrs	r3, r1
 8006160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006172:	6999      	ldr	r1, [r3, #24]
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	ea40 0301 	orr.w	r3, r0, r1
 800617e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b8f      	ldr	r3, [pc, #572]	; (80063c4 <UART_SetConfig+0x2cc>)
 8006188:	429a      	cmp	r2, r3
 800618a:	d005      	beq.n	8006198 <UART_SetConfig+0xa0>
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b8d      	ldr	r3, [pc, #564]	; (80063c8 <UART_SetConfig+0x2d0>)
 8006194:	429a      	cmp	r2, r3
 8006196:	d104      	bne.n	80061a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7ff fc84 	bl	8005aa4 <HAL_RCC_GetPCLK2Freq>
 800619c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061a0:	e003      	b.n	80061aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061a2:	f7ff fc6b 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80061a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b4:	f040 810c 	bne.w	80063d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061ca:	4622      	mov	r2, r4
 80061cc:	462b      	mov	r3, r5
 80061ce:	1891      	adds	r1, r2, r2
 80061d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80061d2:	415b      	adcs	r3, r3
 80061d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061da:	4621      	mov	r1, r4
 80061dc:	eb12 0801 	adds.w	r8, r2, r1
 80061e0:	4629      	mov	r1, r5
 80061e2:	eb43 0901 	adc.w	r9, r3, r1
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061fa:	4690      	mov	r8, r2
 80061fc:	4699      	mov	r9, r3
 80061fe:	4623      	mov	r3, r4
 8006200:	eb18 0303 	adds.w	r3, r8, r3
 8006204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006208:	462b      	mov	r3, r5
 800620a:	eb49 0303 	adc.w	r3, r9, r3
 800620e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800621e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006226:	460b      	mov	r3, r1
 8006228:	18db      	adds	r3, r3, r3
 800622a:	653b      	str	r3, [r7, #80]	; 0x50
 800622c:	4613      	mov	r3, r2
 800622e:	eb42 0303 	adc.w	r3, r2, r3
 8006232:	657b      	str	r3, [r7, #84]	; 0x54
 8006234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800623c:	f7fa fbb2 	bl	80009a4 <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4b61      	ldr	r3, [pc, #388]	; (80063cc <UART_SetConfig+0x2d4>)
 8006246:	fba3 2302 	umull	r2, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	011c      	lsls	r4, r3, #4
 800624e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006252:	2200      	movs	r2, #0
 8006254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800625c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	1891      	adds	r1, r2, r2
 8006266:	64b9      	str	r1, [r7, #72]	; 0x48
 8006268:	415b      	adcs	r3, r3
 800626a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800626c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006270:	4641      	mov	r1, r8
 8006272:	eb12 0a01 	adds.w	sl, r2, r1
 8006276:	4649      	mov	r1, r9
 8006278:	eb43 0b01 	adc.w	fp, r3, r1
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800628c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006290:	4692      	mov	sl, r2
 8006292:	469b      	mov	fp, r3
 8006294:	4643      	mov	r3, r8
 8006296:	eb1a 0303 	adds.w	r3, sl, r3
 800629a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800629e:	464b      	mov	r3, r9
 80062a0:	eb4b 0303 	adc.w	r3, fp, r3
 80062a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062bc:	460b      	mov	r3, r1
 80062be:	18db      	adds	r3, r3, r3
 80062c0:	643b      	str	r3, [r7, #64]	; 0x40
 80062c2:	4613      	mov	r3, r2
 80062c4:	eb42 0303 	adc.w	r3, r2, r3
 80062c8:	647b      	str	r3, [r7, #68]	; 0x44
 80062ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062d2:	f7fa fb67 	bl	80009a4 <__aeabi_uldivmod>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <UART_SetConfig+0x2d4>)
 80062de:	fba3 2301 	umull	r2, r3, r3, r1
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	2264      	movs	r2, #100	; 0x64
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	1acb      	subs	r3, r1, r3
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062f2:	4b36      	ldr	r3, [pc, #216]	; (80063cc <UART_SetConfig+0x2d4>)
 80062f4:	fba3 2302 	umull	r2, r3, r3, r2
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006300:	441c      	add	r4, r3
 8006302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800630c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	1891      	adds	r1, r2, r2
 800631a:	63b9      	str	r1, [r7, #56]	; 0x38
 800631c:	415b      	adcs	r3, r3
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006324:	4641      	mov	r1, r8
 8006326:	1851      	adds	r1, r2, r1
 8006328:	6339      	str	r1, [r7, #48]	; 0x30
 800632a:	4649      	mov	r1, r9
 800632c:	414b      	adcs	r3, r1
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800633c:	4659      	mov	r1, fp
 800633e:	00cb      	lsls	r3, r1, #3
 8006340:	4651      	mov	r1, sl
 8006342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006346:	4651      	mov	r1, sl
 8006348:	00ca      	lsls	r2, r1, #3
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	4603      	mov	r3, r0
 8006350:	4642      	mov	r2, r8
 8006352:	189b      	adds	r3, r3, r2
 8006354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006358:	464b      	mov	r3, r9
 800635a:	460a      	mov	r2, r1
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006370:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006378:	460b      	mov	r3, r1
 800637a:	18db      	adds	r3, r3, r3
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
 800637e:	4613      	mov	r3, r2
 8006380:	eb42 0303 	adc.w	r3, r2, r3
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800638a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800638e:	f7fa fb09 	bl	80009a4 <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <UART_SetConfig+0x2d4>)
 8006398:	fba3 1302 	umull	r1, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	2164      	movs	r1, #100	; 0x64
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a08      	ldr	r2, [pc, #32]	; (80063cc <UART_SetConfig+0x2d4>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	f003 0207 	and.w	r2, r3, #7
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4422      	add	r2, r4
 80063be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063c0:	e105      	b.n	80065ce <UART_SetConfig+0x4d6>
 80063c2:	bf00      	nop
 80063c4:	40011000 	.word	0x40011000
 80063c8:	40011400 	.word	0x40011400
 80063cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	1891      	adds	r1, r2, r2
 80063e8:	6239      	str	r1, [r7, #32]
 80063ea:	415b      	adcs	r3, r3
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
 80063ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063f2:	4641      	mov	r1, r8
 80063f4:	1854      	adds	r4, r2, r1
 80063f6:	4649      	mov	r1, r9
 80063f8:	eb43 0501 	adc.w	r5, r3, r1
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	00eb      	lsls	r3, r5, #3
 8006406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640a:	00e2      	lsls	r2, r4, #3
 800640c:	4614      	mov	r4, r2
 800640e:	461d      	mov	r5, r3
 8006410:	4643      	mov	r3, r8
 8006412:	18e3      	adds	r3, r4, r3
 8006414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006418:	464b      	mov	r3, r9
 800641a:	eb45 0303 	adc.w	r3, r5, r3
 800641e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800642e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800643e:	4629      	mov	r1, r5
 8006440:	008b      	lsls	r3, r1, #2
 8006442:	4621      	mov	r1, r4
 8006444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006448:	4621      	mov	r1, r4
 800644a:	008a      	lsls	r2, r1, #2
 800644c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006450:	f7fa faa8 	bl	80009a4 <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4b60      	ldr	r3, [pc, #384]	; (80065dc <UART_SetConfig+0x4e4>)
 800645a:	fba3 2302 	umull	r2, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	011c      	lsls	r4, r3, #4
 8006462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800646c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	1891      	adds	r1, r2, r2
 800647a:	61b9      	str	r1, [r7, #24]
 800647c:	415b      	adcs	r3, r3
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006484:	4641      	mov	r1, r8
 8006486:	1851      	adds	r1, r2, r1
 8006488:	6139      	str	r1, [r7, #16]
 800648a:	4649      	mov	r1, r9
 800648c:	414b      	adcs	r3, r1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800649c:	4659      	mov	r1, fp
 800649e:	00cb      	lsls	r3, r1, #3
 80064a0:	4651      	mov	r1, sl
 80064a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a6:	4651      	mov	r1, sl
 80064a8:	00ca      	lsls	r2, r1, #3
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	4642      	mov	r2, r8
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064b8:	464b      	mov	r3, r9
 80064ba:	460a      	mov	r2, r1
 80064bc:	eb42 0303 	adc.w	r3, r2, r3
 80064c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80064ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064dc:	4649      	mov	r1, r9
 80064de:	008b      	lsls	r3, r1, #2
 80064e0:	4641      	mov	r1, r8
 80064e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e6:	4641      	mov	r1, r8
 80064e8:	008a      	lsls	r2, r1, #2
 80064ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064ee:	f7fa fa59 	bl	80009a4 <__aeabi_uldivmod>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4b39      	ldr	r3, [pc, #228]	; (80065dc <UART_SetConfig+0x4e4>)
 80064f8:	fba3 1302 	umull	r1, r3, r3, r2
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	2164      	movs	r1, #100	; 0x64
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	3332      	adds	r3, #50	; 0x32
 800650a:	4a34      	ldr	r2, [pc, #208]	; (80065dc <UART_SetConfig+0x4e4>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006516:	441c      	add	r4, r3
 8006518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800651c:	2200      	movs	r2, #0
 800651e:	673b      	str	r3, [r7, #112]	; 0x70
 8006520:	677a      	str	r2, [r7, #116]	; 0x74
 8006522:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006526:	4642      	mov	r2, r8
 8006528:	464b      	mov	r3, r9
 800652a:	1891      	adds	r1, r2, r2
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	415b      	adcs	r3, r3
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006536:	4641      	mov	r1, r8
 8006538:	1851      	adds	r1, r2, r1
 800653a:	6039      	str	r1, [r7, #0]
 800653c:	4649      	mov	r1, r9
 800653e:	414b      	adcs	r3, r1
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800654e:	4659      	mov	r1, fp
 8006550:	00cb      	lsls	r3, r1, #3
 8006552:	4651      	mov	r1, sl
 8006554:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006558:	4651      	mov	r1, sl
 800655a:	00ca      	lsls	r2, r1, #3
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	4603      	mov	r3, r0
 8006562:	4642      	mov	r2, r8
 8006564:	189b      	adds	r3, r3, r2
 8006566:	66bb      	str	r3, [r7, #104]	; 0x68
 8006568:	464b      	mov	r3, r9
 800656a:	460a      	mov	r2, r1
 800656c:	eb42 0303 	adc.w	r3, r2, r3
 8006570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	663b      	str	r3, [r7, #96]	; 0x60
 800657c:	667a      	str	r2, [r7, #100]	; 0x64
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	f04f 0300 	mov.w	r3, #0
 8006586:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800658a:	4649      	mov	r1, r9
 800658c:	008b      	lsls	r3, r1, #2
 800658e:	4641      	mov	r1, r8
 8006590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006594:	4641      	mov	r1, r8
 8006596:	008a      	lsls	r2, r1, #2
 8006598:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800659c:	f7fa fa02 	bl	80009a4 <__aeabi_uldivmod>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <UART_SetConfig+0x4e4>)
 80065a6:	fba3 1302 	umull	r1, r3, r3, r2
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	2164      	movs	r1, #100	; 0x64
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	3332      	adds	r3, #50	; 0x32
 80065b8:	4a08      	ldr	r2, [pc, #32]	; (80065dc <UART_SetConfig+0x4e4>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	f003 020f 	and.w	r2, r3, #15
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4422      	add	r2, r4
 80065cc:	609a      	str	r2, [r3, #8]
}
 80065ce:	bf00      	nop
 80065d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065d4:	46bd      	mov	sp, r7
 80065d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065da:	bf00      	nop
 80065dc:	51eb851f 	.word	0x51eb851f

080065e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065e0:	b084      	sub	sp, #16
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	f107 001c 	add.w	r0, r7, #28
 80065ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d122      	bne.n	800663e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006622:	2b01      	cmp	r3, #1
 8006624:	d105      	bne.n	8006632 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f9c0 	bl	80069b8 <USB_CoreReset>
 8006638:	4603      	mov	r3, r0
 800663a:	73fb      	strb	r3, [r7, #15]
 800663c:	e01a      	b.n	8006674 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f9b4 	bl	80069b8 <USB_CoreReset>
 8006650:	4603      	mov	r3, r0
 8006652:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
 8006666:	e005      	b.n	8006674 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2b01      	cmp	r3, #1
 8006678:	d10b      	bne.n	8006692 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f043 0206 	orr.w	r2, r3, #6
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f043 0220 	orr.w	r2, r3, #32
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800669e:	b004      	add	sp, #16
 80066a0:	4770      	bx	lr

080066a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f043 0201 	orr.w	r2, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f023 0201 	bic.w	r2, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d115      	bne.n	8006734 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006714:	2001      	movs	r0, #1
 8006716:	f7fb f9eb 	bl	8001af0 <HAL_Delay>
      ms++;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f93a 	bl	800699a <USB_GetMode>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d01e      	beq.n	800676a <USB_SetCurrentMode+0x84>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b31      	cmp	r3, #49	; 0x31
 8006730:	d9f0      	bls.n	8006714 <USB_SetCurrentMode+0x2e>
 8006732:	e01a      	b.n	800676a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d115      	bne.n	8006766 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006746:	2001      	movs	r0, #1
 8006748:	f7fb f9d2 	bl	8001af0 <HAL_Delay>
      ms++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f921 	bl	800699a <USB_GetMode>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <USB_SetCurrentMode+0x84>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b31      	cmp	r3, #49	; 0x31
 8006762:	d9f0      	bls.n	8006746 <USB_SetCurrentMode+0x60>
 8006764:	e001      	b.n	800676a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e005      	b.n	8006776 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b32      	cmp	r3, #50	; 0x32
 800676e:	d101      	bne.n	8006774 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4a13      	ldr	r2, [pc, #76]	; (80067e4 <USB_FlushTxFifo+0x64>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d901      	bls.n	80067a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e01b      	b.n	80067d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	daf2      	bge.n	800678e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	019b      	lsls	r3, r3, #6
 80067b0:	f043 0220 	orr.w	r2, r3, #32
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3301      	adds	r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4a08      	ldr	r2, [pc, #32]	; (80067e4 <USB_FlushTxFifo+0x64>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e006      	b.n	80067d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d0f0      	beq.n	80067b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	00030d40 	.word	0x00030d40

080067e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3301      	adds	r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4a11      	ldr	r2, [pc, #68]	; (8006844 <USB_FlushRxFifo+0x5c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e018      	b.n	8006838 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	daf2      	bge.n	80067f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2210      	movs	r2, #16
 8006816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a08      	ldr	r2, [pc, #32]	; (8006844 <USB_FlushRxFifo+0x5c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d901      	bls.n	800682a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e006      	b.n	8006838 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b10      	cmp	r3, #16
 8006834:	d0f0      	beq.n	8006818 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	00030d40 	.word	0x00030d40

08006848 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006848:	b480      	push	{r7}
 800684a:	b089      	sub	sp, #36	; 0x24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4611      	mov	r1, r2
 8006854:	461a      	mov	r2, r3
 8006856:	460b      	mov	r3, r1
 8006858:	71fb      	strb	r3, [r7, #7]
 800685a:	4613      	mov	r3, r2
 800685c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006866:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800686a:	2b00      	cmp	r3, #0
 800686c:	d123      	bne.n	80068b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800686e:	88bb      	ldrh	r3, [r7, #4]
 8006870:	3303      	adds	r3, #3
 8006872:	089b      	lsrs	r3, r3, #2
 8006874:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	e018      	b.n	80068ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	031a      	lsls	r2, r3, #12
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4413      	add	r3, r2
 8006884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006888:	461a      	mov	r2, r3
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	3301      	adds	r3, #1
 8006894:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	3301      	adds	r3, #1
 800689a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	3301      	adds	r3, #1
 80068a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	3301      	adds	r3, #1
 80068a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	3301      	adds	r3, #1
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d3e2      	bcc.n	800687c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3724      	adds	r7, #36	; 0x24
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b08b      	sub	sp, #44	; 0x2c
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	089b      	lsrs	r3, r3, #2
 80068de:	b29b      	uxth	r3, r3
 80068e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	e014      	b.n	800691a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	3301      	adds	r3, #1
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	3301      	adds	r3, #1
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	3301      	adds	r3, #1
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	3301      	adds	r3, #1
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	3301      	adds	r3, #1
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	6a3a      	ldr	r2, [r7, #32]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	429a      	cmp	r2, r3
 8006920:	d3e6      	bcc.n	80068f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006922:	8bfb      	ldrh	r3, [r7, #30]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01e      	beq.n	8006966 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006932:	461a      	mov	r2, r3
 8006934:	f107 0310 	add.w	r3, r7, #16
 8006938:	6812      	ldr	r2, [r2, #0]
 800693a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	b2da      	uxtb	r2, r3
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	701a      	strb	r2, [r3, #0]
      i++;
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	3301      	adds	r3, #1
 8006952:	623b      	str	r3, [r7, #32]
      pDest++;
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	3301      	adds	r3, #1
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800695a:	8bfb      	ldrh	r3, [r7, #30]
 800695c:	3b01      	subs	r3, #1
 800695e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006960:	8bfb      	ldrh	r3, [r7, #30]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1ea      	bne.n	800693c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006968:	4618      	mov	r0, r3
 800696a:	372c      	adds	r7, #44	; 0x2c
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4013      	ands	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0301 	and.w	r3, r3, #1
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <USB_CoreReset+0x64>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d901      	bls.n	80069d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e01b      	b.n	8006a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	daf2      	bge.n	80069c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f043 0201 	orr.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3301      	adds	r3, #1
 80069f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <USB_CoreReset+0x64>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e006      	b.n	8006a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d0f0      	beq.n	80069ee <USB_CoreReset+0x36>

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	00030d40 	.word	0x00030d40

08006a20 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a20:	b084      	sub	sp, #16
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a40:	461a      	mov	r2, r3
 8006a42:	2300      	movs	r3, #0
 8006a44:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d018      	beq.n	8006aa8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d10a      	bne.n	8006a92 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a8a:	f043 0304 	orr.w	r3, r3, #4
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	e014      	b.n	8006abc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aa0:	f023 0304 	bic.w	r3, r3, #4
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	e009      	b.n	8006abc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ab6:	f023 0304 	bic.w	r3, r3, #4
 8006aba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006abc:	2110      	movs	r1, #16
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff fe5e 	bl	8006780 <USB_FlushTxFifo>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff fe8a 	bl	80067e8 <USB_FlushRxFifo>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]
 8006ae2:	e015      	b.n	8006b10 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af0:	461a      	mov	r2, r3
 8006af2:	f04f 33ff 	mov.w	r3, #4294967295
 8006af6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b04:	461a      	mov	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d3e5      	bcc.n	8006ae4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b38:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <USB_HostInit+0x16c>)
 8006b3e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <USB_HostInit+0x170>)
 8006b44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006b48:	e009      	b.n	8006b5e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2280      	movs	r2, #128	; 0x80
 8006b4e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a10      	ldr	r2, [pc, #64]	; (8006b94 <USB_HostInit+0x174>)
 8006b54:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a0f      	ldr	r2, [pc, #60]	; (8006b98 <USB_HostInit+0x178>)
 8006b5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f043 0210 	orr.w	r2, r3, #16
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699a      	ldr	r2, [r3, #24]
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <USB_HostInit+0x17c>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b88:	b004      	add	sp, #16
 8006b8a:	4770      	bx	lr
 8006b8c:	01000200 	.word	0x01000200
 8006b90:	00e00300 	.word	0x00e00300
 8006b94:	00600080 	.word	0x00600080
 8006b98:	004000e0 	.word	0x004000e0
 8006b9c:	a3200008 	.word	0xa3200008

08006ba0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d107      	bne.n	8006bf2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006be8:	461a      	mov	r2, r3
 8006bea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006bee:	6053      	str	r3, [r2, #4]
 8006bf0:	e009      	b.n	8006c06 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d106      	bne.n	8006c06 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c04:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c42:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c44:	2064      	movs	r0, #100	; 0x64
 8006c46:	f7fa ff53 	bl	8001af0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c56:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006c58:	200a      	movs	r0, #10
 8006c5a:	f7fa ff49 	bl	8001af0 <HAL_Delay>

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <USB_DriveVbus+0x44>
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d106      	bne.n	8006cac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ca6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006caa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb6:	d109      	bne.n	8006ccc <USB_DriveVbus+0x64>
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b085      	sub	sp, #20
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	0c5b      	lsrs	r3, r3, #17
 8006cf8:	f003 0303 	and.w	r3, r3, #3
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	b29b      	uxth	r3, r3
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	70fb      	strb	r3, [r7, #3]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70bb      	strb	r3, [r7, #2]
 8006d42:	4613      	mov	r3, r2
 8006d44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d87e      	bhi.n	8006e68 <USB_HC_Init+0x13c>
 8006d6a:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <USB_HC_Init+0x44>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006e2b 	.word	0x08006e2b
 8006d78:	08006d81 	.word	0x08006d81
 8006d7c:	08006ded 	.word	0x08006ded
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006d92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	da10      	bge.n	8006dbe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dba:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006dbc:	e057      	b.n	8006e6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d051      	beq.n	8006e6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	78fa      	ldrb	r2, [r7, #3]
 8006dda:	0151      	lsls	r1, r2, #5
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	440a      	add	r2, r1
 8006de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006de8:	60d3      	str	r3, [r2, #12]
      break;
 8006dea:	e040      	b.n	8006e6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f240 639d 	movw	r3, #1693	; 0x69d
 8006dfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da34      	bge.n	8006e72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e26:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e28:	e023      	b.n	8006e72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e36:	461a      	mov	r2, r3
 8006e38:	f240 2325 	movw	r3, #549	; 0x225
 8006e3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	da17      	bge.n	8006e76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006e64:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e66:	e006      	b.n	8006e76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	77fb      	strb	r3, [r7, #31]
      break;
 8006e6c:	e004      	b.n	8006e78 <USB_HC_Init+0x14c>
      break;
 8006e6e:	bf00      	nop
 8006e70:	e002      	b.n	8006e78 <USB_HC_Init+0x14c>
      break;
 8006e72:	bf00      	nop
 8006e74:	e000      	b.n	8006e78 <USB_HC_Init+0x14c>
      break;
 8006e76:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e92:	f043 0302 	orr.w	r3, r3, #2
 8006e96:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e9e:	699a      	ldr	r2, [r3, #24]
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	f003 030f 	and.w	r3, r3, #15
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eac:	6939      	ldr	r1, [r7, #16]
 8006eae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006ec2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	da03      	bge.n	8006ed2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ece:	61bb      	str	r3, [r7, #24]
 8006ed0:	e001      	b.n	8006ed6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff feff 	bl	8006cda <USB_GetHostSpeed>
 8006edc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d106      	bne.n	8006ef4 <USB_HC_Init+0x1c8>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d003      	beq.n	8006ef4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	e001      	b.n	8006ef8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ef8:	787b      	ldrb	r3, [r7, #1]
 8006efa:	059b      	lsls	r3, r3, #22
 8006efc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f00:	78bb      	ldrb	r3, [r7, #2]
 8006f02:	02db      	lsls	r3, r3, #11
 8006f04:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f08:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f0e:	049b      	lsls	r3, r3, #18
 8006f10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	0159      	lsls	r1, r3, #5
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	440b      	add	r3, r1
 8006f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f34:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006f36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d003      	beq.n	8006f46 <USB_HC_Init+0x21a>
 8006f3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d10f      	bne.n	8006f66 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	78fa      	ldrb	r2, [r7, #3]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f64:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f66:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3720      	adds	r7, #32
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08c      	sub	sp, #48	; 0x30
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f8c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d02d      	beq.n	8006ff6 <USB_HC_StartXfer+0x86>
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	791b      	ldrb	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d129      	bne.n	8006ff6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d117      	bne.n	8006fd8 <USB_HC_StartXfer+0x68>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	79db      	ldrb	r3, [r3, #7]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <USB_HC_StartXfer+0x48>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	79db      	ldrb	r3, [r3, #7]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d10f      	bne.n	8006fd8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	6a3a      	ldr	r2, [r7, #32]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10b      	bne.n	8006ff6 <USB_HC_StartXfer+0x86>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	795b      	ldrb	r3, [r3, #5]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d107      	bne.n	8006ff6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	4619      	mov	r1, r3
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fa0f 	bl	8007410 <USB_DoPing>
      return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e0f8      	b.n	80071e8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d018      	beq.n	8007030 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	8912      	ldrh	r2, [r2, #8]
 8007006:	4413      	add	r3, r2
 8007008:	3b01      	subs	r3, #1
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	8912      	ldrh	r2, [r2, #8]
 800700e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007012:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007014:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007016:	8b7b      	ldrh	r3, [r7, #26]
 8007018:	429a      	cmp	r2, r3
 800701a:	d90b      	bls.n	8007034 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800701c:	8b7b      	ldrh	r3, [r7, #26]
 800701e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007020:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	8912      	ldrh	r2, [r2, #8]
 8007026:	fb03 f202 	mul.w	r2, r3, r2
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	611a      	str	r2, [r3, #16]
 800702e:	e001      	b.n	8007034 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007030:	2301      	movs	r3, #1
 8007032:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	78db      	ldrb	r3, [r3, #3]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800703c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	8912      	ldrh	r2, [r2, #8]
 8007042:	fb03 f202 	mul.w	r2, r3, r2
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	611a      	str	r2, [r3, #16]
 800704a:	e003      	b.n	8007054 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800705c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800705e:	04d9      	lsls	r1, r3, #19
 8007060:	4b63      	ldr	r3, [pc, #396]	; (80071f0 <USB_HC_StartXfer+0x280>)
 8007062:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007064:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	7a9b      	ldrb	r3, [r3, #10]
 800706a:	075b      	lsls	r3, r3, #29
 800706c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007070:	69f9      	ldr	r1, [r7, #28]
 8007072:	0148      	lsls	r0, r1, #5
 8007074:	6a39      	ldr	r1, [r7, #32]
 8007076:	4401      	add	r1, r0
 8007078:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800707c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800707e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	68d9      	ldr	r1, [r3, #12]
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	4413      	add	r3, r2
 8007092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007096:	460a      	mov	r2, r1
 8007098:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bf0c      	ite	eq
 80070aa:	2301      	moveq	r3, #1
 80070ac:	2300      	movne	r3, #0
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	0151      	lsls	r1, r2, #5
 80070c4:	6a3a      	ldr	r2, [r7, #32]
 80070c6:	440a      	add	r2, r1
 80070c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	7e7b      	ldrb	r3, [r7, #25]
 80070e2:	075b      	lsls	r3, r3, #29
 80070e4:	69f9      	ldr	r1, [r7, #28]
 80070e6:	0148      	lsls	r0, r1, #5
 80070e8:	6a39      	ldr	r1, [r7, #32]
 80070ea:	4401      	add	r1, r0
 80070ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80070f0:	4313      	orrs	r3, r2
 80070f2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800710a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	78db      	ldrb	r3, [r3, #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	e003      	b.n	8007126 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007124:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800712c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	4413      	add	r3, r2
 8007136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713a:	461a      	mov	r2, r3
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e04e      	b.n	80071e8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	78db      	ldrb	r3, [r3, #3]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d149      	bne.n	80071e6 <USB_HC_StartXfer+0x276>
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d045      	beq.n	80071e6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	79db      	ldrb	r3, [r3, #7]
 800715e:	2b03      	cmp	r3, #3
 8007160:	d830      	bhi.n	80071c4 <USB_HC_StartXfer+0x254>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <USB_HC_StartXfer+0x1f8>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	08007179 	.word	0x08007179
 800716c:	0800719d 	.word	0x0800719d
 8007170:	08007179 	.word	0x08007179
 8007174:	0800719d 	.word	0x0800719d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	3303      	adds	r3, #3
 800717e:	089b      	lsrs	r3, r3, #2
 8007180:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007182:	8afa      	ldrh	r2, [r7, #22]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	b29b      	uxth	r3, r3
 800718a:	429a      	cmp	r2, r3
 800718c:	d91c      	bls.n	80071c8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f043 0220 	orr.w	r2, r3, #32
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	619a      	str	r2, [r3, #24]
        }
        break;
 800719a:	e015      	b.n	80071c8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	3303      	adds	r3, #3
 80071a2:	089b      	lsrs	r3, r3, #2
 80071a4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80071a6:	8afa      	ldrh	r2, [r7, #22]
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d90a      	bls.n	80071cc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80071c2:	e003      	b.n	80071cc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80071c4:	bf00      	nop
 80071c6:	e002      	b.n	80071ce <USB_HC_StartXfer+0x25e>
        break;
 80071c8:	bf00      	nop
 80071ca:	e000      	b.n	80071ce <USB_HC_StartXfer+0x25e>
        break;
 80071cc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	68d9      	ldr	r1, [r3, #12]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	785a      	ldrb	r2, [r3, #1]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2000      	movs	r0, #0
 80071de:	9000      	str	r0, [sp, #0]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff fb31 	bl	8006848 <USB_WritePacket>
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3728      	adds	r7, #40	; 0x28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	1ff80000 	.word	0x1ff80000

080071f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	b29b      	uxth	r3, r3
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007216:	b480      	push	{r7}
 8007218:	b089      	sub	sp, #36	; 0x24
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	460b      	mov	r3, r1
 8007220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	0c9b      	lsrs	r3, r3, #18
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	0fdb      	lsrs	r3, r3, #31
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b20      	cmp	r3, #32
 8007264:	d104      	bne.n	8007270 <USB_HC_Halt+0x5a>
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	e0c8      	b.n	8007402 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <USB_HC_Halt+0x66>
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b02      	cmp	r3, #2
 800727a:	d163      	bne.n	8007344 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	440a      	add	r2, r1
 8007292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800729a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f040 80ab 	bne.w	8007400 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d133      	bne.n	800731e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	69fa      	ldr	r2, [r7, #28]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072f4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007302:	d81d      	bhi.n	8007340 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800731a:	d0ec      	beq.n	80072f6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800731c:	e070      	b.n	8007400 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	440a      	add	r2, r1
 8007334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800733c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800733e:	e05f      	b.n	8007400 <USB_HC_Halt+0x1ea>
            break;
 8007340:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007342:	e05d      	b.n	8007400 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	4413      	add	r3, r2
 800734c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	440a      	add	r2, r1
 800735a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800735e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007362:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d133      	bne.n	80073dc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	4413      	add	r3, r2
 800737c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	440a      	add	r2, r1
 800738a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800738e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007392:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073b2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3301      	adds	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073c0:	d81d      	bhi.n	80073fe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d8:	d0ec      	beq.n	80073b4 <USB_HC_Halt+0x19e>
 80073da:	e011      	b.n	8007400 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	e000      	b.n	8007400 <USB_HC_Halt+0x1ea>
          break;
 80073fe:	bf00      	nop
    }
  }

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3724      	adds	r7, #36	; 0x24
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
	...

08007410 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007424:	2301      	movs	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	04da      	lsls	r2, r3, #19
 800742c:	4b15      	ldr	r3, [pc, #84]	; (8007484 <USB_DoPing+0x74>)
 800742e:	4013      	ands	r3, r2
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	440a      	add	r2, r1
 8007438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800743c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007440:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007458:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007460:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	4413      	add	r3, r2
 800746a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746e:	461a      	mov	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	1ff80000 	.word	0x1ff80000

08007488 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff f911 	bl	80066c4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074a2:	2110      	movs	r1, #16
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff f96b 	bl	8006780 <USB_FlushTxFifo>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff f997 	bl	80067e8 <USB_FlushRxFifo>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80074c4:	2300      	movs	r3, #0
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	e01f      	b.n	800750a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074fe:	461a      	mov	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	3301      	adds	r3, #1
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b0f      	cmp	r3, #15
 800750e:	d9dc      	bls.n	80074ca <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007510:	2300      	movs	r3, #0
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	e034      	b.n	8007580 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	4413      	add	r3, r2
 800751e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800752c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007534:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800753c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	4413      	add	r3, r2
 8007546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754a:	461a      	mov	r2, r3
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3301      	adds	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800755c:	d80c      	bhi.n	8007578 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	4413      	add	r3, r2
 8007566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007574:	d0ec      	beq.n	8007550 <USB_StopHost+0xc8>
 8007576:	e000      	b.n	800757a <USB_StopHost+0xf2>
        break;
 8007578:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	3301      	adds	r3, #1
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b0f      	cmp	r3, #15
 8007584:	d9c7      	bls.n	8007516 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800758c:	461a      	mov	r2, r3
 800758e:	f04f 33ff 	mov.w	r3, #4294967295
 8007592:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f04f 32ff 	mov.w	r2, #4294967295
 800759a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff f880 	bl	80066a2 <USB_EnableGlobalInt>

  return ret;
 80075a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b089      	sub	sp, #36	; 0x24
 80075b0:	af04      	add	r7, sp, #16
 80075b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80075b4:	2301      	movs	r3, #1
 80075b6:	2202      	movs	r2, #2
 80075b8:	2102      	movs	r1, #2
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fc66 	bl	8007e8c <USBH_FindInterface>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2bff      	cmp	r3, #255	; 0xff
 80075c8:	d002      	beq.n	80075d0 <USBH_CDC_InterfaceInit+0x24>
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d901      	bls.n	80075d4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80075d0:	2302      	movs	r3, #2
 80075d2:	e13d      	b.n	8007850 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fc3b 	bl	8007e54 <USBH_SelectInterface>
 80075de:	4603      	mov	r3, r0
 80075e0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80075e8:	2302      	movs	r3, #2
 80075ea:	e131      	b.n	8007850 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80075f2:	2050      	movs	r0, #80	; 0x50
 80075f4:	f002 fafa 	bl	8009bec <malloc>
 80075f8:	4603      	mov	r3, r0
 80075fa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800760c:	2302      	movs	r3, #2
 800760e:	e11f      	b.n	8007850 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007610:	2250      	movs	r2, #80	; 0x50
 8007612:	2100      	movs	r1, #0
 8007614:	68b8      	ldr	r0, [r7, #8]
 8007616:	f002 faf9 	bl	8009c0c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	211a      	movs	r1, #26
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	4413      	add	r3, r2
 8007626:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	b25b      	sxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	da15      	bge.n	800765e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	211a      	movs	r1, #26
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	4413      	add	r3, r2
 800763e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007642:	781a      	ldrb	r2, [r3, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	211a      	movs	r1, #26
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	4413      	add	r3, r2
 8007654:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007658:	881a      	ldrh	r2, [r3, #0]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 ff2c 	bl	80094c2 <USBH_AllocPipe>
 800766a:	4603      	mov	r3, r0
 800766c:	461a      	mov	r2, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	7819      	ldrb	r1, [r3, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	7858      	ldrb	r0, [r3, #1]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	8952      	ldrh	r2, [r2, #10]
 800768a:	9202      	str	r2, [sp, #8]
 800768c:	2203      	movs	r2, #3
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	4623      	mov	r3, r4
 8007694:	4602      	mov	r2, r0
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fee4 	bl	8009464 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2200      	movs	r2, #0
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f002 f9f3 	bl	8009a90 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80076aa:	2300      	movs	r3, #0
 80076ac:	2200      	movs	r2, #0
 80076ae:	210a      	movs	r1, #10
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fbeb 	bl	8007e8c <USBH_FindInterface>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	2bff      	cmp	r3, #255	; 0xff
 80076be:	d002      	beq.n	80076c6 <USBH_CDC_InterfaceInit+0x11a>
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d901      	bls.n	80076ca <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80076c6:	2302      	movs	r3, #2
 80076c8:	e0c2      	b.n	8007850 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	211a      	movs	r1, #26
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	4413      	add	r3, r2
 80076d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b25b      	sxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	da16      	bge.n	8007710 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	211a      	movs	r1, #26
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076f2:	781a      	ldrb	r2, [r3, #0]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	211a      	movs	r1, #26
 80076fe:	fb01 f303 	mul.w	r3, r1, r3
 8007702:	4413      	add	r3, r2
 8007704:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007708:	881a      	ldrh	r2, [r3, #0]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	835a      	strh	r2, [r3, #26]
 800770e:	e015      	b.n	800773c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	211a      	movs	r1, #26
 8007716:	fb01 f303 	mul.w	r3, r1, r3
 800771a:	4413      	add	r3, r2
 800771c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007720:	781a      	ldrb	r2, [r3, #0]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	211a      	movs	r1, #26
 800772c:	fb01 f303 	mul.w	r3, r1, r3
 8007730:	4413      	add	r3, r2
 8007732:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007736:	881a      	ldrh	r2, [r3, #0]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	211a      	movs	r1, #26
 8007742:	fb01 f303 	mul.w	r3, r1, r3
 8007746:	4413      	add	r3, r2
 8007748:	f203 3356 	addw	r3, r3, #854	; 0x356
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b25b      	sxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	da16      	bge.n	8007782 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	211a      	movs	r1, #26
 800775a:	fb01 f303 	mul.w	r3, r1, r3
 800775e:	4413      	add	r3, r2
 8007760:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	211a      	movs	r1, #26
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800777a:	881a      	ldrh	r2, [r3, #0]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	835a      	strh	r2, [r3, #26]
 8007780:	e015      	b.n	80077ae <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	211a      	movs	r1, #26
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	4413      	add	r3, r2
 800778e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007792:	781a      	ldrb	r2, [r3, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	211a      	movs	r1, #26
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077a8:	881a      	ldrh	r2, [r3, #0]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	7b9b      	ldrb	r3, [r3, #14]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f001 fe84 	bl	80094c2 <USBH_AllocPipe>
 80077ba:	4603      	mov	r3, r0
 80077bc:	461a      	mov	r2, r3
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	7bdb      	ldrb	r3, [r3, #15]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 fe7a 	bl	80094c2 <USBH_AllocPipe>
 80077ce:	4603      	mov	r3, r0
 80077d0:	461a      	mov	r2, r3
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	7b59      	ldrb	r1, [r3, #13]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	7b98      	ldrb	r0, [r3, #14]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	8b12      	ldrh	r2, [r2, #24]
 80077ee:	9202      	str	r2, [sp, #8]
 80077f0:	2202      	movs	r2, #2
 80077f2:	9201      	str	r2, [sp, #4]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4623      	mov	r3, r4
 80077f8:	4602      	mov	r2, r0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fe32 	bl	8009464 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	7b19      	ldrb	r1, [r3, #12]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	7bd8      	ldrb	r0, [r3, #15]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	8b52      	ldrh	r2, [r2, #26]
 8007818:	9202      	str	r2, [sp, #8]
 800781a:	2202      	movs	r2, #2
 800781c:	9201      	str	r2, [sp, #4]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4623      	mov	r3, r4
 8007822:	4602      	mov	r2, r0
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 fe1d 	bl	8009464 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	7b5b      	ldrb	r3, [r3, #13]
 8007836:	2200      	movs	r2, #0
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f002 f928 	bl	8009a90 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	7b1b      	ldrb	r3, [r3, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f002 f921 	bl	8009a90 <USBH_LL_SetToggle>

  return USBH_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	bd90      	pop	{r4, r7, pc}

08007858 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00e      	beq.n	8007890 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 fe12 	bl	80094a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 fe3d 	bl	8009504 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	7b1b      	ldrb	r3, [r3, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00e      	beq.n	80078b6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	7b1b      	ldrb	r3, [r3, #12]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fdff 	bl	80094a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	7b1b      	ldrb	r3, [r3, #12]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fe2a 	bl	8009504 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	7b5b      	ldrb	r3, [r3, #13]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00e      	beq.n	80078dc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	7b5b      	ldrb	r3, [r3, #13]
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fdec 	bl	80094a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	7b5b      	ldrb	r3, [r3, #13]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 fe17 	bl	8009504 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f002 f983 	bl	8009bfc <free>
    phost->pActiveClass->pData = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078fc:	2200      	movs	r2, #0
 80078fe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3340      	adds	r3, #64	; 0x40
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f8b1 	bl	8007a8a <GetLineCoding>
 8007928:	4603      	mov	r3, r0
 800792a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007938:	2102      	movs	r1, #2
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800793e:	7afb      	ldrb	r3, [r7, #11]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007968:	2b04      	cmp	r3, #4
 800796a:	d877      	bhi.n	8007a5c <USBH_CDC_Process+0x114>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <USBH_CDC_Process+0x2c>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	08007989 	.word	0x08007989
 8007978:	0800798f 	.word	0x0800798f
 800797c:	080079bf 	.word	0x080079bf
 8007980:	08007a33 	.word	0x08007a33
 8007984:	08007a41 	.word	0x08007a41
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]
      break;
 800798c:	e06d      	b.n	8007a6a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f897 	bl	8007ac8 <SetLineCoding>
 800799a:	4603      	mov	r3, r0
 800799c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d104      	bne.n	80079ae <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80079ac:	e058      	b.n	8007a60 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d055      	beq.n	8007a60 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2204      	movs	r2, #4
 80079b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80079bc:	e050      	b.n	8007a60 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	3340      	adds	r3, #64	; 0x40
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f860 	bl	8007a8a <GetLineCoding>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d126      	bne.n	8007a22 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e6:	791b      	ldrb	r3, [r3, #4]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d13b      	bne.n	8007a64 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d133      	bne.n	8007a64 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a06:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d12b      	bne.n	8007a64 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a14:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d124      	bne.n	8007a64 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f958 	bl	8007cd0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a20:	e020      	b.n	8007a64 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d01d      	beq.n	8007a64 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a30:	e018      	b.n	8007a64 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f867 	bl	8007b06 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f8da 	bl	8007bf2 <CDC_ProcessReception>
      break;
 8007a3e:	e014      	b.n	8007a6a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007a40:	2100      	movs	r1, #0
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 ffef 	bl	8008a26 <USBH_ClrFeature>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007a5a:	e005      	b.n	8007a68 <USBH_CDC_Process+0x120>

    default:
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e004      	b.n	8007a6a <USBH_CDC_Process+0x122>
      break;
 8007a60:	bf00      	nop
 8007a62:	e002      	b.n	8007a6a <USBH_CDC_Process+0x122>
      break;
 8007a64:	bf00      	nop
 8007a66:	e000      	b.n	8007a6a <USBH_CDC_Process+0x122>
      break;
 8007a68:	bf00      	nop

  }

  return status;
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	22a1      	movs	r2, #161	; 0xa1
 8007a98:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2221      	movs	r2, #33	; 0x21
 8007a9e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2207      	movs	r2, #7
 8007ab0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 fa81 	bl	8008fc0 <USBH_CtlReq>
 8007abe:	4603      	mov	r3, r0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2221      	movs	r2, #33	; 0x21
 8007ad6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2220      	movs	r2, #32
 8007adc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2207      	movs	r2, #7
 8007aee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2207      	movs	r2, #7
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fa62 	bl	8008fc0 <USBH_CtlReq>
 8007afc:	4603      	mov	r3, r0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b086      	sub	sp, #24
 8007b0a:	af02      	add	r7, sp, #8
 8007b0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d002      	beq.n	8007b2c <CDC_ProcessTransmission+0x26>
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d023      	beq.n	8007b72 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007b2a:	e05e      	b.n	8007bea <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	8b12      	ldrh	r2, [r2, #24]
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d90b      	bls.n	8007b50 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	69d9      	ldr	r1, [r3, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8b1a      	ldrh	r2, [r3, #24]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	7b5b      	ldrb	r3, [r3, #13]
 8007b44:	2001      	movs	r0, #1
 8007b46:	9000      	str	r0, [sp, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 fc48 	bl	80093de <USBH_BulkSendData>
 8007b4e:	e00b      	b.n	8007b68 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	7b5b      	ldrb	r3, [r3, #13]
 8007b5e:	2001      	movs	r0, #1
 8007b60:	9000      	str	r0, [sp, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 fc3b 	bl	80093de <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b70:	e03b      	b.n	8007bea <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	7b5b      	ldrb	r3, [r3, #13]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 ff5f 	bl	8009a3c <USBH_LL_GetURBState>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d128      	bne.n	8007bda <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	8b12      	ldrh	r2, [r2, #24]
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d90e      	bls.n	8007bb2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	8b12      	ldrh	r2, [r2, #24]
 8007b9c:	1a9a      	subs	r2, r3, r2
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	8b12      	ldrh	r2, [r2, #24]
 8007baa:	441a      	add	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	61da      	str	r2, [r3, #28]
 8007bb0:	e002      	b.n	8007bb8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d004      	beq.n	8007bca <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007bc8:	e00e      	b.n	8007be8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f868 	bl	8007ca8 <USBH_CDC_TransmitCallback>
      break;
 8007bd8:	e006      	b.n	8007be8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d103      	bne.n	8007be8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007be8:	bf00      	nop
  }
}
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b086      	sub	sp, #24
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d002      	beq.n	8007c18 <CDC_ProcessReception+0x26>
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d00e      	beq.n	8007c34 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007c16:	e043      	b.n	8007ca0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	6a19      	ldr	r1, [r3, #32]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	8b5a      	ldrh	r2, [r3, #26]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	7b1b      	ldrb	r3, [r3, #12]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 fbff 	bl	8009428 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c32:	e035      	b.n	8007ca0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	7b1b      	ldrb	r3, [r3, #12]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fefe 	bl	8009a3c <USBH_LL_GetURBState>
 8007c40:	4603      	mov	r3, r0
 8007c42:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007c44:	7cfb      	ldrb	r3, [r7, #19]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d129      	bne.n	8007c9e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	7b1b      	ldrb	r3, [r3, #12]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 fe61 	bl	8009918 <USBH_LL_GetLastXferSize>
 8007c56:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d016      	beq.n	8007c90 <CDC_ProcessReception+0x9e>
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	8b5b      	ldrh	r3, [r3, #26]
 8007c66:	461a      	mov	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d910      	bls.n	8007c90 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	1ad2      	subs	r2, r2, r3
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	6a1a      	ldr	r2, [r3, #32]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	441a      	add	r2, r3
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2203      	movs	r2, #3
 8007c8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c8e:	e006      	b.n	8007c9e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f80f 	bl	8007cbc <USBH_CDC_ReceiveCallback>
      break;
 8007c9e:	bf00      	nop
  }
}
 8007ca0:	bf00      	nop
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e029      	b.n	8007d50 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	79fa      	ldrb	r2, [r7, #7]
 8007d00:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f81f 	bl	8007d58 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f001 fd31 	bl	80097b0 <USBH_LL_Init>

  return USBH_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e009      	b.n	8007d7e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	33e0      	adds	r3, #224	; 0xe0
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	2200      	movs	r2, #0
 8007d76:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b0f      	cmp	r3, #15
 8007d82:	d9f2      	bls.n	8007d6a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d84:	2300      	movs	r3, #0
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	e009      	b.n	8007d9e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da4:	d3f1      	bcc.n	8007d8a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2240      	movs	r2, #64	; 0x40
 8007dca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d016      	beq.n	8007e42 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10e      	bne.n	8007e3c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e24:	1c59      	adds	r1, r3, #1
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	33de      	adds	r3, #222	; 0xde
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
 8007e3a:	e004      	b.n	8007e46 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	73fb      	strb	r3, [r7, #15]
 8007e40:	e001      	b.n	8007e46 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007e42:	2302      	movs	r3, #2
 8007e44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007e6a:	78fa      	ldrb	r2, [r7, #3]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d204      	bcs.n	8007e7a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007e78:	e001      	b.n	8007e7e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	70fb      	strb	r3, [r7, #3]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	70bb      	strb	r3, [r7, #2]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007eb4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007eb6:	e025      	b.n	8007f04 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	221a      	movs	r2, #26
 8007ebc:	fb02 f303 	mul.w	r3, r2, r3
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	795b      	ldrb	r3, [r3, #5]
 8007ece:	78fa      	ldrb	r2, [r7, #3]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d002      	beq.n	8007eda <USBH_FindInterface+0x4e>
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	2bff      	cmp	r3, #255	; 0xff
 8007ed8:	d111      	bne.n	8007efe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ede:	78ba      	ldrb	r2, [r7, #2]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d002      	beq.n	8007eea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ee4:	78bb      	ldrb	r3, [r7, #2]
 8007ee6:	2bff      	cmp	r3, #255	; 0xff
 8007ee8:	d109      	bne.n	8007efe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007eee:	787a      	ldrb	r2, [r7, #1]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d002      	beq.n	8007efa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ef4:	787b      	ldrb	r3, [r7, #1]
 8007ef6:	2bff      	cmp	r3, #255	; 0xff
 8007ef8:	d101      	bne.n	8007efe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	e006      	b.n	8007f0c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	3301      	adds	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d9d6      	bls.n	8007eb8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007f0a:	23ff      	movs	r3, #255	; 0xff
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	371c      	adds	r7, #28
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fc81 	bl	8009828 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007f26:	2101      	movs	r1, #1
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fd9a 	bl	8009a62 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af04      	add	r7, sp, #16
 8007f3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007f40:	2302      	movs	r3, #2
 8007f42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d102      	bne.n	8007f5a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2203      	movs	r2, #3
 8007f58:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b0b      	cmp	r3, #11
 8007f62:	f200 81be 	bhi.w	80082e2 <USBH_Process+0x3aa>
 8007f66:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <USBH_Process+0x34>)
 8007f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6c:	08007f9d 	.word	0x08007f9d
 8007f70:	08007fcf 	.word	0x08007fcf
 8007f74:	08008037 	.word	0x08008037
 8007f78:	0800827d 	.word	0x0800827d
 8007f7c:	080082e3 	.word	0x080082e3
 8007f80:	080080db 	.word	0x080080db
 8007f84:	08008223 	.word	0x08008223
 8007f88:	08008111 	.word	0x08008111
 8007f8c:	08008131 	.word	0x08008131
 8007f90:	08008151 	.word	0x08008151
 8007f94:	08008195 	.word	0x08008195
 8007f98:	08008265 	.word	0x08008265
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 819e 	beq.w	80082e6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007fb0:	20c8      	movs	r0, #200	; 0xc8
 8007fb2:	f001 fd9d 	bl	8009af0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fc93 	bl	80098e2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007fcc:	e18b      	b.n	80082e6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d107      	bne.n	8007fe8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fe6:	e18d      	b.n	8008304 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ff2:	d914      	bls.n	800801e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800800a:	2b03      	cmp	r3, #3
 800800c:	d903      	bls.n	8008016 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	220d      	movs	r2, #13
 8008012:	701a      	strb	r2, [r3, #0]
      break;
 8008014:	e176      	b.n	8008304 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	701a      	strb	r2, [r3, #0]
      break;
 800801c:	e172      	b.n	8008304 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008024:	f103 020a 	add.w	r2, r3, #10
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800802e:	200a      	movs	r0, #10
 8008030:	f001 fd5e 	bl	8009af0 <USBH_Delay>
      break;
 8008034:	e166      	b.n	8008304 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008046:	2104      	movs	r1, #4
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800804c:	2064      	movs	r0, #100	; 0x64
 800804e:	f001 fd4f 	bl	8009af0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fc1e 	bl	8009894 <USBH_LL_GetSpeed>
 8008058:	4603      	mov	r3, r0
 800805a:	461a      	mov	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2205      	movs	r2, #5
 8008066:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008068:	2100      	movs	r1, #0
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 fa29 	bl	80094c2 <USBH_AllocPipe>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008078:	2180      	movs	r1, #128	; 0x80
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fa21 	bl	80094c2 <USBH_AllocPipe>
 8008080:	4603      	mov	r3, r0
 8008082:	461a      	mov	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	7919      	ldrb	r1, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800809c:	b292      	uxth	r2, r2
 800809e:	9202      	str	r2, [sp, #8]
 80080a0:	2200      	movs	r2, #0
 80080a2:	9201      	str	r2, [sp, #4]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	4603      	mov	r3, r0
 80080a8:	2280      	movs	r2, #128	; 0x80
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 f9da 	bl	8009464 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	7959      	ldrb	r1, [r3, #5]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080c4:	b292      	uxth	r2, r2
 80080c6:	9202      	str	r2, [sp, #8]
 80080c8:	2200      	movs	r2, #0
 80080ca:	9201      	str	r2, [sp, #4]
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	4603      	mov	r3, r0
 80080d0:	2200      	movs	r2, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 f9c6 	bl	8009464 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080d8:	e114      	b.n	8008304 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f918 	bl	8008310 <USBH_HandleEnum>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f040 80fe 	bne.w	80082ea <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d103      	bne.n	8008108 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2208      	movs	r2, #8
 8008104:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008106:	e0f0      	b.n	80082ea <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2207      	movs	r2, #7
 800810c:	701a      	strb	r2, [r3, #0]
      break;
 800810e:	e0ec      	b.n	80082ea <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 80e9 	beq.w	80082ee <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008122:	2101      	movs	r1, #1
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2208      	movs	r2, #8
 800812c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800812e:	e0de      	b.n	80082ee <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008136:	b29b      	uxth	r3, r3
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fc2c 	bl	8008998 <USBH_SetCfg>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	f040 80d5 	bne.w	80082f2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2209      	movs	r2, #9
 800814c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800814e:	e0d0      	b.n	80082f2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d016      	beq.n	800818c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800815e:	2101      	movs	r1, #1
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fc3c 	bl	80089de <USBH_SetFeature>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d103      	bne.n	800817a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	220a      	movs	r2, #10
 8008176:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008178:	e0bd      	b.n	80082f6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b03      	cmp	r3, #3
 8008180:	f040 80b9 	bne.w	80082f6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	220a      	movs	r2, #10
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e0b4      	b.n	80082f6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	220a      	movs	r2, #10
 8008190:	701a      	strb	r2, [r3, #0]
      break;
 8008192:	e0b0      	b.n	80082f6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80ad 	beq.w	80082fa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]
 80081ac:	e016      	b.n	80081dc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80081ae:	7bfa      	ldrb	r2, [r7, #15]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	32de      	adds	r2, #222	; 0xde
 80081b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b8:	791a      	ldrb	r2, [r3, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d108      	bne.n	80081d6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80081c4:	7bfa      	ldrb	r2, [r7, #15]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	32de      	adds	r2, #222	; 0xde
 80081ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80081d4:	e005      	b.n	80081e2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	3301      	adds	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0e5      	beq.n	80081ae <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d016      	beq.n	800821a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2206      	movs	r2, #6
 8008202:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800820a:	2103      	movs	r1, #3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008210:	e073      	b.n	80082fa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	220d      	movs	r2, #13
 8008216:	701a      	strb	r2, [r3, #0]
      break;
 8008218:	e06f      	b.n	80082fa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	220d      	movs	r2, #13
 800821e:	701a      	strb	r2, [r3, #0]
      break;
 8008220:	e06b      	b.n	80082fa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d017      	beq.n	800825c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
 8008238:	4603      	mov	r3, r0
 800823a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d103      	bne.n	800824c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	220b      	movs	r2, #11
 8008248:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800824a:	e058      	b.n	80082fe <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d154      	bne.n	80082fe <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	220d      	movs	r2, #13
 8008258:	701a      	strb	r2, [r3, #0]
      break;
 800825a:	e050      	b.n	80082fe <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	220d      	movs	r2, #13
 8008260:	701a      	strb	r2, [r3, #0]
      break;
 8008262:	e04c      	b.n	80082fe <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d049      	beq.n	8008302 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
      }
      break;
 800827a:	e042      	b.n	8008302 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff fd67 	bl	8007d58 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d009      	beq.n	80082a8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082b8:	2105      	movs	r1, #5
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d107      	bne.n	80082da <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fe20 	bl	8007f18 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082d8:	e014      	b.n	8008304 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f001 faa4 	bl	8009828 <USBH_LL_Start>
      break;
 80082e0:	e010      	b.n	8008304 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80082e2:	bf00      	nop
 80082e4:	e00e      	b.n	8008304 <USBH_Process+0x3cc>
      break;
 80082e6:	bf00      	nop
 80082e8:	e00c      	b.n	8008304 <USBH_Process+0x3cc>
      break;
 80082ea:	bf00      	nop
 80082ec:	e00a      	b.n	8008304 <USBH_Process+0x3cc>
    break;
 80082ee:	bf00      	nop
 80082f0:	e008      	b.n	8008304 <USBH_Process+0x3cc>
      break;
 80082f2:	bf00      	nop
 80082f4:	e006      	b.n	8008304 <USBH_Process+0x3cc>
      break;
 80082f6:	bf00      	nop
 80082f8:	e004      	b.n	8008304 <USBH_Process+0x3cc>
      break;
 80082fa:	bf00      	nop
 80082fc:	e002      	b.n	8008304 <USBH_Process+0x3cc>
      break;
 80082fe:	bf00      	nop
 8008300:	e000      	b.n	8008304 <USBH_Process+0x3cc>
      break;
 8008302:	bf00      	nop
  }
  return USBH_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop

08008310 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af04      	add	r7, sp, #16
 8008316:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800831c:	2301      	movs	r3, #1
 800831e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b07      	cmp	r3, #7
 8008326:	f200 81c1 	bhi.w	80086ac <USBH_HandleEnum+0x39c>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <USBH_HandleEnum+0x20>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	08008351 	.word	0x08008351
 8008334:	0800840f 	.word	0x0800840f
 8008338:	08008479 	.word	0x08008479
 800833c:	08008507 	.word	0x08008507
 8008340:	08008571 	.word	0x08008571
 8008344:	080085e1 	.word	0x080085e1
 8008348:	08008627 	.word	0x08008627
 800834c:	0800866d 	.word	0x0800866d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008350:	2108      	movs	r1, #8
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa50 	bl	80087f8 <USBH_Get_DevDesc>
 8008358:	4603      	mov	r3, r0
 800835a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d130      	bne.n	80083c4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	7919      	ldrb	r1, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008386:	b292      	uxth	r2, r2
 8008388:	9202      	str	r2, [sp, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	9201      	str	r2, [sp, #4]
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	4603      	mov	r3, r0
 8008392:	2280      	movs	r2, #128	; 0x80
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 f865 	bl	8009464 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7959      	ldrb	r1, [r3, #5]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083ae:	b292      	uxth	r2, r2
 80083b0:	9202      	str	r2, [sp, #8]
 80083b2:	2200      	movs	r2, #0
 80083b4:	9201      	str	r2, [sp, #4]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	4603      	mov	r3, r0
 80083ba:	2200      	movs	r2, #0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 f851 	bl	8009464 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80083c2:	e175      	b.n	80086b0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	f040 8172 	bne.w	80086b0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083d2:	3301      	adds	r3, #1
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d903      	bls.n	80083ee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	220d      	movs	r2, #13
 80083ea:	701a      	strb	r2, [r3, #0]
      break;
 80083ec:	e160      	b.n	80086b0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	795b      	ldrb	r3, [r3, #5]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 f885 	bl	8009504 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	791b      	ldrb	r3, [r3, #4]
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 f87f 	bl	8009504 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
      break;
 800840c:	e150      	b.n	80086b0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800840e:	2112      	movs	r1, #18
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f9f1 	bl	80087f8 <USBH_Get_DevDesc>
 8008416:	4603      	mov	r3, r0
 8008418:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008426:	e145      	b.n	80086b4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2b03      	cmp	r3, #3
 800842c:	f040 8142 	bne.w	80086b4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008436:	3301      	adds	r3, #1
 8008438:	b2da      	uxtb	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008446:	2b03      	cmp	r3, #3
 8008448:	d903      	bls.n	8008452 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	220d      	movs	r2, #13
 800844e:	701a      	strb	r2, [r3, #0]
      break;
 8008450:	e130      	b.n	80086b4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	795b      	ldrb	r3, [r3, #5]
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 f853 	bl	8009504 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	791b      	ldrb	r3, [r3, #4]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 f84d 	bl	8009504 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
      break;
 8008476:	e11d      	b.n	80086b4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008478:	2101      	movs	r1, #1
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa68 	bl	8008950 <USBH_SetAddress>
 8008480:	4603      	mov	r3, r0
 8008482:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d132      	bne.n	80084f0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800848a:	2002      	movs	r0, #2
 800848c:	f001 fb30 	bl	8009af0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2203      	movs	r2, #3
 800849c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	7919      	ldrb	r1, [r3, #4]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80084b2:	b292      	uxth	r2, r2
 80084b4:	9202      	str	r2, [sp, #8]
 80084b6:	2200      	movs	r2, #0
 80084b8:	9201      	str	r2, [sp, #4]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4603      	mov	r3, r0
 80084be:	2280      	movs	r2, #128	; 0x80
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 ffcf 	bl	8009464 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7959      	ldrb	r1, [r3, #5]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084da:	b292      	uxth	r2, r2
 80084dc:	9202      	str	r2, [sp, #8]
 80084de:	2200      	movs	r2, #0
 80084e0:	9201      	str	r2, [sp, #4]
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	4603      	mov	r3, r0
 80084e6:	2200      	movs	r2, #0
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 ffbb 	bl	8009464 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80084ee:	e0e3      	b.n	80086b8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	f040 80e0 	bne.w	80086b8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	220d      	movs	r2, #13
 80084fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	705a      	strb	r2, [r3, #1]
      break;
 8008504:	e0d8      	b.n	80086b8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008506:	2109      	movs	r1, #9
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f99d 	bl	8008848 <USBH_Get_CfgDesc>
 800850e:	4603      	mov	r3, r0
 8008510:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2204      	movs	r2, #4
 800851c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800851e:	e0cd      	b.n	80086bc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	2b03      	cmp	r3, #3
 8008524:	f040 80ca 	bne.w	80086bc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800852e:	3301      	adds	r3, #1
 8008530:	b2da      	uxtb	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800853e:	2b03      	cmp	r3, #3
 8008540:	d903      	bls.n	800854a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	220d      	movs	r2, #13
 8008546:	701a      	strb	r2, [r3, #0]
      break;
 8008548:	e0b8      	b.n	80086bc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	795b      	ldrb	r3, [r3, #5]
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 ffd7 	bl	8009504 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	791b      	ldrb	r3, [r3, #4]
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 ffd1 	bl	8009504 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	701a      	strb	r2, [r3, #0]
      break;
 800856e:	e0a5      	b.n	80086bc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f965 	bl	8008848 <USBH_Get_CfgDesc>
 800857e:	4603      	mov	r3, r0
 8008580:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d103      	bne.n	8008590 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2205      	movs	r2, #5
 800858c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800858e:	e097      	b.n	80086c0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	2b03      	cmp	r3, #3
 8008594:	f040 8094 	bne.w	80086c0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800859e:	3301      	adds	r3, #1
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d903      	bls.n	80085ba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	220d      	movs	r2, #13
 80085b6:	701a      	strb	r2, [r3, #0]
      break;
 80085b8:	e082      	b.n	80086c0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	795b      	ldrb	r3, [r3, #5]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 ff9f 	bl	8009504 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	791b      	ldrb	r3, [r3, #4]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 ff99 	bl	8009504 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
      break;
 80085de:	e06f      	b.n	80086c0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d019      	beq.n	800861e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80085f6:	23ff      	movs	r3, #255	; 0xff
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f949 	bl	8008890 <USBH_Get_StringDesc>
 80085fe:	4603      	mov	r3, r0
 8008600:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2206      	movs	r2, #6
 800860c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800860e:	e059      	b.n	80086c4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	2b03      	cmp	r3, #3
 8008614:	d156      	bne.n	80086c4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2206      	movs	r2, #6
 800861a:	705a      	strb	r2, [r3, #1]
      break;
 800861c:	e052      	b.n	80086c4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2206      	movs	r2, #6
 8008622:	705a      	strb	r2, [r3, #1]
      break;
 8008624:	e04e      	b.n	80086c4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800862c:	2b00      	cmp	r3, #0
 800862e:	d019      	beq.n	8008664 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800863c:	23ff      	movs	r3, #255	; 0xff
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f926 	bl	8008890 <USBH_Get_StringDesc>
 8008644:	4603      	mov	r3, r0
 8008646:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d103      	bne.n	8008656 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2207      	movs	r2, #7
 8008652:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008654:	e038      	b.n	80086c8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d135      	bne.n	80086c8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2207      	movs	r2, #7
 8008660:	705a      	strb	r2, [r3, #1]
      break;
 8008662:	e031      	b.n	80086c8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2207      	movs	r2, #7
 8008668:	705a      	strb	r2, [r3, #1]
      break;
 800866a:	e02d      	b.n	80086c8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008672:	2b00      	cmp	r3, #0
 8008674:	d017      	beq.n	80086a6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008682:	23ff      	movs	r3, #255	; 0xff
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f903 	bl	8008890 <USBH_Get_StringDesc>
 800868a:	4603      	mov	r3, r0
 800868c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d102      	bne.n	800869a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008698:	e018      	b.n	80086cc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b03      	cmp	r3, #3
 800869e:	d115      	bne.n	80086cc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73fb      	strb	r3, [r7, #15]
      break;
 80086a4:	e012      	b.n	80086cc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]
      break;
 80086aa:	e00f      	b.n	80086cc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80086ac:	bf00      	nop
 80086ae:	e00e      	b.n	80086ce <USBH_HandleEnum+0x3be>
      break;
 80086b0:	bf00      	nop
 80086b2:	e00c      	b.n	80086ce <USBH_HandleEnum+0x3be>
      break;
 80086b4:	bf00      	nop
 80086b6:	e00a      	b.n	80086ce <USBH_HandleEnum+0x3be>
      break;
 80086b8:	bf00      	nop
 80086ba:	e008      	b.n	80086ce <USBH_HandleEnum+0x3be>
      break;
 80086bc:	bf00      	nop
 80086be:	e006      	b.n	80086ce <USBH_HandleEnum+0x3be>
      break;
 80086c0:	bf00      	nop
 80086c2:	e004      	b.n	80086ce <USBH_HandleEnum+0x3be>
      break;
 80086c4:	bf00      	nop
 80086c6:	e002      	b.n	80086ce <USBH_HandleEnum+0x3be>
      break;
 80086c8:	bf00      	nop
 80086ca:	e000      	b.n	80086ce <USBH_HandleEnum+0x3be>
      break;
 80086cc:	bf00      	nop
  }
  return Status;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f804 	bl	800871a <USBH_HandleSof>
}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b0b      	cmp	r3, #11
 800872a:	d10a      	bne.n	8008742 <USBH_HandleSof+0x28>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	4798      	blx	r3
  }
}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800875a:	bf00      	nop
}
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008776:	bf00      	nop
}
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 f844 	bl	800985e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	791b      	ldrb	r3, [r3, #4]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fe91 	bl	8009504 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	795b      	ldrb	r3, [r3, #5]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fe8b 	bl	8009504 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800880a:	78fb      	ldrb	r3, [r7, #3]
 800880c:	b29b      	uxth	r3, r3
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4613      	mov	r3, r2
 8008812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008816:	2100      	movs	r1, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f864 	bl	80088e6 <USBH_GetDescriptor>
 800881e:	4603      	mov	r3, r0
 8008820:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	b292      	uxth	r2, r2
 8008838:	4619      	mov	r1, r3
 800883a:	f000 f918 	bl	8008a6e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af02      	add	r7, sp, #8
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	331c      	adds	r3, #28
 8008858:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800885a:	887b      	ldrh	r3, [r7, #2]
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008864:	2100      	movs	r1, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f83d 	bl	80088e6 <USBH_GetDescriptor>
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d107      	bne.n	8008886 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008876:	887b      	ldrh	r3, [r7, #2]
 8008878:	461a      	mov	r2, r3
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f987 	bl	8008b90 <USBH_ParseCfgDesc>
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008886:	7bfb      	ldrb	r3, [r7, #15]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af02      	add	r7, sp, #8
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	607a      	str	r2, [r7, #4]
 800889a:	461a      	mov	r2, r3
 800889c:	460b      	mov	r3, r1
 800889e:	72fb      	strb	r3, [r7, #11]
 80088a0:	4613      	mov	r3, r2
 80088a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80088ac:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80088b4:	893b      	ldrh	r3, [r7, #8]
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	460b      	mov	r3, r1
 80088ba:	2100      	movs	r1, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f812 	bl	80088e6 <USBH_GetDescriptor>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d107      	bne.n	80088dc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088d2:	893a      	ldrh	r2, [r7, #8]
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fb24 	bl	8008f24 <USBH_ParseStringDesc>
  }

  return status;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	607b      	str	r3, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	72fb      	strb	r3, [r7, #11]
 80088f4:	4613      	mov	r3, r2
 80088f6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	789b      	ldrb	r3, [r3, #2]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d11c      	bne.n	800893a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008906:	b2da      	uxtb	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2206      	movs	r2, #6
 8008910:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	893a      	ldrh	r2, [r7, #8]
 8008916:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008918:	893b      	ldrh	r3, [r7, #8]
 800891a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800891e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008922:	d104      	bne.n	800892e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f240 4209 	movw	r2, #1033	; 0x409
 800892a:	829a      	strh	r2, [r3, #20]
 800892c:	e002      	b.n	8008934 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8b3a      	ldrh	r2, [r7, #24]
 8008938:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800893a:	8b3b      	ldrh	r3, [r7, #24]
 800893c:	461a      	mov	r2, r3
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 fb3d 	bl	8008fc0 <USBH_CtlReq>
 8008946:	4603      	mov	r3, r0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	789b      	ldrb	r3, [r3, #2]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d10f      	bne.n	8008984 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2205      	movs	r2, #5
 800896e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	b29a      	uxth	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008984:	2200      	movs	r2, #0
 8008986:	2100      	movs	r1, #0
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fb19 	bl	8008fc0 <USBH_CtlReq>
 800898e:	4603      	mov	r3, r0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	789b      	ldrb	r3, [r3, #2]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d10e      	bne.n	80089ca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2209      	movs	r2, #9
 80089b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	887a      	ldrh	r2, [r7, #2]
 80089bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 faf6 	bl	8008fc0 <USBH_CtlReq>
 80089d4:	4603      	mov	r3, r0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b082      	sub	sp, #8
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	789b      	ldrb	r3, [r3, #2]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d10f      	bne.n	8008a12 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2203      	movs	r2, #3
 80089fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a12:	2200      	movs	r2, #0
 8008a14:	2100      	movs	r1, #0
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fad2 	bl	8008fc0 <USBH_CtlReq>
 8008a1c:	4603      	mov	r3, r0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	789b      	ldrb	r3, [r3, #2]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d10f      	bne.n	8008a5a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 faae 	bl	8008fc0 <USBH_CtlReq>
 8008a64:	4603      	mov	r3, r0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b085      	sub	sp, #20
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	785a      	ldrb	r2, [r3, #1]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	3302      	adds	r3, #2
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3303      	adds	r3, #3
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	791a      	ldrb	r2, [r3, #4]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	795a      	ldrb	r2, [r3, #5]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	799a      	ldrb	r2, [r3, #6]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	79da      	ldrb	r2, [r3, #7]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	79db      	ldrb	r3, [r3, #7]
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	dc11      	bgt.n	8008af4 <USBH_ParseDevDesc+0x86>
 8008ad0:	2b08      	cmp	r3, #8
 8008ad2:	db16      	blt.n	8008b02 <USBH_ParseDevDesc+0x94>
 8008ad4:	3b08      	subs	r3, #8
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8008adc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bf14      	ite	ne
 8008ae8:	2301      	movne	r3, #1
 8008aea:	2300      	moveq	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d102      	bne.n	8008af8 <USBH_ParseDevDesc+0x8a>
 8008af2:	e006      	b.n	8008b02 <USBH_ParseDevDesc+0x94>
 8008af4:	2b40      	cmp	r3, #64	; 0x40
 8008af6:	d104      	bne.n	8008b02 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	79da      	ldrb	r2, [r3, #7]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	71da      	strb	r2, [r3, #7]
      break;
 8008b00:	e003      	b.n	8008b0a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2240      	movs	r2, #64	; 0x40
 8008b06:	71da      	strb	r2, [r3, #7]
      break;
 8008b08:	bf00      	nop
  }

  if (length > 8U)
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d939      	bls.n	8008b84 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	3308      	adds	r3, #8
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	3309      	adds	r3, #9
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	021b      	lsls	r3, r3, #8
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	4313      	orrs	r3, r2
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	330a      	adds	r3, #10
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	330b      	adds	r3, #11
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	4313      	orrs	r3, r2
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	330c      	adds	r3, #12
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	330d      	adds	r3, #13
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	7b9a      	ldrb	r2, [r3, #14]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	7bda      	ldrb	r2, [r3, #15]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	7c1a      	ldrb	r2, [r3, #16]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	7c5a      	ldrb	r2, [r3, #17]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	745a      	strb	r2, [r3, #17]
  }
}
 8008b84:	bf00      	nop
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08c      	sub	sp, #48	; 0x30
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ba4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	781a      	ldrb	r2, [r3, #0]
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	785a      	ldrb	r2, [r3, #1]
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	3303      	adds	r3, #3
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bec:	bf28      	it	cs
 8008bee:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	791a      	ldrb	r2, [r3, #4]
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	795a      	ldrb	r2, [r3, #5]
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	799a      	ldrb	r2, [r3, #6]
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	79da      	ldrb	r2, [r3, #7]
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	7a1a      	ldrb	r2, [r3, #8]
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d002      	beq.n	8008c2e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	2209      	movs	r2, #9
 8008c2c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	2b09      	cmp	r3, #9
 8008c32:	f240 809d 	bls.w	8008d70 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c36:	2309      	movs	r3, #9
 8008c38:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c3e:	e081      	b.n	8008d44 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c40:	f107 0316 	add.w	r3, r7, #22
 8008c44:	4619      	mov	r1, r3
 8008c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c48:	f000 f99f 	bl	8008f8a <USBH_GetNextDesc>
 8008c4c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d176      	bne.n	8008d44 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	2b09      	cmp	r3, #9
 8008c5c:	d002      	beq.n	8008c64 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	2209      	movs	r2, #9
 8008c62:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c68:	221a      	movs	r2, #26
 8008c6a:	fb02 f303 	mul.w	r3, r2, r3
 8008c6e:	3308      	adds	r3, #8
 8008c70:	6a3a      	ldr	r2, [r7, #32]
 8008c72:	4413      	add	r3, r2
 8008c74:	3302      	adds	r3, #2
 8008c76:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c7a:	69f8      	ldr	r0, [r7, #28]
 8008c7c:	f000 f87e 	bl	8008d7c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c8a:	e043      	b.n	8008d14 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c8c:	f107 0316 	add.w	r3, r7, #22
 8008c90:	4619      	mov	r1, r3
 8008c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c94:	f000 f979 	bl	8008f8a <USBH_GetNextDesc>
 8008c98:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	785b      	ldrb	r3, [r3, #1]
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d138      	bne.n	8008d14 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	795b      	ldrb	r3, [r3, #5]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d10f      	bne.n	8008cca <USBH_ParseCfgDesc+0x13a>
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	799b      	ldrb	r3, [r3, #6]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d10b      	bne.n	8008cca <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	79db      	ldrb	r3, [r3, #7]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10f      	bne.n	8008cda <USBH_ParseCfgDesc+0x14a>
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b09      	cmp	r3, #9
 8008cc0:	d00b      	beq.n	8008cda <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	2209      	movs	r2, #9
 8008cc6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cc8:	e007      	b.n	8008cda <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b07      	cmp	r3, #7
 8008cd0:	d004      	beq.n	8008cdc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	701a      	strb	r2, [r3, #0]
 8008cd8:	e000      	b.n	8008cdc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cda:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ce0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008ce4:	3201      	adds	r2, #1
 8008ce6:	00d2      	lsls	r2, r2, #3
 8008ce8:	211a      	movs	r1, #26
 8008cea:	fb01 f303 	mul.w	r3, r1, r3
 8008cee:	4413      	add	r3, r2
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	6a3a      	ldr	r2, [r7, #32]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cfc:	69b9      	ldr	r1, [r7, #24]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 f86b 	bl	8008dda <USBH_ParseEPDesc>
 8008d04:	4603      	mov	r3, r0
 8008d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008d0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d0e:	3301      	adds	r3, #1
 8008d10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	791b      	ldrb	r3, [r3, #4]
 8008d18:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d204      	bcs.n	8008d2a <USBH_ParseCfgDesc+0x19a>
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	885a      	ldrh	r2, [r3, #2]
 8008d24:	8afb      	ldrh	r3, [r7, #22]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d8b0      	bhi.n	8008c8c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	791b      	ldrb	r3, [r3, #4]
 8008d2e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d201      	bcs.n	8008d3a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e01c      	b.n	8008d74 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d3e:	3301      	adds	r3, #1
 8008d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d805      	bhi.n	8008d58 <USBH_ParseCfgDesc+0x1c8>
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	885a      	ldrh	r2, [r3, #2]
 8008d50:	8afb      	ldrh	r3, [r7, #22]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	f63f af74 	bhi.w	8008c40 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	791b      	ldrb	r3, [r3, #4]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	bf28      	it	cs
 8008d60:	2302      	movcs	r3, #2
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d201      	bcs.n	8008d70 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e001      	b.n	8008d74 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008d70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3730      	adds	r7, #48	; 0x30
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781a      	ldrb	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	785a      	ldrb	r2, [r3, #1]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	789a      	ldrb	r2, [r3, #2]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	78da      	ldrb	r2, [r3, #3]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	791a      	ldrb	r2, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	795a      	ldrb	r2, [r3, #5]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	799a      	ldrb	r2, [r3, #6]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	79da      	ldrb	r2, [r3, #7]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	7a1a      	ldrb	r2, [r3, #8]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	721a      	strb	r2, [r3, #8]
}
 8008dce:	bf00      	nop
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b087      	sub	sp, #28
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	781a      	ldrb	r2, [r3, #0]
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	785a      	ldrb	r2, [r3, #1]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	789a      	ldrb	r2, [r3, #2]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	78da      	ldrb	r2, [r3, #3]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3305      	adds	r3, #5
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	799a      	ldrb	r2, [r3, #6]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	889b      	ldrh	r3, [r3, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d102      	bne.n	8008e3c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008e36:	2303      	movs	r3, #3
 8008e38:	75fb      	strb	r3, [r7, #23]
 8008e3a:	e033      	b.n	8008ea4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	889b      	ldrh	r3, [r3, #4]
 8008e40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e44:	f023 0307 	bic.w	r3, r3, #7
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	889b      	ldrh	r3, [r3, #4]
 8008e52:	b21a      	sxth	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3304      	adds	r3, #4
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b299      	uxth	r1, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3305      	adds	r3, #5
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d110      	bne.n	8008e96 <USBH_ParseEPDesc+0xbc>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	b299      	uxth	r1, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3305      	adds	r3, #5
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	b21b      	sxth	r3, r3
 8008e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e92:	b21b      	sxth	r3, r3
 8008e94:	e001      	b.n	8008e9a <USBH_ParseEPDesc+0xc0>
 8008e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b21b      	sxth	r3, r3
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d116      	bne.n	8008edc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	78db      	ldrb	r3, [r3, #3]
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d005      	beq.n	8008ec6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	78db      	ldrb	r3, [r3, #3]
 8008ebe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d127      	bne.n	8008f16 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	799b      	ldrb	r3, [r3, #6]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <USBH_ParseEPDesc+0xfc>
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	799b      	ldrb	r3, [r3, #6]
 8008ed2:	2b10      	cmp	r3, #16
 8008ed4:	d91f      	bls.n	8008f16 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	75fb      	strb	r3, [r7, #23]
 8008eda:	e01c      	b.n	8008f16 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	78db      	ldrb	r3, [r3, #3]
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d10a      	bne.n	8008efe <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	799b      	ldrb	r3, [r3, #6]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <USBH_ParseEPDesc+0x11e>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	799b      	ldrb	r3, [r3, #6]
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d90e      	bls.n	8008f16 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	75fb      	strb	r3, [r7, #23]
 8008efc:	e00b      	b.n	8008f16 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	78db      	ldrb	r3, [r3, #3]
 8008f02:	f003 0303 	and.w	r3, r3, #3
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d105      	bne.n	8008f16 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	799b      	ldrb	r3, [r3, #6]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008f12:	2303      	movs	r3, #3
 8008f14:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	371c      	adds	r7, #28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3301      	adds	r3, #1
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d120      	bne.n	8008f7e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	1e9a      	subs	r2, r3, #2
 8008f42:	88fb      	ldrh	r3, [r7, #6]
 8008f44:	4293      	cmp	r3, r2
 8008f46:	bf28      	it	cs
 8008f48:	4613      	movcs	r3, r2
 8008f4a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3302      	adds	r3, #2
 8008f50:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008f52:	2300      	movs	r3, #0
 8008f54:	82fb      	strh	r3, [r7, #22]
 8008f56:	e00b      	b.n	8008f70 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008f58:	8afb      	ldrh	r3, [r7, #22]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	781a      	ldrb	r2, [r3, #0]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	3301      	adds	r3, #1
 8008f68:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f6a:	8afb      	ldrh	r3, [r7, #22]
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	82fb      	strh	r3, [r7, #22]
 8008f70:	8afa      	ldrh	r2, [r7, #22]
 8008f72:	8abb      	ldrh	r3, [r7, #20]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d3ef      	bcc.n	8008f58 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	701a      	strb	r2, [r3, #0]
  }
}
 8008f7e:	bf00      	nop
 8008f80:	371c      	adds	r7, #28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	881a      	ldrh	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4413      	add	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	789b      	ldrb	r3, [r3, #2]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d002      	beq.n	8008fe0 <USBH_CtlReq+0x20>
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d00f      	beq.n	8008ffe <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008fde:	e027      	b.n	8009030 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	88fa      	ldrh	r2, [r7, #6]
 8008fea:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffc:	e018      	b.n	8009030 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f000 f81c 	bl	800903c <USBH_HandleControl>
 8009004:	4603      	mov	r3, r0
 8009006:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <USBH_CtlReq+0x54>
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d106      	bne.n	8009022 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	761a      	strb	r2, [r3, #24]
      break;
 8009020:	e005      	b.n	800902e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d102      	bne.n	800902e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	709a      	strb	r2, [r3, #2]
      break;
 800902e:	bf00      	nop
  }
  return status;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af02      	add	r7, sp, #8
 8009042:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009044:	2301      	movs	r3, #1
 8009046:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009048:	2300      	movs	r3, #0
 800904a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7e1b      	ldrb	r3, [r3, #24]
 8009050:	3b01      	subs	r3, #1
 8009052:	2b0a      	cmp	r3, #10
 8009054:	f200 8156 	bhi.w	8009304 <USBH_HandleControl+0x2c8>
 8009058:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <USBH_HandleControl+0x24>)
 800905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905e:	bf00      	nop
 8009060:	0800908d 	.word	0x0800908d
 8009064:	080090a7 	.word	0x080090a7
 8009068:	08009111 	.word	0x08009111
 800906c:	08009137 	.word	0x08009137
 8009070:	0800916f 	.word	0x0800916f
 8009074:	08009199 	.word	0x08009199
 8009078:	080091eb 	.word	0x080091eb
 800907c:	0800920d 	.word	0x0800920d
 8009080:	08009249 	.word	0x08009249
 8009084:	0800926f 	.word	0x0800926f
 8009088:	080092ad 	.word	0x080092ad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f103 0110 	add.w	r1, r3, #16
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	795b      	ldrb	r3, [r3, #5]
 8009096:	461a      	mov	r2, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f943 	bl	8009324 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2202      	movs	r2, #2
 80090a2:	761a      	strb	r2, [r3, #24]
      break;
 80090a4:	e139      	b.n	800931a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	795b      	ldrb	r3, [r3, #5]
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fcc5 	bl	8009a3c <USBH_LL_GetURBState>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d11e      	bne.n	80090fa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	7c1b      	ldrb	r3, [r3, #16]
 80090c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	8adb      	ldrh	r3, [r3, #22]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00a      	beq.n	80090e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80090ce:	7b7b      	ldrb	r3, [r7, #13]
 80090d0:	2b80      	cmp	r3, #128	; 0x80
 80090d2:	d103      	bne.n	80090dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2203      	movs	r2, #3
 80090d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090da:	e115      	b.n	8009308 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2205      	movs	r2, #5
 80090e0:	761a      	strb	r2, [r3, #24]
      break;
 80090e2:	e111      	b.n	8009308 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80090e4:	7b7b      	ldrb	r3, [r7, #13]
 80090e6:	2b80      	cmp	r3, #128	; 0x80
 80090e8:	d103      	bne.n	80090f2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2209      	movs	r2, #9
 80090ee:	761a      	strb	r2, [r3, #24]
      break;
 80090f0:	e10a      	b.n	8009308 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2207      	movs	r2, #7
 80090f6:	761a      	strb	r2, [r3, #24]
      break;
 80090f8:	e106      	b.n	8009308 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	2b04      	cmp	r3, #4
 80090fe:	d003      	beq.n	8009108 <USBH_HandleControl+0xcc>
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	2b02      	cmp	r3, #2
 8009104:	f040 8100 	bne.w	8009308 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	220b      	movs	r2, #11
 800910c:	761a      	strb	r2, [r3, #24]
      break;
 800910e:	e0fb      	b.n	8009308 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009116:	b29a      	uxth	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6899      	ldr	r1, [r3, #8]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	899a      	ldrh	r2, [r3, #12]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	791b      	ldrb	r3, [r3, #4]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f93a 	bl	80093a2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2204      	movs	r2, #4
 8009132:	761a      	strb	r2, [r3, #24]
      break;
 8009134:	e0f1      	b.n	800931a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	791b      	ldrb	r3, [r3, #4]
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fc7d 	bl	8009a3c <USBH_LL_GetURBState>
 8009142:	4603      	mov	r3, r0
 8009144:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d102      	bne.n	8009152 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2209      	movs	r2, #9
 8009150:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b05      	cmp	r3, #5
 8009156:	d102      	bne.n	800915e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009158:	2303      	movs	r3, #3
 800915a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800915c:	e0d6      	b.n	800930c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b04      	cmp	r3, #4
 8009162:	f040 80d3 	bne.w	800930c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	220b      	movs	r2, #11
 800916a:	761a      	strb	r2, [r3, #24]
      break;
 800916c:	e0ce      	b.n	800930c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6899      	ldr	r1, [r3, #8]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	899a      	ldrh	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	795b      	ldrb	r3, [r3, #5]
 800917a:	2001      	movs	r0, #1
 800917c:	9000      	str	r0, [sp, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f8ea 	bl	8009358 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800918a:	b29a      	uxth	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2206      	movs	r2, #6
 8009194:	761a      	strb	r2, [r3, #24]
      break;
 8009196:	e0c0      	b.n	800931a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	795b      	ldrb	r3, [r3, #5]
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fc4c 	bl	8009a3c <USBH_LL_GetURBState>
 80091a4:	4603      	mov	r3, r0
 80091a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d103      	bne.n	80091b6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2207      	movs	r2, #7
 80091b2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091b4:	e0ac      	b.n	8009310 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	2b05      	cmp	r3, #5
 80091ba:	d105      	bne.n	80091c8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	220c      	movs	r2, #12
 80091c0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80091c2:	2303      	movs	r3, #3
 80091c4:	73fb      	strb	r3, [r7, #15]
      break;
 80091c6:	e0a3      	b.n	8009310 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d103      	bne.n	80091d6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2205      	movs	r2, #5
 80091d2:	761a      	strb	r2, [r3, #24]
      break;
 80091d4:	e09c      	b.n	8009310 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	2b04      	cmp	r3, #4
 80091da:	f040 8099 	bne.w	8009310 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	220b      	movs	r2, #11
 80091e2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80091e4:	2302      	movs	r3, #2
 80091e6:	73fb      	strb	r3, [r7, #15]
      break;
 80091e8:	e092      	b.n	8009310 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	791b      	ldrb	r3, [r3, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	2100      	movs	r1, #0
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f8d5 	bl	80093a2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091fe:	b29a      	uxth	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2208      	movs	r2, #8
 8009208:	761a      	strb	r2, [r3, #24]

      break;
 800920a:	e086      	b.n	800931a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	791b      	ldrb	r3, [r3, #4]
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fc12 	bl	8009a3c <USBH_LL_GetURBState>
 8009218:	4603      	mov	r3, r0
 800921a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d105      	bne.n	800922e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	220d      	movs	r2, #13
 8009226:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800922c:	e072      	b.n	8009314 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b04      	cmp	r3, #4
 8009232:	d103      	bne.n	800923c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	220b      	movs	r2, #11
 8009238:	761a      	strb	r2, [r3, #24]
      break;
 800923a:	e06b      	b.n	8009314 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800923c:	7bbb      	ldrb	r3, [r7, #14]
 800923e:	2b05      	cmp	r3, #5
 8009240:	d168      	bne.n	8009314 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009242:	2303      	movs	r3, #3
 8009244:	73fb      	strb	r3, [r7, #15]
      break;
 8009246:	e065      	b.n	8009314 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	795b      	ldrb	r3, [r3, #5]
 800924c:	2201      	movs	r2, #1
 800924e:	9200      	str	r2, [sp, #0]
 8009250:	2200      	movs	r2, #0
 8009252:	2100      	movs	r1, #0
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f87f 	bl	8009358 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009260:	b29a      	uxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	220a      	movs	r2, #10
 800926a:	761a      	strb	r2, [r3, #24]
      break;
 800926c:	e055      	b.n	800931a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	795b      	ldrb	r3, [r3, #5]
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fbe1 	bl	8009a3c <USBH_LL_GetURBState>
 800927a:	4603      	mov	r3, r0
 800927c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d105      	bne.n	8009290 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	220d      	movs	r2, #13
 800928c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800928e:	e043      	b.n	8009318 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d103      	bne.n	800929e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2209      	movs	r2, #9
 800929a:	761a      	strb	r2, [r3, #24]
      break;
 800929c:	e03c      	b.n	8009318 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800929e:	7bbb      	ldrb	r3, [r7, #14]
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d139      	bne.n	8009318 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	220b      	movs	r2, #11
 80092a8:	761a      	strb	r2, [r3, #24]
      break;
 80092aa:	e035      	b.n	8009318 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	7e5b      	ldrb	r3, [r3, #25]
 80092b0:	3301      	adds	r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	765a      	strb	r2, [r3, #25]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	7e5b      	ldrb	r3, [r3, #25]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d806      	bhi.n	80092ce <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80092cc:	e025      	b.n	800931a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092d4:	2106      	movs	r1, #6
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	795b      	ldrb	r3, [r3, #5]
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f90c 	bl	8009504 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	791b      	ldrb	r3, [r3, #4]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f906 	bl	8009504 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80092fe:	2302      	movs	r3, #2
 8009300:	73fb      	strb	r3, [r7, #15]
      break;
 8009302:	e00a      	b.n	800931a <USBH_HandleControl+0x2de>

    default:
      break;
 8009304:	bf00      	nop
 8009306:	e008      	b.n	800931a <USBH_HandleControl+0x2de>
      break;
 8009308:	bf00      	nop
 800930a:	e006      	b.n	800931a <USBH_HandleControl+0x2de>
      break;
 800930c:	bf00      	nop
 800930e:	e004      	b.n	800931a <USBH_HandleControl+0x2de>
      break;
 8009310:	bf00      	nop
 8009312:	e002      	b.n	800931a <USBH_HandleControl+0x2de>
      break;
 8009314:	bf00      	nop
 8009316:	e000      	b.n	800931a <USBH_HandleControl+0x2de>
      break;
 8009318:	bf00      	nop
  }

  return status;
 800931a:	7bfb      	ldrb	r3, [r7, #15]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af04      	add	r7, sp, #16
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	4613      	mov	r3, r2
 8009330:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009332:	79f9      	ldrb	r1, [r7, #7]
 8009334:	2300      	movs	r3, #0
 8009336:	9303      	str	r3, [sp, #12]
 8009338:	2308      	movs	r3, #8
 800933a:	9302      	str	r3, [sp, #8]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	2300      	movs	r3, #0
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	2300      	movs	r3, #0
 8009346:	2200      	movs	r2, #0
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 fb46 	bl	80099da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af04      	add	r7, sp, #16
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4611      	mov	r1, r2
 8009364:	461a      	mov	r2, r3
 8009366:	460b      	mov	r3, r1
 8009368:	80fb      	strh	r3, [r7, #6]
 800936a:	4613      	mov	r3, r2
 800936c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800937c:	7979      	ldrb	r1, [r7, #5]
 800937e:	7e3b      	ldrb	r3, [r7, #24]
 8009380:	9303      	str	r3, [sp, #12]
 8009382:	88fb      	ldrh	r3, [r7, #6]
 8009384:	9302      	str	r3, [sp, #8]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	2301      	movs	r3, #1
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	2300      	movs	r3, #0
 8009390:	2200      	movs	r2, #0
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 fb21 	bl	80099da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b088      	sub	sp, #32
 80093a6:	af04      	add	r7, sp, #16
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	4611      	mov	r1, r2
 80093ae:	461a      	mov	r2, r3
 80093b0:	460b      	mov	r3, r1
 80093b2:	80fb      	strh	r3, [r7, #6]
 80093b4:	4613      	mov	r3, r2
 80093b6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093b8:	7979      	ldrb	r1, [r7, #5]
 80093ba:	2300      	movs	r3, #0
 80093bc:	9303      	str	r3, [sp, #12]
 80093be:	88fb      	ldrh	r3, [r7, #6]
 80093c0:	9302      	str	r3, [sp, #8]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	2301      	movs	r3, #1
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	2300      	movs	r3, #0
 80093cc:	2201      	movs	r2, #1
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 fb03 	bl	80099da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80093d4:	2300      	movs	r3, #0

}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b088      	sub	sp, #32
 80093e2:	af04      	add	r7, sp, #16
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	4611      	mov	r1, r2
 80093ea:	461a      	mov	r2, r3
 80093ec:	460b      	mov	r3, r1
 80093ee:	80fb      	strh	r3, [r7, #6]
 80093f0:	4613      	mov	r3, r2
 80093f2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009402:	7979      	ldrb	r1, [r7, #5]
 8009404:	7e3b      	ldrb	r3, [r7, #24]
 8009406:	9303      	str	r3, [sp, #12]
 8009408:	88fb      	ldrh	r3, [r7, #6]
 800940a:	9302      	str	r3, [sp, #8]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	2301      	movs	r3, #1
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	2302      	movs	r3, #2
 8009416:	2200      	movs	r2, #0
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fade 	bl	80099da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af04      	add	r7, sp, #16
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	4611      	mov	r1, r2
 8009434:	461a      	mov	r2, r3
 8009436:	460b      	mov	r3, r1
 8009438:	80fb      	strh	r3, [r7, #6]
 800943a:	4613      	mov	r3, r2
 800943c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800943e:	7979      	ldrb	r1, [r7, #5]
 8009440:	2300      	movs	r3, #0
 8009442:	9303      	str	r3, [sp, #12]
 8009444:	88fb      	ldrh	r3, [r7, #6]
 8009446:	9302      	str	r3, [sp, #8]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	2301      	movs	r3, #1
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	2302      	movs	r3, #2
 8009452:	2201      	movs	r2, #1
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 fac0 	bl	80099da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af04      	add	r7, sp, #16
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	4608      	mov	r0, r1
 800946e:	4611      	mov	r1, r2
 8009470:	461a      	mov	r2, r3
 8009472:	4603      	mov	r3, r0
 8009474:	70fb      	strb	r3, [r7, #3]
 8009476:	460b      	mov	r3, r1
 8009478:	70bb      	strb	r3, [r7, #2]
 800947a:	4613      	mov	r3, r2
 800947c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800947e:	7878      	ldrb	r0, [r7, #1]
 8009480:	78ba      	ldrb	r2, [r7, #2]
 8009482:	78f9      	ldrb	r1, [r7, #3]
 8009484:	8b3b      	ldrh	r3, [r7, #24]
 8009486:	9302      	str	r3, [sp, #8]
 8009488:	7d3b      	ldrb	r3, [r7, #20]
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	7c3b      	ldrb	r3, [r7, #16]
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4603      	mov	r3, r0
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fa53 	bl	800993e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80094ae:	78fb      	ldrb	r3, [r7, #3]
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa72 	bl	800999c <USBH_LL_ClosePipe>

  return USBH_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f836 	bl	8009540 <USBH_GetFreePipe>
 80094d4:	4603      	mov	r3, r0
 80094d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80094d8:	89fb      	ldrh	r3, [r7, #14]
 80094da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00a      	beq.n	80094f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80094e2:	78fa      	ldrb	r2, [r7, #3]
 80094e4:	89fb      	ldrh	r3, [r7, #14]
 80094e6:	f003 030f 	and.w	r3, r3, #15
 80094ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	33e0      	adds	r3, #224	; 0xe0
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	440b      	add	r3, r1
 80094f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80094f8:	89fb      	ldrh	r3, [r7, #14]
 80094fa:	b2db      	uxtb	r3, r3
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	2b0f      	cmp	r3, #15
 8009514:	d80d      	bhi.n	8009532 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	33e0      	adds	r3, #224	; 0xe0
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	78fb      	ldrb	r3, [r7, #3]
 8009524:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	33e0      	adds	r3, #224	; 0xe0
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	440b      	add	r3, r1
 8009530:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]
 8009550:	e00f      	b.n	8009572 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	33e0      	adds	r3, #224	; 0xe0
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	b29b      	uxth	r3, r3
 800956a:	e007      	b.n	800957c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	3301      	adds	r3, #1
 8009570:	73fb      	strb	r3, [r7, #15]
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2b0f      	cmp	r3, #15
 8009576:	d9ec      	bls.n	8009552 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009578:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800958c:	2201      	movs	r2, #1
 800958e:	490e      	ldr	r1, [pc, #56]	; (80095c8 <MX_USB_HOST_Init+0x40>)
 8009590:	480e      	ldr	r0, [pc, #56]	; (80095cc <MX_USB_HOST_Init+0x44>)
 8009592:	f7fe fba7 	bl	8007ce4 <USBH_Init>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800959c:	f7f7 fddc 	bl	8001158 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80095a0:	490b      	ldr	r1, [pc, #44]	; (80095d0 <MX_USB_HOST_Init+0x48>)
 80095a2:	480a      	ldr	r0, [pc, #40]	; (80095cc <MX_USB_HOST_Init+0x44>)
 80095a4:	f7fe fc2c 	bl	8007e00 <USBH_RegisterClass>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80095ae:	f7f7 fdd3 	bl	8001158 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80095b2:	4806      	ldr	r0, [pc, #24]	; (80095cc <MX_USB_HOST_Init+0x44>)
 80095b4:	f7fe fcb0 	bl	8007f18 <USBH_Start>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80095be:	f7f7 fdcb 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80095c2:	bf00      	nop
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	080095e9 	.word	0x080095e9
 80095cc:	20000280 	.word	0x20000280
 80095d0:	20000010 	.word	0x20000010

080095d4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80095d8:	4802      	ldr	r0, [pc, #8]	; (80095e4 <MX_USB_HOST_Process+0x10>)
 80095da:	f7fe fcad 	bl	8007f38 <USBH_Process>
}
 80095de:	bf00      	nop
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20000280 	.word	0x20000280

080095e8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d819      	bhi.n	8009630 <USBH_UserProcess+0x48>
 80095fc:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <USBH_UserProcess+0x1c>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	08009631 	.word	0x08009631
 8009608:	08009621 	.word	0x08009621
 800960c:	08009631 	.word	0x08009631
 8009610:	08009629 	.word	0x08009629
 8009614:	08009619 	.word	0x08009619
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009618:	4b09      	ldr	r3, [pc, #36]	; (8009640 <USBH_UserProcess+0x58>)
 800961a:	2203      	movs	r2, #3
 800961c:	701a      	strb	r2, [r3, #0]
  break;
 800961e:	e008      	b.n	8009632 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009620:	4b07      	ldr	r3, [pc, #28]	; (8009640 <USBH_UserProcess+0x58>)
 8009622:	2202      	movs	r2, #2
 8009624:	701a      	strb	r2, [r3, #0]
  break;
 8009626:	e004      	b.n	8009632 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009628:	4b05      	ldr	r3, [pc, #20]	; (8009640 <USBH_UserProcess+0x58>)
 800962a:	2201      	movs	r2, #1
 800962c:	701a      	strb	r2, [r3, #0]
  break;
 800962e:	e000      	b.n	8009632 <USBH_UserProcess+0x4a>

  default:
  break;
 8009630:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009632:	bf00      	nop
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	20000658 	.word	0x20000658

08009644 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08a      	sub	sp, #40	; 0x28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800964c:	f107 0314 	add.w	r3, r7, #20
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	605a      	str	r2, [r3, #4]
 8009656:	609a      	str	r2, [r3, #8]
 8009658:	60da      	str	r2, [r3, #12]
 800965a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009664:	d147      	bne.n	80096f6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009666:	2300      	movs	r3, #0
 8009668:	613b      	str	r3, [r7, #16]
 800966a:	4b25      	ldr	r3, [pc, #148]	; (8009700 <HAL_HCD_MspInit+0xbc>)
 800966c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966e:	4a24      	ldr	r2, [pc, #144]	; (8009700 <HAL_HCD_MspInit+0xbc>)
 8009670:	f043 0301 	orr.w	r3, r3, #1
 8009674:	6313      	str	r3, [r2, #48]	; 0x30
 8009676:	4b22      	ldr	r3, [pc, #136]	; (8009700 <HAL_HCD_MspInit+0xbc>)
 8009678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	613b      	str	r3, [r7, #16]
 8009680:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009688:	2300      	movs	r3, #0
 800968a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968c:	2300      	movs	r3, #0
 800968e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009690:	f107 0314 	add.w	r3, r7, #20
 8009694:	4619      	mov	r1, r3
 8009696:	481b      	ldr	r0, [pc, #108]	; (8009704 <HAL_HCD_MspInit+0xc0>)
 8009698:	f7f8 fb60 	bl	8001d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800969c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80096a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096a2:	2302      	movs	r3, #2
 80096a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096aa:	2300      	movs	r3, #0
 80096ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096ae:	230a      	movs	r3, #10
 80096b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096b2:	f107 0314 	add.w	r3, r7, #20
 80096b6:	4619      	mov	r1, r3
 80096b8:	4812      	ldr	r0, [pc, #72]	; (8009704 <HAL_HCD_MspInit+0xc0>)
 80096ba:	f7f8 fb4f 	bl	8001d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096be:	4b10      	ldr	r3, [pc, #64]	; (8009700 <HAL_HCD_MspInit+0xbc>)
 80096c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c2:	4a0f      	ldr	r2, [pc, #60]	; (8009700 <HAL_HCD_MspInit+0xbc>)
 80096c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c8:	6353      	str	r3, [r2, #52]	; 0x34
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <HAL_HCD_MspInit+0xbc>)
 80096d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d2:	4a0b      	ldr	r2, [pc, #44]	; (8009700 <HAL_HCD_MspInit+0xbc>)
 80096d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096d8:	6453      	str	r3, [r2, #68]	; 0x44
 80096da:	4b09      	ldr	r3, [pc, #36]	; (8009700 <HAL_HCD_MspInit+0xbc>)
 80096dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80096e6:	2200      	movs	r2, #0
 80096e8:	2100      	movs	r1, #0
 80096ea:	2043      	movs	r0, #67	; 0x43
 80096ec:	f7f8 faff 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096f0:	2043      	movs	r0, #67	; 0x43
 80096f2:	f7f8 fb18 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096f6:	bf00      	nop
 80096f8:	3728      	adds	r7, #40	; 0x28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40023800 	.word	0x40023800
 8009704:	40020000 	.word	0x40020000

08009708 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe ffed 	bl	80086f6 <USBH_LL_IncTimer>
}
 800971c:	bf00      	nop
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff f825 	bl	8008782 <USBH_LL_Connect>
}
 8009738:	bf00      	nop
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff f82e 	bl	80087b0 <USBH_LL_Disconnect>
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
 8009768:	4613      	mov	r3, r2
 800976a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe ffdf 	bl	800874a <USBH_LL_PortEnabled>
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe ffdf 	bl	8008766 <USBH_LL_PortDisabled>
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d12a      	bne.n	8009818 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80097c2:	4a18      	ldr	r2, [pc, #96]	; (8009824 <USBH_LL_Init+0x74>)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a15      	ldr	r2, [pc, #84]	; (8009824 <USBH_LL_Init+0x74>)
 80097ce:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097d2:	4b14      	ldr	r3, [pc, #80]	; (8009824 <USBH_LL_Init+0x74>)
 80097d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097d8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80097da:	4b12      	ldr	r3, [pc, #72]	; (8009824 <USBH_LL_Init+0x74>)
 80097dc:	2208      	movs	r2, #8
 80097de:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80097e0:	4b10      	ldr	r3, [pc, #64]	; (8009824 <USBH_LL_Init+0x74>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097e6:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <USBH_LL_Init+0x74>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80097ec:	4b0d      	ldr	r3, [pc, #52]	; (8009824 <USBH_LL_Init+0x74>)
 80097ee:	2202      	movs	r2, #2
 80097f0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <USBH_LL_Init+0x74>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80097f8:	480a      	ldr	r0, [pc, #40]	; (8009824 <USBH_LL_Init+0x74>)
 80097fa:	f7f8 fc64 	bl	80020c6 <HAL_HCD_Init>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009804:	f7f7 fca8 	bl	8001158 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009808:	4806      	ldr	r0, [pc, #24]	; (8009824 <USBH_LL_Init+0x74>)
 800980a:	f7f9 f848 	bl	800289e <HAL_HCD_GetCurrentFrame>
 800980e:	4603      	mov	r3, r0
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fe ff60 	bl	80086d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2000065c 	.word	0x2000065c

08009828 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800983e:	4618      	mov	r0, r3
 8009840:	f7f8 ffb7 	bl	80027b2 <HAL_HCD_Start>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f95c 	bl	8009b08 <USBH_Get_USB_Status>
 8009850:	4603      	mov	r3, r0
 8009852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009854:	7bbb      	ldrb	r3, [r7, #14]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009874:	4618      	mov	r0, r3
 8009876:	f7f8 ffbf 	bl	80027f8 <HAL_HCD_Stop>
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f941 	bl	8009b08 <USBH_Get_USB_Status>
 8009886:	4603      	mov	r3, r0
 8009888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988a:	7bbb      	ldrb	r3, [r7, #14]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800989c:	2301      	movs	r3, #1
 800989e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7f9 f807 	bl	80028ba <HAL_HCD_GetCurrentSpeed>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d00c      	beq.n	80098cc <USBH_LL_GetSpeed+0x38>
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d80d      	bhi.n	80098d2 <USBH_LL_GetSpeed+0x3e>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <USBH_LL_GetSpeed+0x2c>
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d003      	beq.n	80098c6 <USBH_LL_GetSpeed+0x32>
 80098be:	e008      	b.n	80098d2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73fb      	strb	r3, [r7, #15]
    break;
 80098c4:	e008      	b.n	80098d8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80098c6:	2301      	movs	r3, #1
 80098c8:	73fb      	strb	r3, [r7, #15]
    break;
 80098ca:	e005      	b.n	80098d8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80098cc:	2302      	movs	r3, #2
 80098ce:	73fb      	strb	r3, [r7, #15]
    break;
 80098d0:	e002      	b.n	80098d8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80098d2:	2301      	movs	r3, #1
 80098d4:	73fb      	strb	r3, [r7, #15]
    break;
 80098d6:	bf00      	nop
  }
  return  speed;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7f8 ff9a 	bl	8002832 <HAL_HCD_ResetPort>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	4618      	mov	r0, r3
 8009906:	f000 f8ff 	bl	8009b08 <USBH_Get_USB_Status>
 800990a:	4603      	mov	r3, r0
 800990c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800990e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800992a:	78fa      	ldrb	r2, [r7, #3]
 800992c:	4611      	mov	r1, r2
 800992e:	4618      	mov	r0, r3
 8009930:	f7f8 ffa1 	bl	8002876 <HAL_HCD_HC_GetXferCount>
 8009934:	4603      	mov	r3, r0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800993e:	b590      	push	{r4, r7, lr}
 8009940:	b089      	sub	sp, #36	; 0x24
 8009942:	af04      	add	r7, sp, #16
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	4608      	mov	r0, r1
 8009948:	4611      	mov	r1, r2
 800994a:	461a      	mov	r2, r3
 800994c:	4603      	mov	r3, r0
 800994e:	70fb      	strb	r3, [r7, #3]
 8009950:	460b      	mov	r3, r1
 8009952:	70bb      	strb	r3, [r7, #2]
 8009954:	4613      	mov	r3, r2
 8009956:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009966:	787c      	ldrb	r4, [r7, #1]
 8009968:	78ba      	ldrb	r2, [r7, #2]
 800996a:	78f9      	ldrb	r1, [r7, #3]
 800996c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800996e:	9302      	str	r3, [sp, #8]
 8009970:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	f897 3020 	ldrb.w	r3, [r7, #32]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	4623      	mov	r3, r4
 800997e:	f7f8 fc04 	bl	800218a <HAL_HCD_HC_Init>
 8009982:	4603      	mov	r3, r0
 8009984:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	4618      	mov	r0, r3
 800998a:	f000 f8bd 	bl	8009b08 <USBH_Get_USB_Status>
 800998e:	4603      	mov	r3, r0
 8009990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009992:	7bbb      	ldrb	r3, [r7, #14]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	bd90      	pop	{r4, r7, pc}

0800999c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099b6:	78fa      	ldrb	r2, [r7, #3]
 80099b8:	4611      	mov	r1, r2
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7f8 fc74 	bl	80022a8 <HAL_HCD_HC_Halt>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 f89e 	bl	8009b08 <USBH_Get_USB_Status>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80099da:	b590      	push	{r4, r7, lr}
 80099dc:	b089      	sub	sp, #36	; 0x24
 80099de:	af04      	add	r7, sp, #16
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	4608      	mov	r0, r1
 80099e4:	4611      	mov	r1, r2
 80099e6:	461a      	mov	r2, r3
 80099e8:	4603      	mov	r3, r0
 80099ea:	70fb      	strb	r3, [r7, #3]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70bb      	strb	r3, [r7, #2]
 80099f0:	4613      	mov	r3, r2
 80099f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a02:	787c      	ldrb	r4, [r7, #1]
 8009a04:	78ba      	ldrb	r2, [r7, #2]
 8009a06:	78f9      	ldrb	r1, [r7, #3]
 8009a08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a0c:	9303      	str	r3, [sp, #12]
 8009a0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a10:	9302      	str	r3, [sp, #8]
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	f7f8 fc67 	bl	80022f0 <HAL_HCD_HC_SubmitRequest>
 8009a22:	4603      	mov	r3, r0
 8009a24:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 f86d 	bl	8009b08 <USBH_Get_USB_Status>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd90      	pop	{r4, r7, pc}

08009a3c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	460b      	mov	r3, r1
 8009a46:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a4e:	78fa      	ldrb	r2, [r7, #3]
 8009a50:	4611      	mov	r1, r2
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f8 fefb 	bl	800284e <HAL_HCD_HC_GetURBState>
 8009a58:	4603      	mov	r3, r0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b082      	sub	sp, #8
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d103      	bne.n	8009a80 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 f870 	bl	8009b60 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009a80:	20c8      	movs	r0, #200	; 0xc8
 8009a82:	f7f8 f835 	bl	8001af0 <HAL_Delay>
  return USBH_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	70fb      	strb	r3, [r7, #3]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009aa6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	212c      	movs	r1, #44	; 0x2c
 8009aae:	fb01 f303 	mul.w	r3, r1, r3
 8009ab2:	4413      	add	r3, r2
 8009ab4:	333b      	adds	r3, #59	; 0x3b
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d009      	beq.n	8009ad0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009abc:	78fb      	ldrb	r3, [r7, #3]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	212c      	movs	r1, #44	; 0x2c
 8009ac2:	fb01 f303 	mul.w	r3, r1, r3
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3354      	adds	r3, #84	; 0x54
 8009aca:	78ba      	ldrb	r2, [r7, #2]
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	e008      	b.n	8009ae2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009ad0:	78fb      	ldrb	r3, [r7, #3]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	212c      	movs	r1, #44	; 0x2c
 8009ad6:	fb01 f303 	mul.w	r3, r1, r3
 8009ada:	4413      	add	r3, r2
 8009adc:	3355      	adds	r3, #85	; 0x55
 8009ade:	78ba      	ldrb	r2, [r7, #2]
 8009ae0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7f7 fff9 	bl	8001af0 <HAL_Delay>
}
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b16:	79fb      	ldrb	r3, [r7, #7]
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d817      	bhi.n	8009b4c <USBH_Get_USB_Status+0x44>
 8009b1c:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <USBH_Get_USB_Status+0x1c>)
 8009b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b22:	bf00      	nop
 8009b24:	08009b35 	.word	0x08009b35
 8009b28:	08009b3b 	.word	0x08009b3b
 8009b2c:	08009b41 	.word	0x08009b41
 8009b30:	08009b47 	.word	0x08009b47
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73fb      	strb	r3, [r7, #15]
    break;
 8009b38:	e00b      	b.n	8009b52 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3e:	e008      	b.n	8009b52 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b40:	2301      	movs	r3, #1
 8009b42:	73fb      	strb	r3, [r7, #15]
    break;
 8009b44:	e005      	b.n	8009b52 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b46:	2302      	movs	r3, #2
 8009b48:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4a:	e002      	b.n	8009b52 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b50:	bf00      	nop
  }
  return usb_status;
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009b6e:	79fb      	ldrb	r3, [r7, #7]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
 8009b78:	e001      	b.n	8009b7e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	461a      	mov	r2, r3
 8009b82:	2101      	movs	r1, #1
 8009b84:	4803      	ldr	r0, [pc, #12]	; (8009b94 <MX_DriverVbusFS+0x34>)
 8009b86:	f7f8 fa85 	bl	8002094 <HAL_GPIO_WritePin>
}
 8009b8a:	bf00      	nop
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	40020800 	.word	0x40020800

08009b98 <__errno>:
 8009b98:	4b01      	ldr	r3, [pc, #4]	; (8009ba0 <__errno+0x8>)
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	20000030 	.word	0x20000030

08009ba4 <__libc_init_array>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	4d0d      	ldr	r5, [pc, #52]	; (8009bdc <__libc_init_array+0x38>)
 8009ba8:	4c0d      	ldr	r4, [pc, #52]	; (8009be0 <__libc_init_array+0x3c>)
 8009baa:	1b64      	subs	r4, r4, r5
 8009bac:	10a4      	asrs	r4, r4, #2
 8009bae:	2600      	movs	r6, #0
 8009bb0:	42a6      	cmp	r6, r4
 8009bb2:	d109      	bne.n	8009bc8 <__libc_init_array+0x24>
 8009bb4:	4d0b      	ldr	r5, [pc, #44]	; (8009be4 <__libc_init_array+0x40>)
 8009bb6:	4c0c      	ldr	r4, [pc, #48]	; (8009be8 <__libc_init_array+0x44>)
 8009bb8:	f000 f92e 	bl	8009e18 <_init>
 8009bbc:	1b64      	subs	r4, r4, r5
 8009bbe:	10a4      	asrs	r4, r4, #2
 8009bc0:	2600      	movs	r6, #0
 8009bc2:	42a6      	cmp	r6, r4
 8009bc4:	d105      	bne.n	8009bd2 <__libc_init_array+0x2e>
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}
 8009bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bcc:	4798      	blx	r3
 8009bce:	3601      	adds	r6, #1
 8009bd0:	e7ee      	b.n	8009bb0 <__libc_init_array+0xc>
 8009bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd6:	4798      	blx	r3
 8009bd8:	3601      	adds	r6, #1
 8009bda:	e7f2      	b.n	8009bc2 <__libc_init_array+0x1e>
 8009bdc:	08009e54 	.word	0x08009e54
 8009be0:	08009e54 	.word	0x08009e54
 8009be4:	08009e54 	.word	0x08009e54
 8009be8:	08009e58 	.word	0x08009e58

08009bec <malloc>:
 8009bec:	4b02      	ldr	r3, [pc, #8]	; (8009bf8 <malloc+0xc>)
 8009bee:	4601      	mov	r1, r0
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	f000 b87f 	b.w	8009cf4 <_malloc_r>
 8009bf6:	bf00      	nop
 8009bf8:	20000030 	.word	0x20000030

08009bfc <free>:
 8009bfc:	4b02      	ldr	r3, [pc, #8]	; (8009c08 <free+0xc>)
 8009bfe:	4601      	mov	r1, r0
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	f000 b80b 	b.w	8009c1c <_free_r>
 8009c06:	bf00      	nop
 8009c08:	20000030 	.word	0x20000030

08009c0c <memset>:
 8009c0c:	4402      	add	r2, r0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d100      	bne.n	8009c16 <memset+0xa>
 8009c14:	4770      	bx	lr
 8009c16:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1a:	e7f9      	b.n	8009c10 <memset+0x4>

08009c1c <_free_r>:
 8009c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c1e:	2900      	cmp	r1, #0
 8009c20:	d044      	beq.n	8009cac <_free_r+0x90>
 8009c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c26:	9001      	str	r0, [sp, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c2e:	bfb8      	it	lt
 8009c30:	18e4      	addlt	r4, r4, r3
 8009c32:	f000 f8e3 	bl	8009dfc <__malloc_lock>
 8009c36:	4a1e      	ldr	r2, [pc, #120]	; (8009cb0 <_free_r+0x94>)
 8009c38:	9801      	ldr	r0, [sp, #4]
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	b933      	cbnz	r3, 8009c4c <_free_r+0x30>
 8009c3e:	6063      	str	r3, [r4, #4]
 8009c40:	6014      	str	r4, [r2, #0]
 8009c42:	b003      	add	sp, #12
 8009c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c48:	f000 b8de 	b.w	8009e08 <__malloc_unlock>
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	d908      	bls.n	8009c62 <_free_r+0x46>
 8009c50:	6825      	ldr	r5, [r4, #0]
 8009c52:	1961      	adds	r1, r4, r5
 8009c54:	428b      	cmp	r3, r1
 8009c56:	bf01      	itttt	eq
 8009c58:	6819      	ldreq	r1, [r3, #0]
 8009c5a:	685b      	ldreq	r3, [r3, #4]
 8009c5c:	1949      	addeq	r1, r1, r5
 8009c5e:	6021      	streq	r1, [r4, #0]
 8009c60:	e7ed      	b.n	8009c3e <_free_r+0x22>
 8009c62:	461a      	mov	r2, r3
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	b10b      	cbz	r3, 8009c6c <_free_r+0x50>
 8009c68:	42a3      	cmp	r3, r4
 8009c6a:	d9fa      	bls.n	8009c62 <_free_r+0x46>
 8009c6c:	6811      	ldr	r1, [r2, #0]
 8009c6e:	1855      	adds	r5, r2, r1
 8009c70:	42a5      	cmp	r5, r4
 8009c72:	d10b      	bne.n	8009c8c <_free_r+0x70>
 8009c74:	6824      	ldr	r4, [r4, #0]
 8009c76:	4421      	add	r1, r4
 8009c78:	1854      	adds	r4, r2, r1
 8009c7a:	42a3      	cmp	r3, r4
 8009c7c:	6011      	str	r1, [r2, #0]
 8009c7e:	d1e0      	bne.n	8009c42 <_free_r+0x26>
 8009c80:	681c      	ldr	r4, [r3, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	6053      	str	r3, [r2, #4]
 8009c86:	4421      	add	r1, r4
 8009c88:	6011      	str	r1, [r2, #0]
 8009c8a:	e7da      	b.n	8009c42 <_free_r+0x26>
 8009c8c:	d902      	bls.n	8009c94 <_free_r+0x78>
 8009c8e:	230c      	movs	r3, #12
 8009c90:	6003      	str	r3, [r0, #0]
 8009c92:	e7d6      	b.n	8009c42 <_free_r+0x26>
 8009c94:	6825      	ldr	r5, [r4, #0]
 8009c96:	1961      	adds	r1, r4, r5
 8009c98:	428b      	cmp	r3, r1
 8009c9a:	bf04      	itt	eq
 8009c9c:	6819      	ldreq	r1, [r3, #0]
 8009c9e:	685b      	ldreq	r3, [r3, #4]
 8009ca0:	6063      	str	r3, [r4, #4]
 8009ca2:	bf04      	itt	eq
 8009ca4:	1949      	addeq	r1, r1, r5
 8009ca6:	6021      	streq	r1, [r4, #0]
 8009ca8:	6054      	str	r4, [r2, #4]
 8009caa:	e7ca      	b.n	8009c42 <_free_r+0x26>
 8009cac:	b003      	add	sp, #12
 8009cae:	bd30      	pop	{r4, r5, pc}
 8009cb0:	20000960 	.word	0x20000960

08009cb4 <sbrk_aligned>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	4e0e      	ldr	r6, [pc, #56]	; (8009cf0 <sbrk_aligned+0x3c>)
 8009cb8:	460c      	mov	r4, r1
 8009cba:	6831      	ldr	r1, [r6, #0]
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	b911      	cbnz	r1, 8009cc6 <sbrk_aligned+0x12>
 8009cc0:	f000 f88c 	bl	8009ddc <_sbrk_r>
 8009cc4:	6030      	str	r0, [r6, #0]
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f000 f887 	bl	8009ddc <_sbrk_r>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	d00a      	beq.n	8009ce8 <sbrk_aligned+0x34>
 8009cd2:	1cc4      	adds	r4, r0, #3
 8009cd4:	f024 0403 	bic.w	r4, r4, #3
 8009cd8:	42a0      	cmp	r0, r4
 8009cda:	d007      	beq.n	8009cec <sbrk_aligned+0x38>
 8009cdc:	1a21      	subs	r1, r4, r0
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f000 f87c 	bl	8009ddc <_sbrk_r>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d101      	bne.n	8009cec <sbrk_aligned+0x38>
 8009ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8009cec:	4620      	mov	r0, r4
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	20000964 	.word	0x20000964

08009cf4 <_malloc_r>:
 8009cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf8:	1ccd      	adds	r5, r1, #3
 8009cfa:	f025 0503 	bic.w	r5, r5, #3
 8009cfe:	3508      	adds	r5, #8
 8009d00:	2d0c      	cmp	r5, #12
 8009d02:	bf38      	it	cc
 8009d04:	250c      	movcc	r5, #12
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	4607      	mov	r7, r0
 8009d0a:	db01      	blt.n	8009d10 <_malloc_r+0x1c>
 8009d0c:	42a9      	cmp	r1, r5
 8009d0e:	d905      	bls.n	8009d1c <_malloc_r+0x28>
 8009d10:	230c      	movs	r3, #12
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	2600      	movs	r6, #0
 8009d16:	4630      	mov	r0, r6
 8009d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d1c:	4e2e      	ldr	r6, [pc, #184]	; (8009dd8 <_malloc_r+0xe4>)
 8009d1e:	f000 f86d 	bl	8009dfc <__malloc_lock>
 8009d22:	6833      	ldr	r3, [r6, #0]
 8009d24:	461c      	mov	r4, r3
 8009d26:	bb34      	cbnz	r4, 8009d76 <_malloc_r+0x82>
 8009d28:	4629      	mov	r1, r5
 8009d2a:	4638      	mov	r0, r7
 8009d2c:	f7ff ffc2 	bl	8009cb4 <sbrk_aligned>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	4604      	mov	r4, r0
 8009d34:	d14d      	bne.n	8009dd2 <_malloc_r+0xde>
 8009d36:	6834      	ldr	r4, [r6, #0]
 8009d38:	4626      	mov	r6, r4
 8009d3a:	2e00      	cmp	r6, #0
 8009d3c:	d140      	bne.n	8009dc0 <_malloc_r+0xcc>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	4631      	mov	r1, r6
 8009d42:	4638      	mov	r0, r7
 8009d44:	eb04 0803 	add.w	r8, r4, r3
 8009d48:	f000 f848 	bl	8009ddc <_sbrk_r>
 8009d4c:	4580      	cmp	r8, r0
 8009d4e:	d13a      	bne.n	8009dc6 <_malloc_r+0xd2>
 8009d50:	6821      	ldr	r1, [r4, #0]
 8009d52:	3503      	adds	r5, #3
 8009d54:	1a6d      	subs	r5, r5, r1
 8009d56:	f025 0503 	bic.w	r5, r5, #3
 8009d5a:	3508      	adds	r5, #8
 8009d5c:	2d0c      	cmp	r5, #12
 8009d5e:	bf38      	it	cc
 8009d60:	250c      	movcc	r5, #12
 8009d62:	4629      	mov	r1, r5
 8009d64:	4638      	mov	r0, r7
 8009d66:	f7ff ffa5 	bl	8009cb4 <sbrk_aligned>
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	d02b      	beq.n	8009dc6 <_malloc_r+0xd2>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	442b      	add	r3, r5
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	e00e      	b.n	8009d94 <_malloc_r+0xa0>
 8009d76:	6822      	ldr	r2, [r4, #0]
 8009d78:	1b52      	subs	r2, r2, r5
 8009d7a:	d41e      	bmi.n	8009dba <_malloc_r+0xc6>
 8009d7c:	2a0b      	cmp	r2, #11
 8009d7e:	d916      	bls.n	8009dae <_malloc_r+0xba>
 8009d80:	1961      	adds	r1, r4, r5
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	6025      	str	r5, [r4, #0]
 8009d86:	bf18      	it	ne
 8009d88:	6059      	strne	r1, [r3, #4]
 8009d8a:	6863      	ldr	r3, [r4, #4]
 8009d8c:	bf08      	it	eq
 8009d8e:	6031      	streq	r1, [r6, #0]
 8009d90:	5162      	str	r2, [r4, r5]
 8009d92:	604b      	str	r3, [r1, #4]
 8009d94:	4638      	mov	r0, r7
 8009d96:	f104 060b 	add.w	r6, r4, #11
 8009d9a:	f000 f835 	bl	8009e08 <__malloc_unlock>
 8009d9e:	f026 0607 	bic.w	r6, r6, #7
 8009da2:	1d23      	adds	r3, r4, #4
 8009da4:	1af2      	subs	r2, r6, r3
 8009da6:	d0b6      	beq.n	8009d16 <_malloc_r+0x22>
 8009da8:	1b9b      	subs	r3, r3, r6
 8009daa:	50a3      	str	r3, [r4, r2]
 8009dac:	e7b3      	b.n	8009d16 <_malloc_r+0x22>
 8009dae:	6862      	ldr	r2, [r4, #4]
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	bf0c      	ite	eq
 8009db4:	6032      	streq	r2, [r6, #0]
 8009db6:	605a      	strne	r2, [r3, #4]
 8009db8:	e7ec      	b.n	8009d94 <_malloc_r+0xa0>
 8009dba:	4623      	mov	r3, r4
 8009dbc:	6864      	ldr	r4, [r4, #4]
 8009dbe:	e7b2      	b.n	8009d26 <_malloc_r+0x32>
 8009dc0:	4634      	mov	r4, r6
 8009dc2:	6876      	ldr	r6, [r6, #4]
 8009dc4:	e7b9      	b.n	8009d3a <_malloc_r+0x46>
 8009dc6:	230c      	movs	r3, #12
 8009dc8:	603b      	str	r3, [r7, #0]
 8009dca:	4638      	mov	r0, r7
 8009dcc:	f000 f81c 	bl	8009e08 <__malloc_unlock>
 8009dd0:	e7a1      	b.n	8009d16 <_malloc_r+0x22>
 8009dd2:	6025      	str	r5, [r4, #0]
 8009dd4:	e7de      	b.n	8009d94 <_malloc_r+0xa0>
 8009dd6:	bf00      	nop
 8009dd8:	20000960 	.word	0x20000960

08009ddc <_sbrk_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d06      	ldr	r5, [pc, #24]	; (8009df8 <_sbrk_r+0x1c>)
 8009de0:	2300      	movs	r3, #0
 8009de2:	4604      	mov	r4, r0
 8009de4:	4608      	mov	r0, r1
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7f7 fd9e 	bl	8001928 <_sbrk>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_sbrk_r+0x1a>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_sbrk_r+0x1a>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	20000968 	.word	0x20000968

08009dfc <__malloc_lock>:
 8009dfc:	4801      	ldr	r0, [pc, #4]	; (8009e04 <__malloc_lock+0x8>)
 8009dfe:	f000 b809 	b.w	8009e14 <__retarget_lock_acquire_recursive>
 8009e02:	bf00      	nop
 8009e04:	2000096c 	.word	0x2000096c

08009e08 <__malloc_unlock>:
 8009e08:	4801      	ldr	r0, [pc, #4]	; (8009e10 <__malloc_unlock+0x8>)
 8009e0a:	f000 b804 	b.w	8009e16 <__retarget_lock_release_recursive>
 8009e0e:	bf00      	nop
 8009e10:	2000096c 	.word	0x2000096c

08009e14 <__retarget_lock_acquire_recursive>:
 8009e14:	4770      	bx	lr

08009e16 <__retarget_lock_release_recursive>:
 8009e16:	4770      	bx	lr

08009e18 <_init>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr

08009e24 <_fini>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	bf00      	nop
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr
