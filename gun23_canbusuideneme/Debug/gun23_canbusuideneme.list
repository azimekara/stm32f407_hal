
gun23_canbusuideneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dc8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800726c  0800726c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800726c  0800726c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800726c  0800726c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  080072e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080072e4  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001025d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002163  00000000  00000000  000302f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019408  00000000  00000000  00033f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010640  00000000  00000000  0004d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009371a  00000000  00000000  0005d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f10da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c14  00000000  00000000  000f112c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e70 	.word	0x08006e70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006e70 	.word	0x08006e70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_d2uiz>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2200      	movs	r2, #0
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <__aeabi_d2uiz+0x38>)
 800024a:	0004      	movs	r4, r0
 800024c:	000d      	movs	r5, r1
 800024e:	f000 ff2f 	bl	80010b0 <__aeabi_dcmpge>
 8000252:	2800      	cmp	r0, #0
 8000254:	d104      	bne.n	8000260 <__aeabi_d2uiz+0x1c>
 8000256:	0020      	movs	r0, r4
 8000258:	0029      	movs	r1, r5
 800025a:	f000 fe99 	bl	8000f90 <__aeabi_d2iz>
 800025e:	bd70      	pop	{r4, r5, r6, pc}
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <__aeabi_d2uiz+0x38>)
 8000262:	2200      	movs	r2, #0
 8000264:	0020      	movs	r0, r4
 8000266:	0029      	movs	r1, r5
 8000268:	f000 fb00 	bl	800086c <__aeabi_dsub>
 800026c:	f000 fe90 	bl	8000f90 <__aeabi_d2iz>
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	061b      	lsls	r3, r3, #24
 8000274:	469c      	mov	ip, r3
 8000276:	4460      	add	r0, ip
 8000278:	e7f1      	b.n	800025e <__aeabi_d2uiz+0x1a>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	41e00000 	.word	0x41e00000

08000280 <__aeabi_ddiv>:
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	4657      	mov	r7, sl
 8000284:	464e      	mov	r6, r9
 8000286:	4645      	mov	r5, r8
 8000288:	46de      	mov	lr, fp
 800028a:	b5e0      	push	{r5, r6, r7, lr}
 800028c:	4681      	mov	r9, r0
 800028e:	0005      	movs	r5, r0
 8000290:	030c      	lsls	r4, r1, #12
 8000292:	0048      	lsls	r0, r1, #1
 8000294:	4692      	mov	sl, r2
 8000296:	001f      	movs	r7, r3
 8000298:	b085      	sub	sp, #20
 800029a:	0b24      	lsrs	r4, r4, #12
 800029c:	0d40      	lsrs	r0, r0, #21
 800029e:	0fce      	lsrs	r6, r1, #31
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d100      	bne.n	80002a6 <__aeabi_ddiv+0x26>
 80002a4:	e156      	b.n	8000554 <__aeabi_ddiv+0x2d4>
 80002a6:	4bd4      	ldr	r3, [pc, #848]	; (80005f8 <__aeabi_ddiv+0x378>)
 80002a8:	4298      	cmp	r0, r3
 80002aa:	d100      	bne.n	80002ae <__aeabi_ddiv+0x2e>
 80002ac:	e172      	b.n	8000594 <__aeabi_ddiv+0x314>
 80002ae:	0f6b      	lsrs	r3, r5, #29
 80002b0:	00e4      	lsls	r4, r4, #3
 80002b2:	431c      	orrs	r4, r3
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	041b      	lsls	r3, r3, #16
 80002b8:	4323      	orrs	r3, r4
 80002ba:	4698      	mov	r8, r3
 80002bc:	4bcf      	ldr	r3, [pc, #828]	; (80005fc <__aeabi_ddiv+0x37c>)
 80002be:	00ed      	lsls	r5, r5, #3
 80002c0:	469b      	mov	fp, r3
 80002c2:	2300      	movs	r3, #0
 80002c4:	4699      	mov	r9, r3
 80002c6:	4483      	add	fp, r0
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	033c      	lsls	r4, r7, #12
 80002cc:	007b      	lsls	r3, r7, #1
 80002ce:	4650      	mov	r0, sl
 80002d0:	0b24      	lsrs	r4, r4, #12
 80002d2:	0d5b      	lsrs	r3, r3, #21
 80002d4:	0fff      	lsrs	r7, r7, #31
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d100      	bne.n	80002dc <__aeabi_ddiv+0x5c>
 80002da:	e11f      	b.n	800051c <__aeabi_ddiv+0x29c>
 80002dc:	4ac6      	ldr	r2, [pc, #792]	; (80005f8 <__aeabi_ddiv+0x378>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d100      	bne.n	80002e4 <__aeabi_ddiv+0x64>
 80002e2:	e162      	b.n	80005aa <__aeabi_ddiv+0x32a>
 80002e4:	49c5      	ldr	r1, [pc, #788]	; (80005fc <__aeabi_ddiv+0x37c>)
 80002e6:	0f42      	lsrs	r2, r0, #29
 80002e8:	468c      	mov	ip, r1
 80002ea:	00e4      	lsls	r4, r4, #3
 80002ec:	4659      	mov	r1, fp
 80002ee:	4314      	orrs	r4, r2
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	4463      	add	r3, ip
 80002f4:	0412      	lsls	r2, r2, #16
 80002f6:	1acb      	subs	r3, r1, r3
 80002f8:	4314      	orrs	r4, r2
 80002fa:	469b      	mov	fp, r3
 80002fc:	00c2      	lsls	r2, r0, #3
 80002fe:	2000      	movs	r0, #0
 8000300:	0033      	movs	r3, r6
 8000302:	407b      	eors	r3, r7
 8000304:	469a      	mov	sl, r3
 8000306:	464b      	mov	r3, r9
 8000308:	2b0f      	cmp	r3, #15
 800030a:	d827      	bhi.n	800035c <__aeabi_ddiv+0xdc>
 800030c:	49bc      	ldr	r1, [pc, #752]	; (8000600 <__aeabi_ddiv+0x380>)
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	58cb      	ldr	r3, [r1, r3]
 8000312:	469f      	mov	pc, r3
 8000314:	46b2      	mov	sl, r6
 8000316:	9b00      	ldr	r3, [sp, #0]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d016      	beq.n	800034a <__aeabi_ddiv+0xca>
 800031c:	2b03      	cmp	r3, #3
 800031e:	d100      	bne.n	8000322 <__aeabi_ddiv+0xa2>
 8000320:	e28e      	b.n	8000840 <__aeabi_ddiv+0x5c0>
 8000322:	2b01      	cmp	r3, #1
 8000324:	d000      	beq.n	8000328 <__aeabi_ddiv+0xa8>
 8000326:	e0d9      	b.n	80004dc <__aeabi_ddiv+0x25c>
 8000328:	2300      	movs	r3, #0
 800032a:	2400      	movs	r4, #0
 800032c:	2500      	movs	r5, #0
 800032e:	4652      	mov	r2, sl
 8000330:	051b      	lsls	r3, r3, #20
 8000332:	4323      	orrs	r3, r4
 8000334:	07d2      	lsls	r2, r2, #31
 8000336:	4313      	orrs	r3, r2
 8000338:	0028      	movs	r0, r5
 800033a:	0019      	movs	r1, r3
 800033c:	b005      	add	sp, #20
 800033e:	bcf0      	pop	{r4, r5, r6, r7}
 8000340:	46bb      	mov	fp, r7
 8000342:	46b2      	mov	sl, r6
 8000344:	46a9      	mov	r9, r5
 8000346:	46a0      	mov	r8, r4
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034a:	2400      	movs	r4, #0
 800034c:	2500      	movs	r5, #0
 800034e:	4baa      	ldr	r3, [pc, #680]	; (80005f8 <__aeabi_ddiv+0x378>)
 8000350:	e7ed      	b.n	800032e <__aeabi_ddiv+0xae>
 8000352:	46ba      	mov	sl, r7
 8000354:	46a0      	mov	r8, r4
 8000356:	0015      	movs	r5, r2
 8000358:	9000      	str	r0, [sp, #0]
 800035a:	e7dc      	b.n	8000316 <__aeabi_ddiv+0x96>
 800035c:	4544      	cmp	r4, r8
 800035e:	d200      	bcs.n	8000362 <__aeabi_ddiv+0xe2>
 8000360:	e1c7      	b.n	80006f2 <__aeabi_ddiv+0x472>
 8000362:	d100      	bne.n	8000366 <__aeabi_ddiv+0xe6>
 8000364:	e1c2      	b.n	80006ec <__aeabi_ddiv+0x46c>
 8000366:	2301      	movs	r3, #1
 8000368:	425b      	negs	r3, r3
 800036a:	469c      	mov	ip, r3
 800036c:	002e      	movs	r6, r5
 800036e:	4640      	mov	r0, r8
 8000370:	2500      	movs	r5, #0
 8000372:	44e3      	add	fp, ip
 8000374:	0223      	lsls	r3, r4, #8
 8000376:	0e14      	lsrs	r4, r2, #24
 8000378:	431c      	orrs	r4, r3
 800037a:	0c1b      	lsrs	r3, r3, #16
 800037c:	4699      	mov	r9, r3
 800037e:	0423      	lsls	r3, r4, #16
 8000380:	0c1f      	lsrs	r7, r3, #16
 8000382:	0212      	lsls	r2, r2, #8
 8000384:	4649      	mov	r1, r9
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9701      	str	r7, [sp, #4]
 800038a:	f7ff ff55 	bl	8000238 <__aeabi_uidivmod>
 800038e:	0002      	movs	r2, r0
 8000390:	437a      	muls	r2, r7
 8000392:	040b      	lsls	r3, r1, #16
 8000394:	0c31      	lsrs	r1, r6, #16
 8000396:	4680      	mov	r8, r0
 8000398:	4319      	orrs	r1, r3
 800039a:	428a      	cmp	r2, r1
 800039c:	d907      	bls.n	80003ae <__aeabi_ddiv+0x12e>
 800039e:	2301      	movs	r3, #1
 80003a0:	425b      	negs	r3, r3
 80003a2:	469c      	mov	ip, r3
 80003a4:	1909      	adds	r1, r1, r4
 80003a6:	44e0      	add	r8, ip
 80003a8:	428c      	cmp	r4, r1
 80003aa:	d800      	bhi.n	80003ae <__aeabi_ddiv+0x12e>
 80003ac:	e207      	b.n	80007be <__aeabi_ddiv+0x53e>
 80003ae:	1a88      	subs	r0, r1, r2
 80003b0:	4649      	mov	r1, r9
 80003b2:	f7ff ff41 	bl	8000238 <__aeabi_uidivmod>
 80003b6:	0409      	lsls	r1, r1, #16
 80003b8:	468c      	mov	ip, r1
 80003ba:	0431      	lsls	r1, r6, #16
 80003bc:	4666      	mov	r6, ip
 80003be:	9a01      	ldr	r2, [sp, #4]
 80003c0:	0c09      	lsrs	r1, r1, #16
 80003c2:	4342      	muls	r2, r0
 80003c4:	0003      	movs	r3, r0
 80003c6:	4331      	orrs	r1, r6
 80003c8:	428a      	cmp	r2, r1
 80003ca:	d904      	bls.n	80003d6 <__aeabi_ddiv+0x156>
 80003cc:	1909      	adds	r1, r1, r4
 80003ce:	3b01      	subs	r3, #1
 80003d0:	428c      	cmp	r4, r1
 80003d2:	d800      	bhi.n	80003d6 <__aeabi_ddiv+0x156>
 80003d4:	e1ed      	b.n	80007b2 <__aeabi_ddiv+0x532>
 80003d6:	1a88      	subs	r0, r1, r2
 80003d8:	4642      	mov	r2, r8
 80003da:	0412      	lsls	r2, r2, #16
 80003dc:	431a      	orrs	r2, r3
 80003de:	4690      	mov	r8, r2
 80003e0:	4641      	mov	r1, r8
 80003e2:	9b00      	ldr	r3, [sp, #0]
 80003e4:	040e      	lsls	r6, r1, #16
 80003e6:	0c1b      	lsrs	r3, r3, #16
 80003e8:	001f      	movs	r7, r3
 80003ea:	9302      	str	r3, [sp, #8]
 80003ec:	9b00      	ldr	r3, [sp, #0]
 80003ee:	0c36      	lsrs	r6, r6, #16
 80003f0:	041b      	lsls	r3, r3, #16
 80003f2:	0c19      	lsrs	r1, r3, #16
 80003f4:	000b      	movs	r3, r1
 80003f6:	4373      	muls	r3, r6
 80003f8:	0c12      	lsrs	r2, r2, #16
 80003fa:	437e      	muls	r6, r7
 80003fc:	9103      	str	r1, [sp, #12]
 80003fe:	4351      	muls	r1, r2
 8000400:	437a      	muls	r2, r7
 8000402:	0c1f      	lsrs	r7, r3, #16
 8000404:	46bc      	mov	ip, r7
 8000406:	1876      	adds	r6, r6, r1
 8000408:	4466      	add	r6, ip
 800040a:	42b1      	cmp	r1, r6
 800040c:	d903      	bls.n	8000416 <__aeabi_ddiv+0x196>
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	0249      	lsls	r1, r1, #9
 8000412:	468c      	mov	ip, r1
 8000414:	4462      	add	r2, ip
 8000416:	0c31      	lsrs	r1, r6, #16
 8000418:	188a      	adds	r2, r1, r2
 800041a:	0431      	lsls	r1, r6, #16
 800041c:	041e      	lsls	r6, r3, #16
 800041e:	0c36      	lsrs	r6, r6, #16
 8000420:	198e      	adds	r6, r1, r6
 8000422:	4290      	cmp	r0, r2
 8000424:	d302      	bcc.n	800042c <__aeabi_ddiv+0x1ac>
 8000426:	d112      	bne.n	800044e <__aeabi_ddiv+0x1ce>
 8000428:	42b5      	cmp	r5, r6
 800042a:	d210      	bcs.n	800044e <__aeabi_ddiv+0x1ce>
 800042c:	4643      	mov	r3, r8
 800042e:	1e59      	subs	r1, r3, #1
 8000430:	9b00      	ldr	r3, [sp, #0]
 8000432:	469c      	mov	ip, r3
 8000434:	4465      	add	r5, ip
 8000436:	001f      	movs	r7, r3
 8000438:	429d      	cmp	r5, r3
 800043a:	419b      	sbcs	r3, r3
 800043c:	425b      	negs	r3, r3
 800043e:	191b      	adds	r3, r3, r4
 8000440:	18c0      	adds	r0, r0, r3
 8000442:	4284      	cmp	r4, r0
 8000444:	d200      	bcs.n	8000448 <__aeabi_ddiv+0x1c8>
 8000446:	e1a0      	b.n	800078a <__aeabi_ddiv+0x50a>
 8000448:	d100      	bne.n	800044c <__aeabi_ddiv+0x1cc>
 800044a:	e19b      	b.n	8000784 <__aeabi_ddiv+0x504>
 800044c:	4688      	mov	r8, r1
 800044e:	1bae      	subs	r6, r5, r6
 8000450:	42b5      	cmp	r5, r6
 8000452:	41ad      	sbcs	r5, r5
 8000454:	1a80      	subs	r0, r0, r2
 8000456:	426d      	negs	r5, r5
 8000458:	1b40      	subs	r0, r0, r5
 800045a:	4284      	cmp	r4, r0
 800045c:	d100      	bne.n	8000460 <__aeabi_ddiv+0x1e0>
 800045e:	e1d5      	b.n	800080c <__aeabi_ddiv+0x58c>
 8000460:	4649      	mov	r1, r9
 8000462:	f7ff fee9 	bl	8000238 <__aeabi_uidivmod>
 8000466:	9a01      	ldr	r2, [sp, #4]
 8000468:	040b      	lsls	r3, r1, #16
 800046a:	4342      	muls	r2, r0
 800046c:	0c31      	lsrs	r1, r6, #16
 800046e:	0005      	movs	r5, r0
 8000470:	4319      	orrs	r1, r3
 8000472:	428a      	cmp	r2, r1
 8000474:	d900      	bls.n	8000478 <__aeabi_ddiv+0x1f8>
 8000476:	e16c      	b.n	8000752 <__aeabi_ddiv+0x4d2>
 8000478:	1a88      	subs	r0, r1, r2
 800047a:	4649      	mov	r1, r9
 800047c:	f7ff fedc 	bl	8000238 <__aeabi_uidivmod>
 8000480:	9a01      	ldr	r2, [sp, #4]
 8000482:	0436      	lsls	r6, r6, #16
 8000484:	4342      	muls	r2, r0
 8000486:	0409      	lsls	r1, r1, #16
 8000488:	0c36      	lsrs	r6, r6, #16
 800048a:	0003      	movs	r3, r0
 800048c:	430e      	orrs	r6, r1
 800048e:	42b2      	cmp	r2, r6
 8000490:	d900      	bls.n	8000494 <__aeabi_ddiv+0x214>
 8000492:	e153      	b.n	800073c <__aeabi_ddiv+0x4bc>
 8000494:	9803      	ldr	r0, [sp, #12]
 8000496:	1ab6      	subs	r6, r6, r2
 8000498:	0002      	movs	r2, r0
 800049a:	042d      	lsls	r5, r5, #16
 800049c:	431d      	orrs	r5, r3
 800049e:	9f02      	ldr	r7, [sp, #8]
 80004a0:	042b      	lsls	r3, r5, #16
 80004a2:	0c1b      	lsrs	r3, r3, #16
 80004a4:	435a      	muls	r2, r3
 80004a6:	437b      	muls	r3, r7
 80004a8:	469c      	mov	ip, r3
 80004aa:	0c29      	lsrs	r1, r5, #16
 80004ac:	4348      	muls	r0, r1
 80004ae:	0c13      	lsrs	r3, r2, #16
 80004b0:	4484      	add	ip, r0
 80004b2:	4463      	add	r3, ip
 80004b4:	4379      	muls	r1, r7
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d903      	bls.n	80004c2 <__aeabi_ddiv+0x242>
 80004ba:	2080      	movs	r0, #128	; 0x80
 80004bc:	0240      	lsls	r0, r0, #9
 80004be:	4684      	mov	ip, r0
 80004c0:	4461      	add	r1, ip
 80004c2:	0c18      	lsrs	r0, r3, #16
 80004c4:	0412      	lsls	r2, r2, #16
 80004c6:	041b      	lsls	r3, r3, #16
 80004c8:	0c12      	lsrs	r2, r2, #16
 80004ca:	1841      	adds	r1, r0, r1
 80004cc:	189b      	adds	r3, r3, r2
 80004ce:	428e      	cmp	r6, r1
 80004d0:	d200      	bcs.n	80004d4 <__aeabi_ddiv+0x254>
 80004d2:	e0ff      	b.n	80006d4 <__aeabi_ddiv+0x454>
 80004d4:	d100      	bne.n	80004d8 <__aeabi_ddiv+0x258>
 80004d6:	e0fa      	b.n	80006ce <__aeabi_ddiv+0x44e>
 80004d8:	2301      	movs	r3, #1
 80004da:	431d      	orrs	r5, r3
 80004dc:	4a49      	ldr	r2, [pc, #292]	; (8000604 <__aeabi_ddiv+0x384>)
 80004de:	445a      	add	r2, fp
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_ddiv+0x266>
 80004e4:	e0aa      	b.n	800063c <__aeabi_ddiv+0x3bc>
 80004e6:	076b      	lsls	r3, r5, #29
 80004e8:	d000      	beq.n	80004ec <__aeabi_ddiv+0x26c>
 80004ea:	e13d      	b.n	8000768 <__aeabi_ddiv+0x4e8>
 80004ec:	08ed      	lsrs	r5, r5, #3
 80004ee:	4643      	mov	r3, r8
 80004f0:	01db      	lsls	r3, r3, #7
 80004f2:	d506      	bpl.n	8000502 <__aeabi_ddiv+0x282>
 80004f4:	4642      	mov	r2, r8
 80004f6:	4b44      	ldr	r3, [pc, #272]	; (8000608 <__aeabi_ddiv+0x388>)
 80004f8:	401a      	ands	r2, r3
 80004fa:	4690      	mov	r8, r2
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	00d2      	lsls	r2, r2, #3
 8000500:	445a      	add	r2, fp
 8000502:	4b42      	ldr	r3, [pc, #264]	; (800060c <__aeabi_ddiv+0x38c>)
 8000504:	429a      	cmp	r2, r3
 8000506:	dd00      	ble.n	800050a <__aeabi_ddiv+0x28a>
 8000508:	e71f      	b.n	800034a <__aeabi_ddiv+0xca>
 800050a:	4643      	mov	r3, r8
 800050c:	075b      	lsls	r3, r3, #29
 800050e:	431d      	orrs	r5, r3
 8000510:	4643      	mov	r3, r8
 8000512:	0552      	lsls	r2, r2, #21
 8000514:	025c      	lsls	r4, r3, #9
 8000516:	0b24      	lsrs	r4, r4, #12
 8000518:	0d53      	lsrs	r3, r2, #21
 800051a:	e708      	b.n	800032e <__aeabi_ddiv+0xae>
 800051c:	4652      	mov	r2, sl
 800051e:	4322      	orrs	r2, r4
 8000520:	d100      	bne.n	8000524 <__aeabi_ddiv+0x2a4>
 8000522:	e07b      	b.n	800061c <__aeabi_ddiv+0x39c>
 8000524:	2c00      	cmp	r4, #0
 8000526:	d100      	bne.n	800052a <__aeabi_ddiv+0x2aa>
 8000528:	e0fa      	b.n	8000720 <__aeabi_ddiv+0x4a0>
 800052a:	0020      	movs	r0, r4
 800052c:	f000 fdca 	bl	80010c4 <__clzsi2>
 8000530:	0002      	movs	r2, r0
 8000532:	3a0b      	subs	r2, #11
 8000534:	231d      	movs	r3, #29
 8000536:	0001      	movs	r1, r0
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	4652      	mov	r2, sl
 800053c:	3908      	subs	r1, #8
 800053e:	40da      	lsrs	r2, r3
 8000540:	408c      	lsls	r4, r1
 8000542:	4314      	orrs	r4, r2
 8000544:	4652      	mov	r2, sl
 8000546:	408a      	lsls	r2, r1
 8000548:	4b31      	ldr	r3, [pc, #196]	; (8000610 <__aeabi_ddiv+0x390>)
 800054a:	4458      	add	r0, fp
 800054c:	469b      	mov	fp, r3
 800054e:	4483      	add	fp, r0
 8000550:	2000      	movs	r0, #0
 8000552:	e6d5      	b.n	8000300 <__aeabi_ddiv+0x80>
 8000554:	464b      	mov	r3, r9
 8000556:	4323      	orrs	r3, r4
 8000558:	4698      	mov	r8, r3
 800055a:	d044      	beq.n	80005e6 <__aeabi_ddiv+0x366>
 800055c:	2c00      	cmp	r4, #0
 800055e:	d100      	bne.n	8000562 <__aeabi_ddiv+0x2e2>
 8000560:	e0ce      	b.n	8000700 <__aeabi_ddiv+0x480>
 8000562:	0020      	movs	r0, r4
 8000564:	f000 fdae 	bl	80010c4 <__clzsi2>
 8000568:	0001      	movs	r1, r0
 800056a:	0002      	movs	r2, r0
 800056c:	390b      	subs	r1, #11
 800056e:	231d      	movs	r3, #29
 8000570:	1a5b      	subs	r3, r3, r1
 8000572:	4649      	mov	r1, r9
 8000574:	0010      	movs	r0, r2
 8000576:	40d9      	lsrs	r1, r3
 8000578:	3808      	subs	r0, #8
 800057a:	4084      	lsls	r4, r0
 800057c:	000b      	movs	r3, r1
 800057e:	464d      	mov	r5, r9
 8000580:	4323      	orrs	r3, r4
 8000582:	4698      	mov	r8, r3
 8000584:	4085      	lsls	r5, r0
 8000586:	4823      	ldr	r0, [pc, #140]	; (8000614 <__aeabi_ddiv+0x394>)
 8000588:	1a83      	subs	r3, r0, r2
 800058a:	469b      	mov	fp, r3
 800058c:	2300      	movs	r3, #0
 800058e:	4699      	mov	r9, r3
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	e69a      	b.n	80002ca <__aeabi_ddiv+0x4a>
 8000594:	464b      	mov	r3, r9
 8000596:	4323      	orrs	r3, r4
 8000598:	4698      	mov	r8, r3
 800059a:	d11d      	bne.n	80005d8 <__aeabi_ddiv+0x358>
 800059c:	2308      	movs	r3, #8
 800059e:	4699      	mov	r9, r3
 80005a0:	3b06      	subs	r3, #6
 80005a2:	2500      	movs	r5, #0
 80005a4:	4683      	mov	fp, r0
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	e68f      	b.n	80002ca <__aeabi_ddiv+0x4a>
 80005aa:	4652      	mov	r2, sl
 80005ac:	4322      	orrs	r2, r4
 80005ae:	d109      	bne.n	80005c4 <__aeabi_ddiv+0x344>
 80005b0:	2302      	movs	r3, #2
 80005b2:	4649      	mov	r1, r9
 80005b4:	4319      	orrs	r1, r3
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <__aeabi_ddiv+0x398>)
 80005b8:	4689      	mov	r9, r1
 80005ba:	469c      	mov	ip, r3
 80005bc:	2400      	movs	r4, #0
 80005be:	2002      	movs	r0, #2
 80005c0:	44e3      	add	fp, ip
 80005c2:	e69d      	b.n	8000300 <__aeabi_ddiv+0x80>
 80005c4:	2303      	movs	r3, #3
 80005c6:	464a      	mov	r2, r9
 80005c8:	431a      	orrs	r2, r3
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <__aeabi_ddiv+0x398>)
 80005cc:	4691      	mov	r9, r2
 80005ce:	469c      	mov	ip, r3
 80005d0:	4652      	mov	r2, sl
 80005d2:	2003      	movs	r0, #3
 80005d4:	44e3      	add	fp, ip
 80005d6:	e693      	b.n	8000300 <__aeabi_ddiv+0x80>
 80005d8:	230c      	movs	r3, #12
 80005da:	4699      	mov	r9, r3
 80005dc:	3b09      	subs	r3, #9
 80005de:	46a0      	mov	r8, r4
 80005e0:	4683      	mov	fp, r0
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	e671      	b.n	80002ca <__aeabi_ddiv+0x4a>
 80005e6:	2304      	movs	r3, #4
 80005e8:	4699      	mov	r9, r3
 80005ea:	2300      	movs	r3, #0
 80005ec:	469b      	mov	fp, r3
 80005ee:	3301      	adds	r3, #1
 80005f0:	2500      	movs	r5, #0
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	e669      	b.n	80002ca <__aeabi_ddiv+0x4a>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	000007ff 	.word	0x000007ff
 80005fc:	fffffc01 	.word	0xfffffc01
 8000600:	08007040 	.word	0x08007040
 8000604:	000003ff 	.word	0x000003ff
 8000608:	feffffff 	.word	0xfeffffff
 800060c:	000007fe 	.word	0x000007fe
 8000610:	000003f3 	.word	0x000003f3
 8000614:	fffffc0d 	.word	0xfffffc0d
 8000618:	fffff801 	.word	0xfffff801
 800061c:	4649      	mov	r1, r9
 800061e:	2301      	movs	r3, #1
 8000620:	4319      	orrs	r1, r3
 8000622:	4689      	mov	r9, r1
 8000624:	2400      	movs	r4, #0
 8000626:	2001      	movs	r0, #1
 8000628:	e66a      	b.n	8000300 <__aeabi_ddiv+0x80>
 800062a:	2300      	movs	r3, #0
 800062c:	2480      	movs	r4, #128	; 0x80
 800062e:	469a      	mov	sl, r3
 8000630:	2500      	movs	r5, #0
 8000632:	4b8a      	ldr	r3, [pc, #552]	; (800085c <__aeabi_ddiv+0x5dc>)
 8000634:	0324      	lsls	r4, r4, #12
 8000636:	e67a      	b.n	800032e <__aeabi_ddiv+0xae>
 8000638:	2501      	movs	r5, #1
 800063a:	426d      	negs	r5, r5
 800063c:	2301      	movs	r3, #1
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	2b38      	cmp	r3, #56	; 0x38
 8000642:	dd00      	ble.n	8000646 <__aeabi_ddiv+0x3c6>
 8000644:	e670      	b.n	8000328 <__aeabi_ddiv+0xa8>
 8000646:	2b1f      	cmp	r3, #31
 8000648:	dc00      	bgt.n	800064c <__aeabi_ddiv+0x3cc>
 800064a:	e0bf      	b.n	80007cc <__aeabi_ddiv+0x54c>
 800064c:	211f      	movs	r1, #31
 800064e:	4249      	negs	r1, r1
 8000650:	1a8a      	subs	r2, r1, r2
 8000652:	4641      	mov	r1, r8
 8000654:	40d1      	lsrs	r1, r2
 8000656:	000a      	movs	r2, r1
 8000658:	2b20      	cmp	r3, #32
 800065a:	d004      	beq.n	8000666 <__aeabi_ddiv+0x3e6>
 800065c:	4641      	mov	r1, r8
 800065e:	4b80      	ldr	r3, [pc, #512]	; (8000860 <__aeabi_ddiv+0x5e0>)
 8000660:	445b      	add	r3, fp
 8000662:	4099      	lsls	r1, r3
 8000664:	430d      	orrs	r5, r1
 8000666:	1e6b      	subs	r3, r5, #1
 8000668:	419d      	sbcs	r5, r3
 800066a:	2307      	movs	r3, #7
 800066c:	432a      	orrs	r2, r5
 800066e:	001d      	movs	r5, r3
 8000670:	2400      	movs	r4, #0
 8000672:	4015      	ands	r5, r2
 8000674:	4213      	tst	r3, r2
 8000676:	d100      	bne.n	800067a <__aeabi_ddiv+0x3fa>
 8000678:	e0d4      	b.n	8000824 <__aeabi_ddiv+0x5a4>
 800067a:	210f      	movs	r1, #15
 800067c:	2300      	movs	r3, #0
 800067e:	4011      	ands	r1, r2
 8000680:	2904      	cmp	r1, #4
 8000682:	d100      	bne.n	8000686 <__aeabi_ddiv+0x406>
 8000684:	e0cb      	b.n	800081e <__aeabi_ddiv+0x59e>
 8000686:	1d11      	adds	r1, r2, #4
 8000688:	4291      	cmp	r1, r2
 800068a:	4192      	sbcs	r2, r2
 800068c:	4252      	negs	r2, r2
 800068e:	189b      	adds	r3, r3, r2
 8000690:	000a      	movs	r2, r1
 8000692:	0219      	lsls	r1, r3, #8
 8000694:	d400      	bmi.n	8000698 <__aeabi_ddiv+0x418>
 8000696:	e0c2      	b.n	800081e <__aeabi_ddiv+0x59e>
 8000698:	2301      	movs	r3, #1
 800069a:	2400      	movs	r4, #0
 800069c:	2500      	movs	r5, #0
 800069e:	e646      	b.n	800032e <__aeabi_ddiv+0xae>
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	4641      	mov	r1, r8
 80006a4:	031b      	lsls	r3, r3, #12
 80006a6:	4219      	tst	r1, r3
 80006a8:	d008      	beq.n	80006bc <__aeabi_ddiv+0x43c>
 80006aa:	421c      	tst	r4, r3
 80006ac:	d106      	bne.n	80006bc <__aeabi_ddiv+0x43c>
 80006ae:	431c      	orrs	r4, r3
 80006b0:	0324      	lsls	r4, r4, #12
 80006b2:	46ba      	mov	sl, r7
 80006b4:	0015      	movs	r5, r2
 80006b6:	4b69      	ldr	r3, [pc, #420]	; (800085c <__aeabi_ddiv+0x5dc>)
 80006b8:	0b24      	lsrs	r4, r4, #12
 80006ba:	e638      	b.n	800032e <__aeabi_ddiv+0xae>
 80006bc:	2480      	movs	r4, #128	; 0x80
 80006be:	4643      	mov	r3, r8
 80006c0:	0324      	lsls	r4, r4, #12
 80006c2:	431c      	orrs	r4, r3
 80006c4:	0324      	lsls	r4, r4, #12
 80006c6:	46b2      	mov	sl, r6
 80006c8:	4b64      	ldr	r3, [pc, #400]	; (800085c <__aeabi_ddiv+0x5dc>)
 80006ca:	0b24      	lsrs	r4, r4, #12
 80006cc:	e62f      	b.n	800032e <__aeabi_ddiv+0xae>
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_ddiv+0x454>
 80006d2:	e703      	b.n	80004dc <__aeabi_ddiv+0x25c>
 80006d4:	19a6      	adds	r6, r4, r6
 80006d6:	1e68      	subs	r0, r5, #1
 80006d8:	42a6      	cmp	r6, r4
 80006da:	d200      	bcs.n	80006de <__aeabi_ddiv+0x45e>
 80006dc:	e08d      	b.n	80007fa <__aeabi_ddiv+0x57a>
 80006de:	428e      	cmp	r6, r1
 80006e0:	d200      	bcs.n	80006e4 <__aeabi_ddiv+0x464>
 80006e2:	e0a3      	b.n	800082c <__aeabi_ddiv+0x5ac>
 80006e4:	d100      	bne.n	80006e8 <__aeabi_ddiv+0x468>
 80006e6:	e0b3      	b.n	8000850 <__aeabi_ddiv+0x5d0>
 80006e8:	0005      	movs	r5, r0
 80006ea:	e6f5      	b.n	80004d8 <__aeabi_ddiv+0x258>
 80006ec:	42aa      	cmp	r2, r5
 80006ee:	d900      	bls.n	80006f2 <__aeabi_ddiv+0x472>
 80006f0:	e639      	b.n	8000366 <__aeabi_ddiv+0xe6>
 80006f2:	4643      	mov	r3, r8
 80006f4:	07de      	lsls	r6, r3, #31
 80006f6:	0858      	lsrs	r0, r3, #1
 80006f8:	086b      	lsrs	r3, r5, #1
 80006fa:	431e      	orrs	r6, r3
 80006fc:	07ed      	lsls	r5, r5, #31
 80006fe:	e639      	b.n	8000374 <__aeabi_ddiv+0xf4>
 8000700:	4648      	mov	r0, r9
 8000702:	f000 fcdf 	bl	80010c4 <__clzsi2>
 8000706:	0001      	movs	r1, r0
 8000708:	0002      	movs	r2, r0
 800070a:	3115      	adds	r1, #21
 800070c:	3220      	adds	r2, #32
 800070e:	291c      	cmp	r1, #28
 8000710:	dc00      	bgt.n	8000714 <__aeabi_ddiv+0x494>
 8000712:	e72c      	b.n	800056e <__aeabi_ddiv+0x2ee>
 8000714:	464b      	mov	r3, r9
 8000716:	3808      	subs	r0, #8
 8000718:	4083      	lsls	r3, r0
 800071a:	2500      	movs	r5, #0
 800071c:	4698      	mov	r8, r3
 800071e:	e732      	b.n	8000586 <__aeabi_ddiv+0x306>
 8000720:	f000 fcd0 	bl	80010c4 <__clzsi2>
 8000724:	0003      	movs	r3, r0
 8000726:	001a      	movs	r2, r3
 8000728:	3215      	adds	r2, #21
 800072a:	3020      	adds	r0, #32
 800072c:	2a1c      	cmp	r2, #28
 800072e:	dc00      	bgt.n	8000732 <__aeabi_ddiv+0x4b2>
 8000730:	e700      	b.n	8000534 <__aeabi_ddiv+0x2b4>
 8000732:	4654      	mov	r4, sl
 8000734:	3b08      	subs	r3, #8
 8000736:	2200      	movs	r2, #0
 8000738:	409c      	lsls	r4, r3
 800073a:	e705      	b.n	8000548 <__aeabi_ddiv+0x2c8>
 800073c:	1936      	adds	r6, r6, r4
 800073e:	3b01      	subs	r3, #1
 8000740:	42b4      	cmp	r4, r6
 8000742:	d900      	bls.n	8000746 <__aeabi_ddiv+0x4c6>
 8000744:	e6a6      	b.n	8000494 <__aeabi_ddiv+0x214>
 8000746:	42b2      	cmp	r2, r6
 8000748:	d800      	bhi.n	800074c <__aeabi_ddiv+0x4cc>
 800074a:	e6a3      	b.n	8000494 <__aeabi_ddiv+0x214>
 800074c:	1e83      	subs	r3, r0, #2
 800074e:	1936      	adds	r6, r6, r4
 8000750:	e6a0      	b.n	8000494 <__aeabi_ddiv+0x214>
 8000752:	1909      	adds	r1, r1, r4
 8000754:	3d01      	subs	r5, #1
 8000756:	428c      	cmp	r4, r1
 8000758:	d900      	bls.n	800075c <__aeabi_ddiv+0x4dc>
 800075a:	e68d      	b.n	8000478 <__aeabi_ddiv+0x1f8>
 800075c:	428a      	cmp	r2, r1
 800075e:	d800      	bhi.n	8000762 <__aeabi_ddiv+0x4e2>
 8000760:	e68a      	b.n	8000478 <__aeabi_ddiv+0x1f8>
 8000762:	1e85      	subs	r5, r0, #2
 8000764:	1909      	adds	r1, r1, r4
 8000766:	e687      	b.n	8000478 <__aeabi_ddiv+0x1f8>
 8000768:	230f      	movs	r3, #15
 800076a:	402b      	ands	r3, r5
 800076c:	2b04      	cmp	r3, #4
 800076e:	d100      	bne.n	8000772 <__aeabi_ddiv+0x4f2>
 8000770:	e6bc      	b.n	80004ec <__aeabi_ddiv+0x26c>
 8000772:	2305      	movs	r3, #5
 8000774:	425b      	negs	r3, r3
 8000776:	42ab      	cmp	r3, r5
 8000778:	419b      	sbcs	r3, r3
 800077a:	3504      	adds	r5, #4
 800077c:	425b      	negs	r3, r3
 800077e:	08ed      	lsrs	r5, r5, #3
 8000780:	4498      	add	r8, r3
 8000782:	e6b4      	b.n	80004ee <__aeabi_ddiv+0x26e>
 8000784:	42af      	cmp	r7, r5
 8000786:	d900      	bls.n	800078a <__aeabi_ddiv+0x50a>
 8000788:	e660      	b.n	800044c <__aeabi_ddiv+0x1cc>
 800078a:	4282      	cmp	r2, r0
 800078c:	d804      	bhi.n	8000798 <__aeabi_ddiv+0x518>
 800078e:	d000      	beq.n	8000792 <__aeabi_ddiv+0x512>
 8000790:	e65c      	b.n	800044c <__aeabi_ddiv+0x1cc>
 8000792:	42ae      	cmp	r6, r5
 8000794:	d800      	bhi.n	8000798 <__aeabi_ddiv+0x518>
 8000796:	e659      	b.n	800044c <__aeabi_ddiv+0x1cc>
 8000798:	2302      	movs	r3, #2
 800079a:	425b      	negs	r3, r3
 800079c:	469c      	mov	ip, r3
 800079e:	9b00      	ldr	r3, [sp, #0]
 80007a0:	44e0      	add	r8, ip
 80007a2:	469c      	mov	ip, r3
 80007a4:	4465      	add	r5, ip
 80007a6:	429d      	cmp	r5, r3
 80007a8:	419b      	sbcs	r3, r3
 80007aa:	425b      	negs	r3, r3
 80007ac:	191b      	adds	r3, r3, r4
 80007ae:	18c0      	adds	r0, r0, r3
 80007b0:	e64d      	b.n	800044e <__aeabi_ddiv+0x1ce>
 80007b2:	428a      	cmp	r2, r1
 80007b4:	d800      	bhi.n	80007b8 <__aeabi_ddiv+0x538>
 80007b6:	e60e      	b.n	80003d6 <__aeabi_ddiv+0x156>
 80007b8:	1e83      	subs	r3, r0, #2
 80007ba:	1909      	adds	r1, r1, r4
 80007bc:	e60b      	b.n	80003d6 <__aeabi_ddiv+0x156>
 80007be:	428a      	cmp	r2, r1
 80007c0:	d800      	bhi.n	80007c4 <__aeabi_ddiv+0x544>
 80007c2:	e5f4      	b.n	80003ae <__aeabi_ddiv+0x12e>
 80007c4:	1e83      	subs	r3, r0, #2
 80007c6:	4698      	mov	r8, r3
 80007c8:	1909      	adds	r1, r1, r4
 80007ca:	e5f0      	b.n	80003ae <__aeabi_ddiv+0x12e>
 80007cc:	4925      	ldr	r1, [pc, #148]	; (8000864 <__aeabi_ddiv+0x5e4>)
 80007ce:	0028      	movs	r0, r5
 80007d0:	4459      	add	r1, fp
 80007d2:	408d      	lsls	r5, r1
 80007d4:	4642      	mov	r2, r8
 80007d6:	408a      	lsls	r2, r1
 80007d8:	1e69      	subs	r1, r5, #1
 80007da:	418d      	sbcs	r5, r1
 80007dc:	4641      	mov	r1, r8
 80007de:	40d8      	lsrs	r0, r3
 80007e0:	40d9      	lsrs	r1, r3
 80007e2:	4302      	orrs	r2, r0
 80007e4:	432a      	orrs	r2, r5
 80007e6:	000b      	movs	r3, r1
 80007e8:	0751      	lsls	r1, r2, #29
 80007ea:	d100      	bne.n	80007ee <__aeabi_ddiv+0x56e>
 80007ec:	e751      	b.n	8000692 <__aeabi_ddiv+0x412>
 80007ee:	210f      	movs	r1, #15
 80007f0:	4011      	ands	r1, r2
 80007f2:	2904      	cmp	r1, #4
 80007f4:	d000      	beq.n	80007f8 <__aeabi_ddiv+0x578>
 80007f6:	e746      	b.n	8000686 <__aeabi_ddiv+0x406>
 80007f8:	e74b      	b.n	8000692 <__aeabi_ddiv+0x412>
 80007fa:	0005      	movs	r5, r0
 80007fc:	428e      	cmp	r6, r1
 80007fe:	d000      	beq.n	8000802 <__aeabi_ddiv+0x582>
 8000800:	e66a      	b.n	80004d8 <__aeabi_ddiv+0x258>
 8000802:	9a00      	ldr	r2, [sp, #0]
 8000804:	4293      	cmp	r3, r2
 8000806:	d000      	beq.n	800080a <__aeabi_ddiv+0x58a>
 8000808:	e666      	b.n	80004d8 <__aeabi_ddiv+0x258>
 800080a:	e667      	b.n	80004dc <__aeabi_ddiv+0x25c>
 800080c:	4a16      	ldr	r2, [pc, #88]	; (8000868 <__aeabi_ddiv+0x5e8>)
 800080e:	445a      	add	r2, fp
 8000810:	2a00      	cmp	r2, #0
 8000812:	dc00      	bgt.n	8000816 <__aeabi_ddiv+0x596>
 8000814:	e710      	b.n	8000638 <__aeabi_ddiv+0x3b8>
 8000816:	2301      	movs	r3, #1
 8000818:	2500      	movs	r5, #0
 800081a:	4498      	add	r8, r3
 800081c:	e667      	b.n	80004ee <__aeabi_ddiv+0x26e>
 800081e:	075d      	lsls	r5, r3, #29
 8000820:	025b      	lsls	r3, r3, #9
 8000822:	0b1c      	lsrs	r4, r3, #12
 8000824:	08d2      	lsrs	r2, r2, #3
 8000826:	2300      	movs	r3, #0
 8000828:	4315      	orrs	r5, r2
 800082a:	e580      	b.n	800032e <__aeabi_ddiv+0xae>
 800082c:	9800      	ldr	r0, [sp, #0]
 800082e:	3d02      	subs	r5, #2
 8000830:	0042      	lsls	r2, r0, #1
 8000832:	4282      	cmp	r2, r0
 8000834:	41bf      	sbcs	r7, r7
 8000836:	427f      	negs	r7, r7
 8000838:	193c      	adds	r4, r7, r4
 800083a:	1936      	adds	r6, r6, r4
 800083c:	9200      	str	r2, [sp, #0]
 800083e:	e7dd      	b.n	80007fc <__aeabi_ddiv+0x57c>
 8000840:	2480      	movs	r4, #128	; 0x80
 8000842:	4643      	mov	r3, r8
 8000844:	0324      	lsls	r4, r4, #12
 8000846:	431c      	orrs	r4, r3
 8000848:	0324      	lsls	r4, r4, #12
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <__aeabi_ddiv+0x5dc>)
 800084c:	0b24      	lsrs	r4, r4, #12
 800084e:	e56e      	b.n	800032e <__aeabi_ddiv+0xae>
 8000850:	9a00      	ldr	r2, [sp, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d3ea      	bcc.n	800082c <__aeabi_ddiv+0x5ac>
 8000856:	0005      	movs	r5, r0
 8000858:	e7d3      	b.n	8000802 <__aeabi_ddiv+0x582>
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	000007ff 	.word	0x000007ff
 8000860:	0000043e 	.word	0x0000043e
 8000864:	0000041e 	.word	0x0000041e
 8000868:	000003ff 	.word	0x000003ff

0800086c <__aeabi_dsub>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	4657      	mov	r7, sl
 8000870:	464e      	mov	r6, r9
 8000872:	4645      	mov	r5, r8
 8000874:	46de      	mov	lr, fp
 8000876:	b5e0      	push	{r5, r6, r7, lr}
 8000878:	001e      	movs	r6, r3
 800087a:	0017      	movs	r7, r2
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	030b      	lsls	r3, r1, #12
 8000880:	0d52      	lsrs	r2, r2, #21
 8000882:	0a5b      	lsrs	r3, r3, #9
 8000884:	4690      	mov	r8, r2
 8000886:	0f42      	lsrs	r2, r0, #29
 8000888:	431a      	orrs	r2, r3
 800088a:	0fcd      	lsrs	r5, r1, #31
 800088c:	4ccd      	ldr	r4, [pc, #820]	; (8000bc4 <__aeabi_dsub+0x358>)
 800088e:	0331      	lsls	r1, r6, #12
 8000890:	00c3      	lsls	r3, r0, #3
 8000892:	4694      	mov	ip, r2
 8000894:	0070      	lsls	r0, r6, #1
 8000896:	0f7a      	lsrs	r2, r7, #29
 8000898:	0a49      	lsrs	r1, r1, #9
 800089a:	00ff      	lsls	r7, r7, #3
 800089c:	469a      	mov	sl, r3
 800089e:	46b9      	mov	r9, r7
 80008a0:	0d40      	lsrs	r0, r0, #21
 80008a2:	0ff6      	lsrs	r6, r6, #31
 80008a4:	4311      	orrs	r1, r2
 80008a6:	42a0      	cmp	r0, r4
 80008a8:	d100      	bne.n	80008ac <__aeabi_dsub+0x40>
 80008aa:	e0b1      	b.n	8000a10 <__aeabi_dsub+0x1a4>
 80008ac:	2201      	movs	r2, #1
 80008ae:	4056      	eors	r6, r2
 80008b0:	46b3      	mov	fp, r6
 80008b2:	42b5      	cmp	r5, r6
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dsub+0x4c>
 80008b6:	e088      	b.n	80009ca <__aeabi_dsub+0x15e>
 80008b8:	4642      	mov	r2, r8
 80008ba:	1a12      	subs	r2, r2, r0
 80008bc:	2a00      	cmp	r2, #0
 80008be:	dc00      	bgt.n	80008c2 <__aeabi_dsub+0x56>
 80008c0:	e0ae      	b.n	8000a20 <__aeabi_dsub+0x1b4>
 80008c2:	2800      	cmp	r0, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_dsub+0x5c>
 80008c6:	e0c1      	b.n	8000a4c <__aeabi_dsub+0x1e0>
 80008c8:	48be      	ldr	r0, [pc, #760]	; (8000bc4 <__aeabi_dsub+0x358>)
 80008ca:	4580      	cmp	r8, r0
 80008cc:	d100      	bne.n	80008d0 <__aeabi_dsub+0x64>
 80008ce:	e151      	b.n	8000b74 <__aeabi_dsub+0x308>
 80008d0:	2080      	movs	r0, #128	; 0x80
 80008d2:	0400      	lsls	r0, r0, #16
 80008d4:	4301      	orrs	r1, r0
 80008d6:	2a38      	cmp	r2, #56	; 0x38
 80008d8:	dd00      	ble.n	80008dc <__aeabi_dsub+0x70>
 80008da:	e17b      	b.n	8000bd4 <__aeabi_dsub+0x368>
 80008dc:	2a1f      	cmp	r2, #31
 80008de:	dd00      	ble.n	80008e2 <__aeabi_dsub+0x76>
 80008e0:	e1ee      	b.n	8000cc0 <__aeabi_dsub+0x454>
 80008e2:	2020      	movs	r0, #32
 80008e4:	003e      	movs	r6, r7
 80008e6:	1a80      	subs	r0, r0, r2
 80008e8:	000c      	movs	r4, r1
 80008ea:	40d6      	lsrs	r6, r2
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	4087      	lsls	r7, r0
 80008f0:	4662      	mov	r2, ip
 80008f2:	4084      	lsls	r4, r0
 80008f4:	1a52      	subs	r2, r2, r1
 80008f6:	1e78      	subs	r0, r7, #1
 80008f8:	4187      	sbcs	r7, r0
 80008fa:	4694      	mov	ip, r2
 80008fc:	4334      	orrs	r4, r6
 80008fe:	4327      	orrs	r7, r4
 8000900:	1bdc      	subs	r4, r3, r7
 8000902:	42a3      	cmp	r3, r4
 8000904:	419b      	sbcs	r3, r3
 8000906:	4662      	mov	r2, ip
 8000908:	425b      	negs	r3, r3
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	4699      	mov	r9, r3
 800090e:	464b      	mov	r3, r9
 8000910:	021b      	lsls	r3, r3, #8
 8000912:	d400      	bmi.n	8000916 <__aeabi_dsub+0xaa>
 8000914:	e118      	b.n	8000b48 <__aeabi_dsub+0x2dc>
 8000916:	464b      	mov	r3, r9
 8000918:	0258      	lsls	r0, r3, #9
 800091a:	0a43      	lsrs	r3, r0, #9
 800091c:	4699      	mov	r9, r3
 800091e:	464b      	mov	r3, r9
 8000920:	2b00      	cmp	r3, #0
 8000922:	d100      	bne.n	8000926 <__aeabi_dsub+0xba>
 8000924:	e137      	b.n	8000b96 <__aeabi_dsub+0x32a>
 8000926:	4648      	mov	r0, r9
 8000928:	f000 fbcc 	bl	80010c4 <__clzsi2>
 800092c:	0001      	movs	r1, r0
 800092e:	3908      	subs	r1, #8
 8000930:	2320      	movs	r3, #32
 8000932:	0022      	movs	r2, r4
 8000934:	4648      	mov	r0, r9
 8000936:	1a5b      	subs	r3, r3, r1
 8000938:	40da      	lsrs	r2, r3
 800093a:	4088      	lsls	r0, r1
 800093c:	408c      	lsls	r4, r1
 800093e:	4643      	mov	r3, r8
 8000940:	4310      	orrs	r0, r2
 8000942:	4588      	cmp	r8, r1
 8000944:	dd00      	ble.n	8000948 <__aeabi_dsub+0xdc>
 8000946:	e136      	b.n	8000bb6 <__aeabi_dsub+0x34a>
 8000948:	1ac9      	subs	r1, r1, r3
 800094a:	1c4b      	adds	r3, r1, #1
 800094c:	2b1f      	cmp	r3, #31
 800094e:	dd00      	ble.n	8000952 <__aeabi_dsub+0xe6>
 8000950:	e0ea      	b.n	8000b28 <__aeabi_dsub+0x2bc>
 8000952:	2220      	movs	r2, #32
 8000954:	0026      	movs	r6, r4
 8000956:	1ad2      	subs	r2, r2, r3
 8000958:	0001      	movs	r1, r0
 800095a:	4094      	lsls	r4, r2
 800095c:	40de      	lsrs	r6, r3
 800095e:	40d8      	lsrs	r0, r3
 8000960:	2300      	movs	r3, #0
 8000962:	4091      	lsls	r1, r2
 8000964:	1e62      	subs	r2, r4, #1
 8000966:	4194      	sbcs	r4, r2
 8000968:	4681      	mov	r9, r0
 800096a:	4698      	mov	r8, r3
 800096c:	4331      	orrs	r1, r6
 800096e:	430c      	orrs	r4, r1
 8000970:	0763      	lsls	r3, r4, #29
 8000972:	d009      	beq.n	8000988 <__aeabi_dsub+0x11c>
 8000974:	230f      	movs	r3, #15
 8000976:	4023      	ands	r3, r4
 8000978:	2b04      	cmp	r3, #4
 800097a:	d005      	beq.n	8000988 <__aeabi_dsub+0x11c>
 800097c:	1d23      	adds	r3, r4, #4
 800097e:	42a3      	cmp	r3, r4
 8000980:	41a4      	sbcs	r4, r4
 8000982:	4264      	negs	r4, r4
 8000984:	44a1      	add	r9, r4
 8000986:	001c      	movs	r4, r3
 8000988:	464b      	mov	r3, r9
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	d400      	bmi.n	8000990 <__aeabi_dsub+0x124>
 800098e:	e0de      	b.n	8000b4e <__aeabi_dsub+0x2e2>
 8000990:	4641      	mov	r1, r8
 8000992:	4b8c      	ldr	r3, [pc, #560]	; (8000bc4 <__aeabi_dsub+0x358>)
 8000994:	3101      	adds	r1, #1
 8000996:	4299      	cmp	r1, r3
 8000998:	d100      	bne.n	800099c <__aeabi_dsub+0x130>
 800099a:	e0e7      	b.n	8000b6c <__aeabi_dsub+0x300>
 800099c:	464b      	mov	r3, r9
 800099e:	488a      	ldr	r0, [pc, #552]	; (8000bc8 <__aeabi_dsub+0x35c>)
 80009a0:	08e4      	lsrs	r4, r4, #3
 80009a2:	4003      	ands	r3, r0
 80009a4:	0018      	movs	r0, r3
 80009a6:	0549      	lsls	r1, r1, #21
 80009a8:	075b      	lsls	r3, r3, #29
 80009aa:	0240      	lsls	r0, r0, #9
 80009ac:	4323      	orrs	r3, r4
 80009ae:	0d4a      	lsrs	r2, r1, #21
 80009b0:	0b04      	lsrs	r4, r0, #12
 80009b2:	0512      	lsls	r2, r2, #20
 80009b4:	07ed      	lsls	r5, r5, #31
 80009b6:	4322      	orrs	r2, r4
 80009b8:	432a      	orrs	r2, r5
 80009ba:	0018      	movs	r0, r3
 80009bc:	0011      	movs	r1, r2
 80009be:	bcf0      	pop	{r4, r5, r6, r7}
 80009c0:	46bb      	mov	fp, r7
 80009c2:	46b2      	mov	sl, r6
 80009c4:	46a9      	mov	r9, r5
 80009c6:	46a0      	mov	r8, r4
 80009c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ca:	4642      	mov	r2, r8
 80009cc:	1a12      	subs	r2, r2, r0
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	dd52      	ble.n	8000a78 <__aeabi_dsub+0x20c>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dsub+0x16c>
 80009d6:	e09c      	b.n	8000b12 <__aeabi_dsub+0x2a6>
 80009d8:	45a0      	cmp	r8, r4
 80009da:	d100      	bne.n	80009de <__aeabi_dsub+0x172>
 80009dc:	e0ca      	b.n	8000b74 <__aeabi_dsub+0x308>
 80009de:	2080      	movs	r0, #128	; 0x80
 80009e0:	0400      	lsls	r0, r0, #16
 80009e2:	4301      	orrs	r1, r0
 80009e4:	2a38      	cmp	r2, #56	; 0x38
 80009e6:	dd00      	ble.n	80009ea <__aeabi_dsub+0x17e>
 80009e8:	e149      	b.n	8000c7e <__aeabi_dsub+0x412>
 80009ea:	2a1f      	cmp	r2, #31
 80009ec:	dc00      	bgt.n	80009f0 <__aeabi_dsub+0x184>
 80009ee:	e197      	b.n	8000d20 <__aeabi_dsub+0x4b4>
 80009f0:	0010      	movs	r0, r2
 80009f2:	000e      	movs	r6, r1
 80009f4:	3820      	subs	r0, #32
 80009f6:	40c6      	lsrs	r6, r0
 80009f8:	2a20      	cmp	r2, #32
 80009fa:	d004      	beq.n	8000a06 <__aeabi_dsub+0x19a>
 80009fc:	2040      	movs	r0, #64	; 0x40
 80009fe:	1a82      	subs	r2, r0, r2
 8000a00:	4091      	lsls	r1, r2
 8000a02:	430f      	orrs	r7, r1
 8000a04:	46b9      	mov	r9, r7
 8000a06:	464c      	mov	r4, r9
 8000a08:	1e62      	subs	r2, r4, #1
 8000a0a:	4194      	sbcs	r4, r2
 8000a0c:	4334      	orrs	r4, r6
 8000a0e:	e13a      	b.n	8000c86 <__aeabi_dsub+0x41a>
 8000a10:	000a      	movs	r2, r1
 8000a12:	433a      	orrs	r2, r7
 8000a14:	d028      	beq.n	8000a68 <__aeabi_dsub+0x1fc>
 8000a16:	46b3      	mov	fp, r6
 8000a18:	42b5      	cmp	r5, r6
 8000a1a:	d02b      	beq.n	8000a74 <__aeabi_dsub+0x208>
 8000a1c:	4a6b      	ldr	r2, [pc, #428]	; (8000bcc <__aeabi_dsub+0x360>)
 8000a1e:	4442      	add	r2, r8
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d05d      	beq.n	8000ae0 <__aeabi_dsub+0x274>
 8000a24:	4642      	mov	r2, r8
 8000a26:	4644      	mov	r4, r8
 8000a28:	1a82      	subs	r2, r0, r2
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dsub+0x1c4>
 8000a2e:	e0f5      	b.n	8000c1c <__aeabi_dsub+0x3b0>
 8000a30:	4665      	mov	r5, ip
 8000a32:	431d      	orrs	r5, r3
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dsub+0x1cc>
 8000a36:	e19c      	b.n	8000d72 <__aeabi_dsub+0x506>
 8000a38:	1e55      	subs	r5, r2, #1
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dsub+0x1d4>
 8000a3e:	e1fb      	b.n	8000e38 <__aeabi_dsub+0x5cc>
 8000a40:	4c60      	ldr	r4, [pc, #384]	; (8000bc4 <__aeabi_dsub+0x358>)
 8000a42:	42a2      	cmp	r2, r4
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dsub+0x1dc>
 8000a46:	e1bd      	b.n	8000dc4 <__aeabi_dsub+0x558>
 8000a48:	002a      	movs	r2, r5
 8000a4a:	e0f0      	b.n	8000c2e <__aeabi_dsub+0x3c2>
 8000a4c:	0008      	movs	r0, r1
 8000a4e:	4338      	orrs	r0, r7
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dsub+0x1e8>
 8000a52:	e0c3      	b.n	8000bdc <__aeabi_dsub+0x370>
 8000a54:	1e50      	subs	r0, r2, #1
 8000a56:	2a01      	cmp	r2, #1
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dsub+0x1f0>
 8000a5a:	e1a8      	b.n	8000dae <__aeabi_dsub+0x542>
 8000a5c:	4c59      	ldr	r4, [pc, #356]	; (8000bc4 <__aeabi_dsub+0x358>)
 8000a5e:	42a2      	cmp	r2, r4
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dsub+0x1f8>
 8000a62:	e087      	b.n	8000b74 <__aeabi_dsub+0x308>
 8000a64:	0002      	movs	r2, r0
 8000a66:	e736      	b.n	80008d6 <__aeabi_dsub+0x6a>
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4056      	eors	r6, r2
 8000a6c:	46b3      	mov	fp, r6
 8000a6e:	42b5      	cmp	r5, r6
 8000a70:	d000      	beq.n	8000a74 <__aeabi_dsub+0x208>
 8000a72:	e721      	b.n	80008b8 <__aeabi_dsub+0x4c>
 8000a74:	4a55      	ldr	r2, [pc, #340]	; (8000bcc <__aeabi_dsub+0x360>)
 8000a76:	4442      	add	r2, r8
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dsub+0x212>
 8000a7c:	e0b5      	b.n	8000bea <__aeabi_dsub+0x37e>
 8000a7e:	4642      	mov	r2, r8
 8000a80:	4644      	mov	r4, r8
 8000a82:	1a82      	subs	r2, r0, r2
 8000a84:	2c00      	cmp	r4, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dsub+0x21e>
 8000a88:	e138      	b.n	8000cfc <__aeabi_dsub+0x490>
 8000a8a:	4e4e      	ldr	r6, [pc, #312]	; (8000bc4 <__aeabi_dsub+0x358>)
 8000a8c:	42b0      	cmp	r0, r6
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dsub+0x226>
 8000a90:	e1de      	b.n	8000e50 <__aeabi_dsub+0x5e4>
 8000a92:	2680      	movs	r6, #128	; 0x80
 8000a94:	4664      	mov	r4, ip
 8000a96:	0436      	lsls	r6, r6, #16
 8000a98:	4334      	orrs	r4, r6
 8000a9a:	46a4      	mov	ip, r4
 8000a9c:	2a38      	cmp	r2, #56	; 0x38
 8000a9e:	dd00      	ble.n	8000aa2 <__aeabi_dsub+0x236>
 8000aa0:	e196      	b.n	8000dd0 <__aeabi_dsub+0x564>
 8000aa2:	2a1f      	cmp	r2, #31
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_dsub+0x23c>
 8000aa6:	e224      	b.n	8000ef2 <__aeabi_dsub+0x686>
 8000aa8:	2620      	movs	r6, #32
 8000aaa:	1ab4      	subs	r4, r6, r2
 8000aac:	46a2      	mov	sl, r4
 8000aae:	4664      	mov	r4, ip
 8000ab0:	4656      	mov	r6, sl
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	46a1      	mov	r9, r4
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	464e      	mov	r6, r9
 8000aba:	40d4      	lsrs	r4, r2
 8000abc:	4326      	orrs	r6, r4
 8000abe:	0034      	movs	r4, r6
 8000ac0:	4656      	mov	r6, sl
 8000ac2:	40b3      	lsls	r3, r6
 8000ac4:	1e5e      	subs	r6, r3, #1
 8000ac6:	41b3      	sbcs	r3, r6
 8000ac8:	431c      	orrs	r4, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	40d3      	lsrs	r3, r2
 8000ace:	18c9      	adds	r1, r1, r3
 8000ad0:	19e4      	adds	r4, r4, r7
 8000ad2:	42bc      	cmp	r4, r7
 8000ad4:	41bf      	sbcs	r7, r7
 8000ad6:	427f      	negs	r7, r7
 8000ad8:	46b9      	mov	r9, r7
 8000ada:	4680      	mov	r8, r0
 8000adc:	4489      	add	r9, r1
 8000ade:	e0d8      	b.n	8000c92 <__aeabi_dsub+0x426>
 8000ae0:	4640      	mov	r0, r8
 8000ae2:	4c3b      	ldr	r4, [pc, #236]	; (8000bd0 <__aeabi_dsub+0x364>)
 8000ae4:	3001      	adds	r0, #1
 8000ae6:	4220      	tst	r0, r4
 8000ae8:	d000      	beq.n	8000aec <__aeabi_dsub+0x280>
 8000aea:	e0b4      	b.n	8000c56 <__aeabi_dsub+0x3ea>
 8000aec:	4640      	mov	r0, r8
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d000      	beq.n	8000af4 <__aeabi_dsub+0x288>
 8000af2:	e144      	b.n	8000d7e <__aeabi_dsub+0x512>
 8000af4:	4660      	mov	r0, ip
 8000af6:	4318      	orrs	r0, r3
 8000af8:	d100      	bne.n	8000afc <__aeabi_dsub+0x290>
 8000afa:	e190      	b.n	8000e1e <__aeabi_dsub+0x5b2>
 8000afc:	0008      	movs	r0, r1
 8000afe:	4338      	orrs	r0, r7
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dsub+0x298>
 8000b02:	e1aa      	b.n	8000e5a <__aeabi_dsub+0x5ee>
 8000b04:	4661      	mov	r1, ip
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	0749      	lsls	r1, r1, #29
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	4661      	mov	r1, ip
 8000b0e:	08cc      	lsrs	r4, r1, #3
 8000b10:	e027      	b.n	8000b62 <__aeabi_dsub+0x2f6>
 8000b12:	0008      	movs	r0, r1
 8000b14:	4338      	orrs	r0, r7
 8000b16:	d061      	beq.n	8000bdc <__aeabi_dsub+0x370>
 8000b18:	1e50      	subs	r0, r2, #1
 8000b1a:	2a01      	cmp	r2, #1
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dsub+0x2b4>
 8000b1e:	e139      	b.n	8000d94 <__aeabi_dsub+0x528>
 8000b20:	42a2      	cmp	r2, r4
 8000b22:	d027      	beq.n	8000b74 <__aeabi_dsub+0x308>
 8000b24:	0002      	movs	r2, r0
 8000b26:	e75d      	b.n	80009e4 <__aeabi_dsub+0x178>
 8000b28:	0002      	movs	r2, r0
 8000b2a:	391f      	subs	r1, #31
 8000b2c:	40ca      	lsrs	r2, r1
 8000b2e:	0011      	movs	r1, r2
 8000b30:	2b20      	cmp	r3, #32
 8000b32:	d003      	beq.n	8000b3c <__aeabi_dsub+0x2d0>
 8000b34:	2240      	movs	r2, #64	; 0x40
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	4098      	lsls	r0, r3
 8000b3a:	4304      	orrs	r4, r0
 8000b3c:	1e63      	subs	r3, r4, #1
 8000b3e:	419c      	sbcs	r4, r3
 8000b40:	2300      	movs	r3, #0
 8000b42:	4699      	mov	r9, r3
 8000b44:	4698      	mov	r8, r3
 8000b46:	430c      	orrs	r4, r1
 8000b48:	0763      	lsls	r3, r4, #29
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dsub+0x2e2>
 8000b4c:	e712      	b.n	8000974 <__aeabi_dsub+0x108>
 8000b4e:	464b      	mov	r3, r9
 8000b50:	464a      	mov	r2, r9
 8000b52:	08e4      	lsrs	r4, r4, #3
 8000b54:	075b      	lsls	r3, r3, #29
 8000b56:	4323      	orrs	r3, r4
 8000b58:	08d4      	lsrs	r4, r2, #3
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	4919      	ldr	r1, [pc, #100]	; (8000bc4 <__aeabi_dsub+0x358>)
 8000b5e:	428a      	cmp	r2, r1
 8000b60:	d00e      	beq.n	8000b80 <__aeabi_dsub+0x314>
 8000b62:	0324      	lsls	r4, r4, #12
 8000b64:	0552      	lsls	r2, r2, #21
 8000b66:	0b24      	lsrs	r4, r4, #12
 8000b68:	0d52      	lsrs	r2, r2, #21
 8000b6a:	e722      	b.n	80009b2 <__aeabi_dsub+0x146>
 8000b6c:	000a      	movs	r2, r1
 8000b6e:	2400      	movs	r4, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	e71e      	b.n	80009b2 <__aeabi_dsub+0x146>
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4662      	mov	r2, ip
 8000b78:	0752      	lsls	r2, r2, #29
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	08d4      	lsrs	r4, r2, #3
 8000b80:	001a      	movs	r2, r3
 8000b82:	4322      	orrs	r2, r4
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dsub+0x31c>
 8000b86:	e1fc      	b.n	8000f82 <__aeabi_dsub+0x716>
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	0312      	lsls	r2, r2, #12
 8000b8c:	4314      	orrs	r4, r2
 8000b8e:	0324      	lsls	r4, r4, #12
 8000b90:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <__aeabi_dsub+0x358>)
 8000b92:	0b24      	lsrs	r4, r4, #12
 8000b94:	e70d      	b.n	80009b2 <__aeabi_dsub+0x146>
 8000b96:	0020      	movs	r0, r4
 8000b98:	f000 fa94 	bl	80010c4 <__clzsi2>
 8000b9c:	0001      	movs	r1, r0
 8000b9e:	3118      	adds	r1, #24
 8000ba0:	291f      	cmp	r1, #31
 8000ba2:	dc00      	bgt.n	8000ba6 <__aeabi_dsub+0x33a>
 8000ba4:	e6c4      	b.n	8000930 <__aeabi_dsub+0xc4>
 8000ba6:	3808      	subs	r0, #8
 8000ba8:	4084      	lsls	r4, r0
 8000baa:	4643      	mov	r3, r8
 8000bac:	0020      	movs	r0, r4
 8000bae:	2400      	movs	r4, #0
 8000bb0:	4588      	cmp	r8, r1
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_dsub+0x34a>
 8000bb4:	e6c8      	b.n	8000948 <__aeabi_dsub+0xdc>
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__aeabi_dsub+0x35c>)
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	4010      	ands	r0, r2
 8000bbc:	4698      	mov	r8, r3
 8000bbe:	4681      	mov	r9, r0
 8000bc0:	e6d6      	b.n	8000970 <__aeabi_dsub+0x104>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	000007ff 	.word	0x000007ff
 8000bc8:	ff7fffff 	.word	0xff7fffff
 8000bcc:	fffff801 	.word	0xfffff801
 8000bd0:	000007fe 	.word	0x000007fe
 8000bd4:	430f      	orrs	r7, r1
 8000bd6:	1e7a      	subs	r2, r7, #1
 8000bd8:	4197      	sbcs	r7, r2
 8000bda:	e691      	b.n	8000900 <__aeabi_dsub+0x94>
 8000bdc:	4661      	mov	r1, ip
 8000bde:	08db      	lsrs	r3, r3, #3
 8000be0:	0749      	lsls	r1, r1, #29
 8000be2:	430b      	orrs	r3, r1
 8000be4:	4661      	mov	r1, ip
 8000be6:	08cc      	lsrs	r4, r1, #3
 8000be8:	e7b8      	b.n	8000b5c <__aeabi_dsub+0x2f0>
 8000bea:	4640      	mov	r0, r8
 8000bec:	4cd3      	ldr	r4, [pc, #844]	; (8000f3c <__aeabi_dsub+0x6d0>)
 8000bee:	3001      	adds	r0, #1
 8000bf0:	4220      	tst	r0, r4
 8000bf2:	d000      	beq.n	8000bf6 <__aeabi_dsub+0x38a>
 8000bf4:	e0a2      	b.n	8000d3c <__aeabi_dsub+0x4d0>
 8000bf6:	4640      	mov	r0, r8
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_dsub+0x392>
 8000bfc:	e101      	b.n	8000e02 <__aeabi_dsub+0x596>
 8000bfe:	4660      	mov	r0, ip
 8000c00:	4318      	orrs	r0, r3
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dsub+0x39a>
 8000c04:	e15e      	b.n	8000ec4 <__aeabi_dsub+0x658>
 8000c06:	0008      	movs	r0, r1
 8000c08:	4338      	orrs	r0, r7
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_dsub+0x3a2>
 8000c0c:	e15f      	b.n	8000ece <__aeabi_dsub+0x662>
 8000c0e:	4661      	mov	r1, ip
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	0749      	lsls	r1, r1, #29
 8000c14:	430b      	orrs	r3, r1
 8000c16:	4661      	mov	r1, ip
 8000c18:	08cc      	lsrs	r4, r1, #3
 8000c1a:	e7a2      	b.n	8000b62 <__aeabi_dsub+0x2f6>
 8000c1c:	4dc8      	ldr	r5, [pc, #800]	; (8000f40 <__aeabi_dsub+0x6d4>)
 8000c1e:	42a8      	cmp	r0, r5
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dsub+0x3b8>
 8000c22:	e0cf      	b.n	8000dc4 <__aeabi_dsub+0x558>
 8000c24:	2580      	movs	r5, #128	; 0x80
 8000c26:	4664      	mov	r4, ip
 8000c28:	042d      	lsls	r5, r5, #16
 8000c2a:	432c      	orrs	r4, r5
 8000c2c:	46a4      	mov	ip, r4
 8000c2e:	2a38      	cmp	r2, #56	; 0x38
 8000c30:	dc56      	bgt.n	8000ce0 <__aeabi_dsub+0x474>
 8000c32:	2a1f      	cmp	r2, #31
 8000c34:	dd00      	ble.n	8000c38 <__aeabi_dsub+0x3cc>
 8000c36:	e0d1      	b.n	8000ddc <__aeabi_dsub+0x570>
 8000c38:	2520      	movs	r5, #32
 8000c3a:	001e      	movs	r6, r3
 8000c3c:	1aad      	subs	r5, r5, r2
 8000c3e:	4664      	mov	r4, ip
 8000c40:	40ab      	lsls	r3, r5
 8000c42:	40ac      	lsls	r4, r5
 8000c44:	40d6      	lsrs	r6, r2
 8000c46:	1e5d      	subs	r5, r3, #1
 8000c48:	41ab      	sbcs	r3, r5
 8000c4a:	4334      	orrs	r4, r6
 8000c4c:	4323      	orrs	r3, r4
 8000c4e:	4664      	mov	r4, ip
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	1b09      	subs	r1, r1, r4
 8000c54:	e049      	b.n	8000cea <__aeabi_dsub+0x47e>
 8000c56:	4660      	mov	r0, ip
 8000c58:	1bdc      	subs	r4, r3, r7
 8000c5a:	1a46      	subs	r6, r0, r1
 8000c5c:	42a3      	cmp	r3, r4
 8000c5e:	4180      	sbcs	r0, r0
 8000c60:	4240      	negs	r0, r0
 8000c62:	4681      	mov	r9, r0
 8000c64:	0030      	movs	r0, r6
 8000c66:	464e      	mov	r6, r9
 8000c68:	1b80      	subs	r0, r0, r6
 8000c6a:	4681      	mov	r9, r0
 8000c6c:	0200      	lsls	r0, r0, #8
 8000c6e:	d476      	bmi.n	8000d5e <__aeabi_dsub+0x4f2>
 8000c70:	464b      	mov	r3, r9
 8000c72:	4323      	orrs	r3, r4
 8000c74:	d000      	beq.n	8000c78 <__aeabi_dsub+0x40c>
 8000c76:	e652      	b.n	800091e <__aeabi_dsub+0xb2>
 8000c78:	2400      	movs	r4, #0
 8000c7a:	2500      	movs	r5, #0
 8000c7c:	e771      	b.n	8000b62 <__aeabi_dsub+0x2f6>
 8000c7e:	4339      	orrs	r1, r7
 8000c80:	000c      	movs	r4, r1
 8000c82:	1e62      	subs	r2, r4, #1
 8000c84:	4194      	sbcs	r4, r2
 8000c86:	18e4      	adds	r4, r4, r3
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	419b      	sbcs	r3, r3
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	4463      	add	r3, ip
 8000c90:	4699      	mov	r9, r3
 8000c92:	464b      	mov	r3, r9
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	d400      	bmi.n	8000c9a <__aeabi_dsub+0x42e>
 8000c98:	e756      	b.n	8000b48 <__aeabi_dsub+0x2dc>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	469c      	mov	ip, r3
 8000c9e:	4ba8      	ldr	r3, [pc, #672]	; (8000f40 <__aeabi_dsub+0x6d4>)
 8000ca0:	44e0      	add	r8, ip
 8000ca2:	4598      	cmp	r8, r3
 8000ca4:	d038      	beq.n	8000d18 <__aeabi_dsub+0x4ac>
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	48a6      	ldr	r0, [pc, #664]	; (8000f44 <__aeabi_dsub+0x6d8>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	4003      	ands	r3, r0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	0863      	lsrs	r3, r4, #1
 8000cb2:	4014      	ands	r4, r2
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	07c3      	lsls	r3, r0, #31
 8000cb8:	431c      	orrs	r4, r3
 8000cba:	0843      	lsrs	r3, r0, #1
 8000cbc:	4699      	mov	r9, r3
 8000cbe:	e657      	b.n	8000970 <__aeabi_dsub+0x104>
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	000e      	movs	r6, r1
 8000cc4:	3820      	subs	r0, #32
 8000cc6:	40c6      	lsrs	r6, r0
 8000cc8:	2a20      	cmp	r2, #32
 8000cca:	d004      	beq.n	8000cd6 <__aeabi_dsub+0x46a>
 8000ccc:	2040      	movs	r0, #64	; 0x40
 8000cce:	1a82      	subs	r2, r0, r2
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	430f      	orrs	r7, r1
 8000cd4:	46b9      	mov	r9, r7
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	1e7a      	subs	r2, r7, #1
 8000cda:	4197      	sbcs	r7, r2
 8000cdc:	4337      	orrs	r7, r6
 8000cde:	e60f      	b.n	8000900 <__aeabi_dsub+0x94>
 8000ce0:	4662      	mov	r2, ip
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	1e5a      	subs	r2, r3, #1
 8000ce8:	4193      	sbcs	r3, r2
 8000cea:	1afc      	subs	r4, r7, r3
 8000cec:	42a7      	cmp	r7, r4
 8000cee:	41bf      	sbcs	r7, r7
 8000cf0:	427f      	negs	r7, r7
 8000cf2:	1bcb      	subs	r3, r1, r7
 8000cf4:	4699      	mov	r9, r3
 8000cf6:	465d      	mov	r5, fp
 8000cf8:	4680      	mov	r8, r0
 8000cfa:	e608      	b.n	800090e <__aeabi_dsub+0xa2>
 8000cfc:	4666      	mov	r6, ip
 8000cfe:	431e      	orrs	r6, r3
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dsub+0x498>
 8000d02:	e0be      	b.n	8000e82 <__aeabi_dsub+0x616>
 8000d04:	1e56      	subs	r6, r2, #1
 8000d06:	2a01      	cmp	r2, #1
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dsub+0x4a0>
 8000d0a:	e109      	b.n	8000f20 <__aeabi_dsub+0x6b4>
 8000d0c:	4c8c      	ldr	r4, [pc, #560]	; (8000f40 <__aeabi_dsub+0x6d4>)
 8000d0e:	42a2      	cmp	r2, r4
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dsub+0x4a8>
 8000d12:	e119      	b.n	8000f48 <__aeabi_dsub+0x6dc>
 8000d14:	0032      	movs	r2, r6
 8000d16:	e6c1      	b.n	8000a9c <__aeabi_dsub+0x230>
 8000d18:	4642      	mov	r2, r8
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e648      	b.n	80009b2 <__aeabi_dsub+0x146>
 8000d20:	2020      	movs	r0, #32
 8000d22:	000c      	movs	r4, r1
 8000d24:	1a80      	subs	r0, r0, r2
 8000d26:	003e      	movs	r6, r7
 8000d28:	4087      	lsls	r7, r0
 8000d2a:	4084      	lsls	r4, r0
 8000d2c:	40d6      	lsrs	r6, r2
 8000d2e:	1e78      	subs	r0, r7, #1
 8000d30:	4187      	sbcs	r7, r0
 8000d32:	40d1      	lsrs	r1, r2
 8000d34:	4334      	orrs	r4, r6
 8000d36:	433c      	orrs	r4, r7
 8000d38:	448c      	add	ip, r1
 8000d3a:	e7a4      	b.n	8000c86 <__aeabi_dsub+0x41a>
 8000d3c:	4a80      	ldr	r2, [pc, #512]	; (8000f40 <__aeabi_dsub+0x6d4>)
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dsub+0x4d8>
 8000d42:	e0e9      	b.n	8000f18 <__aeabi_dsub+0x6ac>
 8000d44:	19df      	adds	r7, r3, r7
 8000d46:	429f      	cmp	r7, r3
 8000d48:	419b      	sbcs	r3, r3
 8000d4a:	4461      	add	r1, ip
 8000d4c:	425b      	negs	r3, r3
 8000d4e:	18c9      	adds	r1, r1, r3
 8000d50:	07cc      	lsls	r4, r1, #31
 8000d52:	087f      	lsrs	r7, r7, #1
 8000d54:	084b      	lsrs	r3, r1, #1
 8000d56:	4699      	mov	r9, r3
 8000d58:	4680      	mov	r8, r0
 8000d5a:	433c      	orrs	r4, r7
 8000d5c:	e6f4      	b.n	8000b48 <__aeabi_dsub+0x2dc>
 8000d5e:	1afc      	subs	r4, r7, r3
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	41bf      	sbcs	r7, r7
 8000d64:	4663      	mov	r3, ip
 8000d66:	427f      	negs	r7, r7
 8000d68:	1ac9      	subs	r1, r1, r3
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	4699      	mov	r9, r3
 8000d6e:	465d      	mov	r5, fp
 8000d70:	e5d5      	b.n	800091e <__aeabi_dsub+0xb2>
 8000d72:	08ff      	lsrs	r7, r7, #3
 8000d74:	074b      	lsls	r3, r1, #29
 8000d76:	465d      	mov	r5, fp
 8000d78:	433b      	orrs	r3, r7
 8000d7a:	08cc      	lsrs	r4, r1, #3
 8000d7c:	e6ee      	b.n	8000b5c <__aeabi_dsub+0x2f0>
 8000d7e:	4662      	mov	r2, ip
 8000d80:	431a      	orrs	r2, r3
 8000d82:	d000      	beq.n	8000d86 <__aeabi_dsub+0x51a>
 8000d84:	e082      	b.n	8000e8c <__aeabi_dsub+0x620>
 8000d86:	000b      	movs	r3, r1
 8000d88:	433b      	orrs	r3, r7
 8000d8a:	d11b      	bne.n	8000dc4 <__aeabi_dsub+0x558>
 8000d8c:	2480      	movs	r4, #128	; 0x80
 8000d8e:	2500      	movs	r5, #0
 8000d90:	0324      	lsls	r4, r4, #12
 8000d92:	e6f9      	b.n	8000b88 <__aeabi_dsub+0x31c>
 8000d94:	19dc      	adds	r4, r3, r7
 8000d96:	429c      	cmp	r4, r3
 8000d98:	419b      	sbcs	r3, r3
 8000d9a:	4461      	add	r1, ip
 8000d9c:	4689      	mov	r9, r1
 8000d9e:	425b      	negs	r3, r3
 8000da0:	4499      	add	r9, r3
 8000da2:	464b      	mov	r3, r9
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	d444      	bmi.n	8000e32 <__aeabi_dsub+0x5c6>
 8000da8:	2301      	movs	r3, #1
 8000daa:	4698      	mov	r8, r3
 8000dac:	e6cc      	b.n	8000b48 <__aeabi_dsub+0x2dc>
 8000dae:	1bdc      	subs	r4, r3, r7
 8000db0:	4662      	mov	r2, ip
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	419b      	sbcs	r3, r3
 8000db6:	1a51      	subs	r1, r2, r1
 8000db8:	425b      	negs	r3, r3
 8000dba:	1acb      	subs	r3, r1, r3
 8000dbc:	4699      	mov	r9, r3
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	e5a4      	b.n	800090e <__aeabi_dsub+0xa2>
 8000dc4:	08ff      	lsrs	r7, r7, #3
 8000dc6:	074b      	lsls	r3, r1, #29
 8000dc8:	465d      	mov	r5, fp
 8000dca:	433b      	orrs	r3, r7
 8000dcc:	08cc      	lsrs	r4, r1, #3
 8000dce:	e6d7      	b.n	8000b80 <__aeabi_dsub+0x314>
 8000dd0:	4662      	mov	r2, ip
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	0014      	movs	r4, r2
 8000dd6:	1e63      	subs	r3, r4, #1
 8000dd8:	419c      	sbcs	r4, r3
 8000dda:	e679      	b.n	8000ad0 <__aeabi_dsub+0x264>
 8000ddc:	0015      	movs	r5, r2
 8000dde:	4664      	mov	r4, ip
 8000de0:	3d20      	subs	r5, #32
 8000de2:	40ec      	lsrs	r4, r5
 8000de4:	46a0      	mov	r8, r4
 8000de6:	2a20      	cmp	r2, #32
 8000de8:	d005      	beq.n	8000df6 <__aeabi_dsub+0x58a>
 8000dea:	2540      	movs	r5, #64	; 0x40
 8000dec:	4664      	mov	r4, ip
 8000dee:	1aaa      	subs	r2, r5, r2
 8000df0:	4094      	lsls	r4, r2
 8000df2:	4323      	orrs	r3, r4
 8000df4:	469a      	mov	sl, r3
 8000df6:	4654      	mov	r4, sl
 8000df8:	1e63      	subs	r3, r4, #1
 8000dfa:	419c      	sbcs	r4, r3
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	4323      	orrs	r3, r4
 8000e00:	e773      	b.n	8000cea <__aeabi_dsub+0x47e>
 8000e02:	4662      	mov	r2, ip
 8000e04:	431a      	orrs	r2, r3
 8000e06:	d023      	beq.n	8000e50 <__aeabi_dsub+0x5e4>
 8000e08:	000a      	movs	r2, r1
 8000e0a:	433a      	orrs	r2, r7
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_dsub+0x5a4>
 8000e0e:	e0a0      	b.n	8000f52 <__aeabi_dsub+0x6e6>
 8000e10:	4662      	mov	r2, ip
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	0752      	lsls	r2, r2, #29
 8000e16:	4313      	orrs	r3, r2
 8000e18:	4662      	mov	r2, ip
 8000e1a:	08d4      	lsrs	r4, r2, #3
 8000e1c:	e6b0      	b.n	8000b80 <__aeabi_dsub+0x314>
 8000e1e:	000b      	movs	r3, r1
 8000e20:	433b      	orrs	r3, r7
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dsub+0x5ba>
 8000e24:	e728      	b.n	8000c78 <__aeabi_dsub+0x40c>
 8000e26:	08ff      	lsrs	r7, r7, #3
 8000e28:	074b      	lsls	r3, r1, #29
 8000e2a:	465d      	mov	r5, fp
 8000e2c:	433b      	orrs	r3, r7
 8000e2e:	08cc      	lsrs	r4, r1, #3
 8000e30:	e697      	b.n	8000b62 <__aeabi_dsub+0x2f6>
 8000e32:	2302      	movs	r3, #2
 8000e34:	4698      	mov	r8, r3
 8000e36:	e736      	b.n	8000ca6 <__aeabi_dsub+0x43a>
 8000e38:	1afc      	subs	r4, r7, r3
 8000e3a:	42a7      	cmp	r7, r4
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4663      	mov	r3, ip
 8000e40:	427f      	negs	r7, r7
 8000e42:	1ac9      	subs	r1, r1, r3
 8000e44:	1bcb      	subs	r3, r1, r7
 8000e46:	4699      	mov	r9, r3
 8000e48:	2301      	movs	r3, #1
 8000e4a:	465d      	mov	r5, fp
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	e55e      	b.n	800090e <__aeabi_dsub+0xa2>
 8000e50:	074b      	lsls	r3, r1, #29
 8000e52:	08ff      	lsrs	r7, r7, #3
 8000e54:	433b      	orrs	r3, r7
 8000e56:	08cc      	lsrs	r4, r1, #3
 8000e58:	e692      	b.n	8000b80 <__aeabi_dsub+0x314>
 8000e5a:	1bdc      	subs	r4, r3, r7
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	42a3      	cmp	r3, r4
 8000e60:	41b6      	sbcs	r6, r6
 8000e62:	1a40      	subs	r0, r0, r1
 8000e64:	4276      	negs	r6, r6
 8000e66:	1b80      	subs	r0, r0, r6
 8000e68:	4681      	mov	r9, r0
 8000e6a:	0200      	lsls	r0, r0, #8
 8000e6c:	d560      	bpl.n	8000f30 <__aeabi_dsub+0x6c4>
 8000e6e:	1afc      	subs	r4, r7, r3
 8000e70:	42a7      	cmp	r7, r4
 8000e72:	41bf      	sbcs	r7, r7
 8000e74:	4663      	mov	r3, ip
 8000e76:	427f      	negs	r7, r7
 8000e78:	1ac9      	subs	r1, r1, r3
 8000e7a:	1bcb      	subs	r3, r1, r7
 8000e7c:	4699      	mov	r9, r3
 8000e7e:	465d      	mov	r5, fp
 8000e80:	e576      	b.n	8000970 <__aeabi_dsub+0x104>
 8000e82:	08ff      	lsrs	r7, r7, #3
 8000e84:	074b      	lsls	r3, r1, #29
 8000e86:	433b      	orrs	r3, r7
 8000e88:	08cc      	lsrs	r4, r1, #3
 8000e8a:	e667      	b.n	8000b5c <__aeabi_dsub+0x2f0>
 8000e8c:	000a      	movs	r2, r1
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	433a      	orrs	r2, r7
 8000e92:	d100      	bne.n	8000e96 <__aeabi_dsub+0x62a>
 8000e94:	e66f      	b.n	8000b76 <__aeabi_dsub+0x30a>
 8000e96:	4662      	mov	r2, ip
 8000e98:	0752      	lsls	r2, r2, #29
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	4662      	mov	r2, ip
 8000e9e:	08d4      	lsrs	r4, r2, #3
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	0312      	lsls	r2, r2, #12
 8000ea4:	4214      	tst	r4, r2
 8000ea6:	d007      	beq.n	8000eb8 <__aeabi_dsub+0x64c>
 8000ea8:	08c8      	lsrs	r0, r1, #3
 8000eaa:	4210      	tst	r0, r2
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_dsub+0x64c>
 8000eae:	465d      	mov	r5, fp
 8000eb0:	0004      	movs	r4, r0
 8000eb2:	08fb      	lsrs	r3, r7, #3
 8000eb4:	0749      	lsls	r1, r1, #29
 8000eb6:	430b      	orrs	r3, r1
 8000eb8:	0f5a      	lsrs	r2, r3, #29
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	0752      	lsls	r2, r2, #29
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	e65d      	b.n	8000b80 <__aeabi_dsub+0x314>
 8000ec4:	074b      	lsls	r3, r1, #29
 8000ec6:	08ff      	lsrs	r7, r7, #3
 8000ec8:	433b      	orrs	r3, r7
 8000eca:	08cc      	lsrs	r4, r1, #3
 8000ecc:	e649      	b.n	8000b62 <__aeabi_dsub+0x2f6>
 8000ece:	19dc      	adds	r4, r3, r7
 8000ed0:	429c      	cmp	r4, r3
 8000ed2:	419b      	sbcs	r3, r3
 8000ed4:	4461      	add	r1, ip
 8000ed6:	4689      	mov	r9, r1
 8000ed8:	425b      	negs	r3, r3
 8000eda:	4499      	add	r9, r3
 8000edc:	464b      	mov	r3, r9
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	d400      	bmi.n	8000ee4 <__aeabi_dsub+0x678>
 8000ee2:	e631      	b.n	8000b48 <__aeabi_dsub+0x2dc>
 8000ee4:	464a      	mov	r2, r9
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <__aeabi_dsub+0x6d8>)
 8000ee8:	401a      	ands	r2, r3
 8000eea:	2301      	movs	r3, #1
 8000eec:	4691      	mov	r9, r2
 8000eee:	4698      	mov	r8, r3
 8000ef0:	e62a      	b.n	8000b48 <__aeabi_dsub+0x2dc>
 8000ef2:	0016      	movs	r6, r2
 8000ef4:	4664      	mov	r4, ip
 8000ef6:	3e20      	subs	r6, #32
 8000ef8:	40f4      	lsrs	r4, r6
 8000efa:	46a0      	mov	r8, r4
 8000efc:	2a20      	cmp	r2, #32
 8000efe:	d005      	beq.n	8000f0c <__aeabi_dsub+0x6a0>
 8000f00:	2640      	movs	r6, #64	; 0x40
 8000f02:	4664      	mov	r4, ip
 8000f04:	1ab2      	subs	r2, r6, r2
 8000f06:	4094      	lsls	r4, r2
 8000f08:	4323      	orrs	r3, r4
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	4654      	mov	r4, sl
 8000f0e:	1e63      	subs	r3, r4, #1
 8000f10:	419c      	sbcs	r4, r3
 8000f12:	4643      	mov	r3, r8
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e5db      	b.n	8000ad0 <__aeabi_dsub+0x264>
 8000f18:	0002      	movs	r2, r0
 8000f1a:	2400      	movs	r4, #0
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e548      	b.n	80009b2 <__aeabi_dsub+0x146>
 8000f20:	19dc      	adds	r4, r3, r7
 8000f22:	42bc      	cmp	r4, r7
 8000f24:	41bf      	sbcs	r7, r7
 8000f26:	4461      	add	r1, ip
 8000f28:	4689      	mov	r9, r1
 8000f2a:	427f      	negs	r7, r7
 8000f2c:	44b9      	add	r9, r7
 8000f2e:	e738      	b.n	8000da2 <__aeabi_dsub+0x536>
 8000f30:	464b      	mov	r3, r9
 8000f32:	4323      	orrs	r3, r4
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x6cc>
 8000f36:	e69f      	b.n	8000c78 <__aeabi_dsub+0x40c>
 8000f38:	e606      	b.n	8000b48 <__aeabi_dsub+0x2dc>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	000007fe 	.word	0x000007fe
 8000f40:	000007ff 	.word	0x000007ff
 8000f44:	ff7fffff 	.word	0xff7fffff
 8000f48:	08ff      	lsrs	r7, r7, #3
 8000f4a:	074b      	lsls	r3, r1, #29
 8000f4c:	433b      	orrs	r3, r7
 8000f4e:	08cc      	lsrs	r4, r1, #3
 8000f50:	e616      	b.n	8000b80 <__aeabi_dsub+0x314>
 8000f52:	4662      	mov	r2, ip
 8000f54:	08db      	lsrs	r3, r3, #3
 8000f56:	0752      	lsls	r2, r2, #29
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	4662      	mov	r2, ip
 8000f5c:	08d4      	lsrs	r4, r2, #3
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	0312      	lsls	r2, r2, #12
 8000f62:	4214      	tst	r4, r2
 8000f64:	d007      	beq.n	8000f76 <__aeabi_dsub+0x70a>
 8000f66:	08c8      	lsrs	r0, r1, #3
 8000f68:	4210      	tst	r0, r2
 8000f6a:	d104      	bne.n	8000f76 <__aeabi_dsub+0x70a>
 8000f6c:	465d      	mov	r5, fp
 8000f6e:	0004      	movs	r4, r0
 8000f70:	08fb      	lsrs	r3, r7, #3
 8000f72:	0749      	lsls	r1, r1, #29
 8000f74:	430b      	orrs	r3, r1
 8000f76:	0f5a      	lsrs	r2, r3, #29
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	0752      	lsls	r2, r2, #29
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	e5fe      	b.n	8000b80 <__aeabi_dsub+0x314>
 8000f82:	2300      	movs	r3, #0
 8000f84:	4a01      	ldr	r2, [pc, #4]	; (8000f8c <__aeabi_dsub+0x720>)
 8000f86:	001c      	movs	r4, r3
 8000f88:	e513      	b.n	80009b2 <__aeabi_dsub+0x146>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	000007ff 	.word	0x000007ff

08000f90 <__aeabi_d2iz>:
 8000f90:	000a      	movs	r2, r1
 8000f92:	b530      	push	{r4, r5, lr}
 8000f94:	4c13      	ldr	r4, [pc, #76]	; (8000fe4 <__aeabi_d2iz+0x54>)
 8000f96:	0053      	lsls	r3, r2, #1
 8000f98:	0309      	lsls	r1, r1, #12
 8000f9a:	0005      	movs	r5, r0
 8000f9c:	0b09      	lsrs	r1, r1, #12
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	0d5b      	lsrs	r3, r3, #21
 8000fa2:	0fd2      	lsrs	r2, r2, #31
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	dd04      	ble.n	8000fb2 <__aeabi_d2iz+0x22>
 8000fa8:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <__aeabi_d2iz+0x58>)
 8000faa:	4283      	cmp	r3, r0
 8000fac:	dd02      	ble.n	8000fb4 <__aeabi_d2iz+0x24>
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <__aeabi_d2iz+0x5c>)
 8000fb0:	18d0      	adds	r0, r2, r3
 8000fb2:	bd30      	pop	{r4, r5, pc}
 8000fb4:	2080      	movs	r0, #128	; 0x80
 8000fb6:	0340      	lsls	r0, r0, #13
 8000fb8:	4301      	orrs	r1, r0
 8000fba:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <__aeabi_d2iz+0x60>)
 8000fbc:	1ac0      	subs	r0, r0, r3
 8000fbe:	281f      	cmp	r0, #31
 8000fc0:	dd08      	ble.n	8000fd4 <__aeabi_d2iz+0x44>
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <__aeabi_d2iz+0x64>)
 8000fc4:	1ac3      	subs	r3, r0, r3
 8000fc6:	40d9      	lsrs	r1, r3
 8000fc8:	000b      	movs	r3, r1
 8000fca:	4258      	negs	r0, r3
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d1f0      	bne.n	8000fb2 <__aeabi_d2iz+0x22>
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	e7ee      	b.n	8000fb2 <__aeabi_d2iz+0x22>
 8000fd4:	4c08      	ldr	r4, [pc, #32]	; (8000ff8 <__aeabi_d2iz+0x68>)
 8000fd6:	40c5      	lsrs	r5, r0
 8000fd8:	46a4      	mov	ip, r4
 8000fda:	4463      	add	r3, ip
 8000fdc:	4099      	lsls	r1, r3
 8000fde:	000b      	movs	r3, r1
 8000fe0:	432b      	orrs	r3, r5
 8000fe2:	e7f2      	b.n	8000fca <__aeabi_d2iz+0x3a>
 8000fe4:	000003fe 	.word	0x000003fe
 8000fe8:	0000041d 	.word	0x0000041d
 8000fec:	7fffffff 	.word	0x7fffffff
 8000ff0:	00000433 	.word	0x00000433
 8000ff4:	00000413 	.word	0x00000413
 8000ff8:	fffffbed 	.word	0xfffffbed

08000ffc <__aeabi_ui2d>:
 8000ffc:	b510      	push	{r4, lr}
 8000ffe:	1e04      	subs	r4, r0, #0
 8001000:	d010      	beq.n	8001024 <__aeabi_ui2d+0x28>
 8001002:	f000 f85f 	bl	80010c4 <__clzsi2>
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <__aeabi_ui2d+0x48>)
 8001008:	1a1b      	subs	r3, r3, r0
 800100a:	280a      	cmp	r0, #10
 800100c:	dc11      	bgt.n	8001032 <__aeabi_ui2d+0x36>
 800100e:	220b      	movs	r2, #11
 8001010:	0021      	movs	r1, r4
 8001012:	1a12      	subs	r2, r2, r0
 8001014:	40d1      	lsrs	r1, r2
 8001016:	3015      	adds	r0, #21
 8001018:	030a      	lsls	r2, r1, #12
 800101a:	055b      	lsls	r3, r3, #21
 800101c:	4084      	lsls	r4, r0
 800101e:	0b12      	lsrs	r2, r2, #12
 8001020:	0d5b      	lsrs	r3, r3, #21
 8001022:	e001      	b.n	8001028 <__aeabi_ui2d+0x2c>
 8001024:	2300      	movs	r3, #0
 8001026:	2200      	movs	r2, #0
 8001028:	051b      	lsls	r3, r3, #20
 800102a:	4313      	orrs	r3, r2
 800102c:	0020      	movs	r0, r4
 800102e:	0019      	movs	r1, r3
 8001030:	bd10      	pop	{r4, pc}
 8001032:	0022      	movs	r2, r4
 8001034:	380b      	subs	r0, #11
 8001036:	4082      	lsls	r2, r0
 8001038:	055b      	lsls	r3, r3, #21
 800103a:	0312      	lsls	r2, r2, #12
 800103c:	2400      	movs	r4, #0
 800103e:	0b12      	lsrs	r2, r2, #12
 8001040:	0d5b      	lsrs	r3, r3, #21
 8001042:	e7f1      	b.n	8001028 <__aeabi_ui2d+0x2c>
 8001044:	0000041e 	.word	0x0000041e

08001048 <__aeabi_cdrcmple>:
 8001048:	4684      	mov	ip, r0
 800104a:	0010      	movs	r0, r2
 800104c:	4662      	mov	r2, ip
 800104e:	468c      	mov	ip, r1
 8001050:	0019      	movs	r1, r3
 8001052:	4663      	mov	r3, ip
 8001054:	e000      	b.n	8001058 <__aeabi_cdcmpeq>
 8001056:	46c0      	nop			; (mov r8, r8)

08001058 <__aeabi_cdcmpeq>:
 8001058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800105a:	f000 f8f9 	bl	8001250 <__ledf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	d401      	bmi.n	8001066 <__aeabi_cdcmpeq+0xe>
 8001062:	2100      	movs	r1, #0
 8001064:	42c8      	cmn	r0, r1
 8001066:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001068 <__aeabi_dcmpeq>:
 8001068:	b510      	push	{r4, lr}
 800106a:	f000 f849 	bl	8001100 <__eqdf2>
 800106e:	4240      	negs	r0, r0
 8001070:	3001      	adds	r0, #1
 8001072:	bd10      	pop	{r4, pc}

08001074 <__aeabi_dcmplt>:
 8001074:	b510      	push	{r4, lr}
 8001076:	f000 f8eb 	bl	8001250 <__ledf2>
 800107a:	2800      	cmp	r0, #0
 800107c:	db01      	blt.n	8001082 <__aeabi_dcmplt+0xe>
 800107e:	2000      	movs	r0, #0
 8001080:	bd10      	pop	{r4, pc}
 8001082:	2001      	movs	r0, #1
 8001084:	bd10      	pop	{r4, pc}
 8001086:	46c0      	nop			; (mov r8, r8)

08001088 <__aeabi_dcmple>:
 8001088:	b510      	push	{r4, lr}
 800108a:	f000 f8e1 	bl	8001250 <__ledf2>
 800108e:	2800      	cmp	r0, #0
 8001090:	dd01      	ble.n	8001096 <__aeabi_dcmple+0xe>
 8001092:	2000      	movs	r0, #0
 8001094:	bd10      	pop	{r4, pc}
 8001096:	2001      	movs	r0, #1
 8001098:	bd10      	pop	{r4, pc}
 800109a:	46c0      	nop			; (mov r8, r8)

0800109c <__aeabi_dcmpgt>:
 800109c:	b510      	push	{r4, lr}
 800109e:	f000 f871 	bl	8001184 <__gedf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	dc01      	bgt.n	80010aa <__aeabi_dcmpgt+0xe>
 80010a6:	2000      	movs	r0, #0
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	2001      	movs	r0, #1
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)

080010b0 <__aeabi_dcmpge>:
 80010b0:	b510      	push	{r4, lr}
 80010b2:	f000 f867 	bl	8001184 <__gedf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	da01      	bge.n	80010be <__aeabi_dcmpge+0xe>
 80010ba:	2000      	movs	r0, #0
 80010bc:	bd10      	pop	{r4, pc}
 80010be:	2001      	movs	r0, #1
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)

080010c4 <__clzsi2>:
 80010c4:	211c      	movs	r1, #28
 80010c6:	2301      	movs	r3, #1
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	4298      	cmp	r0, r3
 80010cc:	d301      	bcc.n	80010d2 <__clzsi2+0xe>
 80010ce:	0c00      	lsrs	r0, r0, #16
 80010d0:	3910      	subs	r1, #16
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d301      	bcc.n	80010dc <__clzsi2+0x18>
 80010d8:	0a00      	lsrs	r0, r0, #8
 80010da:	3908      	subs	r1, #8
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	4298      	cmp	r0, r3
 80010e0:	d301      	bcc.n	80010e6 <__clzsi2+0x22>
 80010e2:	0900      	lsrs	r0, r0, #4
 80010e4:	3904      	subs	r1, #4
 80010e6:	a202      	add	r2, pc, #8	; (adr r2, 80010f0 <__clzsi2+0x2c>)
 80010e8:	5c10      	ldrb	r0, [r2, r0]
 80010ea:	1840      	adds	r0, r0, r1
 80010ec:	4770      	bx	lr
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	02020304 	.word	0x02020304
 80010f4:	01010101 	.word	0x01010101
	...

08001100 <__eqdf2>:
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	464e      	mov	r6, r9
 8001104:	4645      	mov	r5, r8
 8001106:	46de      	mov	lr, fp
 8001108:	4657      	mov	r7, sl
 800110a:	4690      	mov	r8, r2
 800110c:	b5e0      	push	{r5, r6, r7, lr}
 800110e:	0017      	movs	r7, r2
 8001110:	031a      	lsls	r2, r3, #12
 8001112:	0b12      	lsrs	r2, r2, #12
 8001114:	0005      	movs	r5, r0
 8001116:	4684      	mov	ip, r0
 8001118:	4819      	ldr	r0, [pc, #100]	; (8001180 <__eqdf2+0x80>)
 800111a:	030e      	lsls	r6, r1, #12
 800111c:	004c      	lsls	r4, r1, #1
 800111e:	4691      	mov	r9, r2
 8001120:	005a      	lsls	r2, r3, #1
 8001122:	0fdb      	lsrs	r3, r3, #31
 8001124:	469b      	mov	fp, r3
 8001126:	0b36      	lsrs	r6, r6, #12
 8001128:	0d64      	lsrs	r4, r4, #21
 800112a:	0fc9      	lsrs	r1, r1, #31
 800112c:	0d52      	lsrs	r2, r2, #21
 800112e:	4284      	cmp	r4, r0
 8001130:	d019      	beq.n	8001166 <__eqdf2+0x66>
 8001132:	4282      	cmp	r2, r0
 8001134:	d010      	beq.n	8001158 <__eqdf2+0x58>
 8001136:	2001      	movs	r0, #1
 8001138:	4294      	cmp	r4, r2
 800113a:	d10e      	bne.n	800115a <__eqdf2+0x5a>
 800113c:	454e      	cmp	r6, r9
 800113e:	d10c      	bne.n	800115a <__eqdf2+0x5a>
 8001140:	2001      	movs	r0, #1
 8001142:	45c4      	cmp	ip, r8
 8001144:	d109      	bne.n	800115a <__eqdf2+0x5a>
 8001146:	4559      	cmp	r1, fp
 8001148:	d017      	beq.n	800117a <__eqdf2+0x7a>
 800114a:	2c00      	cmp	r4, #0
 800114c:	d105      	bne.n	800115a <__eqdf2+0x5a>
 800114e:	0030      	movs	r0, r6
 8001150:	4328      	orrs	r0, r5
 8001152:	1e43      	subs	r3, r0, #1
 8001154:	4198      	sbcs	r0, r3
 8001156:	e000      	b.n	800115a <__eqdf2+0x5a>
 8001158:	2001      	movs	r0, #1
 800115a:	bcf0      	pop	{r4, r5, r6, r7}
 800115c:	46bb      	mov	fp, r7
 800115e:	46b2      	mov	sl, r6
 8001160:	46a9      	mov	r9, r5
 8001162:	46a0      	mov	r8, r4
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001166:	0033      	movs	r3, r6
 8001168:	2001      	movs	r0, #1
 800116a:	432b      	orrs	r3, r5
 800116c:	d1f5      	bne.n	800115a <__eqdf2+0x5a>
 800116e:	42a2      	cmp	r2, r4
 8001170:	d1f3      	bne.n	800115a <__eqdf2+0x5a>
 8001172:	464b      	mov	r3, r9
 8001174:	433b      	orrs	r3, r7
 8001176:	d1f0      	bne.n	800115a <__eqdf2+0x5a>
 8001178:	e7e2      	b.n	8001140 <__eqdf2+0x40>
 800117a:	2000      	movs	r0, #0
 800117c:	e7ed      	b.n	800115a <__eqdf2+0x5a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff

08001184 <__gedf2>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	4647      	mov	r7, r8
 8001188:	46ce      	mov	lr, r9
 800118a:	0004      	movs	r4, r0
 800118c:	0018      	movs	r0, r3
 800118e:	0016      	movs	r6, r2
 8001190:	031b      	lsls	r3, r3, #12
 8001192:	0b1b      	lsrs	r3, r3, #12
 8001194:	4d2d      	ldr	r5, [pc, #180]	; (800124c <__gedf2+0xc8>)
 8001196:	004a      	lsls	r2, r1, #1
 8001198:	4699      	mov	r9, r3
 800119a:	b580      	push	{r7, lr}
 800119c:	0043      	lsls	r3, r0, #1
 800119e:	030f      	lsls	r7, r1, #12
 80011a0:	46a4      	mov	ip, r4
 80011a2:	46b0      	mov	r8, r6
 80011a4:	0b3f      	lsrs	r7, r7, #12
 80011a6:	0d52      	lsrs	r2, r2, #21
 80011a8:	0fc9      	lsrs	r1, r1, #31
 80011aa:	0d5b      	lsrs	r3, r3, #21
 80011ac:	0fc0      	lsrs	r0, r0, #31
 80011ae:	42aa      	cmp	r2, r5
 80011b0:	d021      	beq.n	80011f6 <__gedf2+0x72>
 80011b2:	42ab      	cmp	r3, r5
 80011b4:	d013      	beq.n	80011de <__gedf2+0x5a>
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d122      	bne.n	8001200 <__gedf2+0x7c>
 80011ba:	433c      	orrs	r4, r7
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <__gedf2+0x42>
 80011c0:	464d      	mov	r5, r9
 80011c2:	432e      	orrs	r6, r5
 80011c4:	d022      	beq.n	800120c <__gedf2+0x88>
 80011c6:	2c00      	cmp	r4, #0
 80011c8:	d010      	beq.n	80011ec <__gedf2+0x68>
 80011ca:	4281      	cmp	r1, r0
 80011cc:	d022      	beq.n	8001214 <__gedf2+0x90>
 80011ce:	2002      	movs	r0, #2
 80011d0:	3901      	subs	r1, #1
 80011d2:	4008      	ands	r0, r1
 80011d4:	3801      	subs	r0, #1
 80011d6:	bcc0      	pop	{r6, r7}
 80011d8:	46b9      	mov	r9, r7
 80011da:	46b0      	mov	r8, r6
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	464d      	mov	r5, r9
 80011e0:	432e      	orrs	r6, r5
 80011e2:	d129      	bne.n	8001238 <__gedf2+0xb4>
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d1f0      	bne.n	80011ca <__gedf2+0x46>
 80011e8:	433c      	orrs	r4, r7
 80011ea:	d1ee      	bne.n	80011ca <__gedf2+0x46>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d1f2      	bne.n	80011d6 <__gedf2+0x52>
 80011f0:	2001      	movs	r0, #1
 80011f2:	4240      	negs	r0, r0
 80011f4:	e7ef      	b.n	80011d6 <__gedf2+0x52>
 80011f6:	003d      	movs	r5, r7
 80011f8:	4325      	orrs	r5, r4
 80011fa:	d11d      	bne.n	8001238 <__gedf2+0xb4>
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d0ee      	beq.n	80011de <__gedf2+0x5a>
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e2      	bne.n	80011ca <__gedf2+0x46>
 8001204:	464c      	mov	r4, r9
 8001206:	4326      	orrs	r6, r4
 8001208:	d1df      	bne.n	80011ca <__gedf2+0x46>
 800120a:	e7e0      	b.n	80011ce <__gedf2+0x4a>
 800120c:	2000      	movs	r0, #0
 800120e:	2c00      	cmp	r4, #0
 8001210:	d0e1      	beq.n	80011d6 <__gedf2+0x52>
 8001212:	e7dc      	b.n	80011ce <__gedf2+0x4a>
 8001214:	429a      	cmp	r2, r3
 8001216:	dc0a      	bgt.n	800122e <__gedf2+0xaa>
 8001218:	dbe8      	blt.n	80011ec <__gedf2+0x68>
 800121a:	454f      	cmp	r7, r9
 800121c:	d8d7      	bhi.n	80011ce <__gedf2+0x4a>
 800121e:	d00e      	beq.n	800123e <__gedf2+0xba>
 8001220:	2000      	movs	r0, #0
 8001222:	454f      	cmp	r7, r9
 8001224:	d2d7      	bcs.n	80011d6 <__gedf2+0x52>
 8001226:	2900      	cmp	r1, #0
 8001228:	d0e2      	beq.n	80011f0 <__gedf2+0x6c>
 800122a:	0008      	movs	r0, r1
 800122c:	e7d3      	b.n	80011d6 <__gedf2+0x52>
 800122e:	4243      	negs	r3, r0
 8001230:	4158      	adcs	r0, r3
 8001232:	0040      	lsls	r0, r0, #1
 8001234:	3801      	subs	r0, #1
 8001236:	e7ce      	b.n	80011d6 <__gedf2+0x52>
 8001238:	2002      	movs	r0, #2
 800123a:	4240      	negs	r0, r0
 800123c:	e7cb      	b.n	80011d6 <__gedf2+0x52>
 800123e:	45c4      	cmp	ip, r8
 8001240:	d8c5      	bhi.n	80011ce <__gedf2+0x4a>
 8001242:	2000      	movs	r0, #0
 8001244:	45c4      	cmp	ip, r8
 8001246:	d2c6      	bcs.n	80011d6 <__gedf2+0x52>
 8001248:	e7ed      	b.n	8001226 <__gedf2+0xa2>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	000007ff 	.word	0x000007ff

08001250 <__ledf2>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	4647      	mov	r7, r8
 8001254:	46ce      	mov	lr, r9
 8001256:	0004      	movs	r4, r0
 8001258:	0018      	movs	r0, r3
 800125a:	0016      	movs	r6, r2
 800125c:	031b      	lsls	r3, r3, #12
 800125e:	0b1b      	lsrs	r3, r3, #12
 8001260:	4d2c      	ldr	r5, [pc, #176]	; (8001314 <__ledf2+0xc4>)
 8001262:	004a      	lsls	r2, r1, #1
 8001264:	4699      	mov	r9, r3
 8001266:	b580      	push	{r7, lr}
 8001268:	0043      	lsls	r3, r0, #1
 800126a:	030f      	lsls	r7, r1, #12
 800126c:	46a4      	mov	ip, r4
 800126e:	46b0      	mov	r8, r6
 8001270:	0b3f      	lsrs	r7, r7, #12
 8001272:	0d52      	lsrs	r2, r2, #21
 8001274:	0fc9      	lsrs	r1, r1, #31
 8001276:	0d5b      	lsrs	r3, r3, #21
 8001278:	0fc0      	lsrs	r0, r0, #31
 800127a:	42aa      	cmp	r2, r5
 800127c:	d00d      	beq.n	800129a <__ledf2+0x4a>
 800127e:	42ab      	cmp	r3, r5
 8001280:	d010      	beq.n	80012a4 <__ledf2+0x54>
 8001282:	2a00      	cmp	r2, #0
 8001284:	d127      	bne.n	80012d6 <__ledf2+0x86>
 8001286:	433c      	orrs	r4, r7
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <__ledf2+0x60>
 800128c:	464d      	mov	r5, r9
 800128e:	432e      	orrs	r6, r5
 8001290:	d10e      	bne.n	80012b0 <__ledf2+0x60>
 8001292:	2000      	movs	r0, #0
 8001294:	2c00      	cmp	r4, #0
 8001296:	d015      	beq.n	80012c4 <__ledf2+0x74>
 8001298:	e00e      	b.n	80012b8 <__ledf2+0x68>
 800129a:	003d      	movs	r5, r7
 800129c:	4325      	orrs	r5, r4
 800129e:	d110      	bne.n	80012c2 <__ledf2+0x72>
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d118      	bne.n	80012d6 <__ledf2+0x86>
 80012a4:	464d      	mov	r5, r9
 80012a6:	432e      	orrs	r6, r5
 80012a8:	d10b      	bne.n	80012c2 <__ledf2+0x72>
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d102      	bne.n	80012b4 <__ledf2+0x64>
 80012ae:	433c      	orrs	r4, r7
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d00b      	beq.n	80012cc <__ledf2+0x7c>
 80012b4:	4281      	cmp	r1, r0
 80012b6:	d014      	beq.n	80012e2 <__ledf2+0x92>
 80012b8:	2002      	movs	r0, #2
 80012ba:	3901      	subs	r1, #1
 80012bc:	4008      	ands	r0, r1
 80012be:	3801      	subs	r0, #1
 80012c0:	e000      	b.n	80012c4 <__ledf2+0x74>
 80012c2:	2002      	movs	r0, #2
 80012c4:	bcc0      	pop	{r6, r7}
 80012c6:	46b9      	mov	r9, r7
 80012c8:	46b0      	mov	r8, r6
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d1f9      	bne.n	80012c4 <__ledf2+0x74>
 80012d0:	2001      	movs	r0, #1
 80012d2:	4240      	negs	r0, r0
 80012d4:	e7f6      	b.n	80012c4 <__ledf2+0x74>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ec      	bne.n	80012b4 <__ledf2+0x64>
 80012da:	464c      	mov	r4, r9
 80012dc:	4326      	orrs	r6, r4
 80012de:	d1e9      	bne.n	80012b4 <__ledf2+0x64>
 80012e0:	e7ea      	b.n	80012b8 <__ledf2+0x68>
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dd04      	ble.n	80012f0 <__ledf2+0xa0>
 80012e6:	4243      	negs	r3, r0
 80012e8:	4158      	adcs	r0, r3
 80012ea:	0040      	lsls	r0, r0, #1
 80012ec:	3801      	subs	r0, #1
 80012ee:	e7e9      	b.n	80012c4 <__ledf2+0x74>
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbeb      	blt.n	80012cc <__ledf2+0x7c>
 80012f4:	454f      	cmp	r7, r9
 80012f6:	d8df      	bhi.n	80012b8 <__ledf2+0x68>
 80012f8:	d006      	beq.n	8001308 <__ledf2+0xb8>
 80012fa:	2000      	movs	r0, #0
 80012fc:	454f      	cmp	r7, r9
 80012fe:	d2e1      	bcs.n	80012c4 <__ledf2+0x74>
 8001300:	2900      	cmp	r1, #0
 8001302:	d0e5      	beq.n	80012d0 <__ledf2+0x80>
 8001304:	0008      	movs	r0, r1
 8001306:	e7dd      	b.n	80012c4 <__ledf2+0x74>
 8001308:	45c4      	cmp	ip, r8
 800130a:	d8d5      	bhi.n	80012b8 <__ledf2+0x68>
 800130c:	2000      	movs	r0, #0
 800130e:	45c4      	cmp	ip, r8
 8001310:	d2d8      	bcs.n	80012c4 <__ledf2+0x74>
 8001312:	e7f5      	b.n	8001300 <__ledf2+0xb0>
 8001314:	000007ff 	.word	0x000007ff

08001318 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART1_UART_Init(void);
static void MX_TIM17_Init(void);
static void MX_CAN_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  i++;
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001328:	601a      	str	r2, [r3, #0]
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	200001cc 	.word	0x200001cc

08001338 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b085      	sub	sp, #20
 800133c:	af02      	add	r7, sp, #8
 800133e:	6078      	str	r0, [r7, #4]
	 HAL_UART_Receive_IT(&huart1, RxData, 21);
 8001340:	49ae      	ldr	r1, [pc, #696]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 8001342:	4baf      	ldr	r3, [pc, #700]	; (8001600 <HAL_UART_RxCpltCallback+0x2c8>)
 8001344:	2215      	movs	r2, #21
 8001346:	0018      	movs	r0, r3
 8001348:	f003 fa2c 	bl	80047a4 <HAL_UART_Receive_IT>
	 if(RxData[4] == '*')
 800134c:	4bab      	ldr	r3, [pc, #684]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	2b2a      	cmp	r3, #42	; 0x2a
 8001352:	d14c      	bne.n	80013ee <HAL_UART_RxCpltCallback+0xb6>
	 {
		 sscanf(&RxData[0],"%01d",&baudrateThousand);
 8001354:	4aab      	ldr	r2, [pc, #684]	; (8001604 <HAL_UART_RxCpltCallback+0x2cc>)
 8001356:	49ac      	ldr	r1, [pc, #688]	; (8001608 <HAL_UART_RxCpltCallback+0x2d0>)
 8001358:	4ba8      	ldr	r3, [pc, #672]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 800135a:	0018      	movs	r0, r3
 800135c:	f004 fc3e 	bl	8005bdc <siscanf>
		 sscanf(&RxData[1],"%01d",&baudrateHundred);
 8001360:	4aaa      	ldr	r2, [pc, #680]	; (800160c <HAL_UART_RxCpltCallback+0x2d4>)
 8001362:	49a9      	ldr	r1, [pc, #676]	; (8001608 <HAL_UART_RxCpltCallback+0x2d0>)
 8001364:	4baa      	ldr	r3, [pc, #680]	; (8001610 <HAL_UART_RxCpltCallback+0x2d8>)
 8001366:	0018      	movs	r0, r3
 8001368:	f004 fc38 	bl	8005bdc <siscanf>
		 sscanf(&RxData[2],"%01d",&baudrateTen);
 800136c:	4aa9      	ldr	r2, [pc, #676]	; (8001614 <HAL_UART_RxCpltCallback+0x2dc>)
 800136e:	49a6      	ldr	r1, [pc, #664]	; (8001608 <HAL_UART_RxCpltCallback+0x2d0>)
 8001370:	4ba9      	ldr	r3, [pc, #676]	; (8001618 <HAL_UART_RxCpltCallback+0x2e0>)
 8001372:	0018      	movs	r0, r3
 8001374:	f004 fc32 	bl	8005bdc <siscanf>
		 sscanf(&RxData[3],"%01d",&baudrateUnit);
 8001378:	4aa8      	ldr	r2, [pc, #672]	; (800161c <HAL_UART_RxCpltCallback+0x2e4>)
 800137a:	49a3      	ldr	r1, [pc, #652]	; (8001608 <HAL_UART_RxCpltCallback+0x2d0>)
 800137c:	4ba8      	ldr	r3, [pc, #672]	; (8001620 <HAL_UART_RxCpltCallback+0x2e8>)
 800137e:	0018      	movs	r0, r3
 8001380:	f004 fc2c 	bl	8005bdc <siscanf>

		 canBaudrate = (1000*baudrateThousand) + (100*baudrateHundred) + (10*baudrateTen) + (baudrateUnit);
 8001384:	4b9f      	ldr	r3, [pc, #636]	; (8001604 <HAL_UART_RxCpltCallback+0x2cc>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	0013      	movs	r3, r2
 800138a:	015b      	lsls	r3, r3, #5
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	189b      	adds	r3, r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	0019      	movs	r1, r3
 8001396:	4b9d      	ldr	r3, [pc, #628]	; (800160c <HAL_UART_RxCpltCallback+0x2d4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2264      	movs	r2, #100	; 0x64
 800139c:	4353      	muls	r3, r2
 800139e:	18c9      	adds	r1, r1, r3
 80013a0:	4b9c      	ldr	r3, [pc, #624]	; (8001614 <HAL_UART_RxCpltCallback+0x2dc>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	0013      	movs	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	189b      	adds	r3, r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	18ca      	adds	r2, r1, r3
 80013ae:	4b9b      	ldr	r3, [pc, #620]	; (800161c <HAL_UART_RxCpltCallback+0x2e4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	18d2      	adds	r2, r2, r3
 80013b4:	4b9b      	ldr	r3, [pc, #620]	; (8001624 <HAL_UART_RxCpltCallback+0x2ec>)
 80013b6:	601a      	str	r2, [r3, #0]
		 hcan.Init.Prescaler = 48000.0 / (canBaudrate * 16);
 80013b8:	4b9a      	ldr	r3, [pc, #616]	; (8001624 <HAL_UART_RxCpltCallback+0x2ec>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff fe1c 	bl	8000ffc <__aeabi_ui2d>
 80013c4:	0002      	movs	r2, r0
 80013c6:	000b      	movs	r3, r1
 80013c8:	2000      	movs	r0, #0
 80013ca:	4997      	ldr	r1, [pc, #604]	; (8001628 <HAL_UART_RxCpltCallback+0x2f0>)
 80013cc:	f7fe ff58 	bl	8000280 <__aeabi_ddiv>
 80013d0:	0002      	movs	r2, r0
 80013d2:	000b      	movs	r3, r1
 80013d4:	0010      	movs	r0, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	f7fe ff34 	bl	8000244 <__aeabi_d2uiz>
 80013dc:	0002      	movs	r2, r0
 80013de:	4b93      	ldr	r3, [pc, #588]	; (800162c <HAL_UART_RxCpltCallback+0x2f4>)
 80013e0:	605a      	str	r2, [r3, #4]
		 memset(RxData,0,21);
 80013e2:	4b86      	ldr	r3, [pc, #536]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80013e4:	2215      	movs	r2, #21
 80013e6:	2100      	movs	r1, #0
 80013e8:	0018      	movs	r0, r3
 80013ea:	f004 fbcf 	bl	8005b8c <memset>
	 }

	 sprintf(myIDstring,"%c%c%c",RxData[0],RxData[1],RxData[2]);
 80013ee:	4b83      	ldr	r3, [pc, #524]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	001a      	movs	r2, r3
 80013f4:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80013f6:	785b      	ldrb	r3, [r3, #1]
 80013f8:	001c      	movs	r4, r3
 80013fa:	4b80      	ldr	r3, [pc, #512]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80013fc:	789b      	ldrb	r3, [r3, #2]
 80013fe:	498c      	ldr	r1, [pc, #560]	; (8001630 <HAL_UART_RxCpltCallback+0x2f8>)
 8001400:	488c      	ldr	r0, [pc, #560]	; (8001634 <HAL_UART_RxCpltCallback+0x2fc>)
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	0023      	movs	r3, r4
 8001406:	f004 fbc9 	bl	8005b9c <siprintf>
	 sscanf(myIDstring,"%03X",&myID);
 800140a:	4a8b      	ldr	r2, [pc, #556]	; (8001638 <HAL_UART_RxCpltCallback+0x300>)
 800140c:	498b      	ldr	r1, [pc, #556]	; (800163c <HAL_UART_RxCpltCallback+0x304>)
 800140e:	4b89      	ldr	r3, [pc, #548]	; (8001634 <HAL_UART_RxCpltCallback+0x2fc>)
 8001410:	0018      	movs	r0, r3
 8001412:	f004 fbe3 	bl	8005bdc <siscanf>
	 TxHeader.IDE=CAN_ID_STD;
 8001416:	4b8a      	ldr	r3, [pc, #552]	; (8001640 <HAL_UART_RxCpltCallback+0x308>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
	 TxHeader.StdId = myID;
 800141c:	4b86      	ldr	r3, [pc, #536]	; (8001638 <HAL_UART_RxCpltCallback+0x300>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b87      	ldr	r3, [pc, #540]	; (8001640 <HAL_UART_RxCpltCallback+0x308>)
 8001422:	601a      	str	r2, [r3, #0]

	 if(RxData[3] == 0)
 8001424:	4b75      	ldr	r3, [pc, #468]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 8001426:	78db      	ldrb	r3, [r3, #3]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d000      	beq.n	800142e <HAL_UART_RxCpltCallback+0xf6>
 800142c:	e0c0      	b.n	80015b0 <HAL_UART_RxCpltCallback+0x278>
	 {
		 TxHeader.RTR = CAN_RTR_DATA;
 800142e:	4b84      	ldr	r3, [pc, #528]	; (8001640 <HAL_UART_RxCpltCallback+0x308>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
		 TxHeader.DLC = RxData[4];
 8001434:	4b71      	ldr	r3, [pc, #452]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 8001436:	791b      	ldrb	r3, [r3, #4]
 8001438:	001a      	movs	r2, r3
 800143a:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_UART_RxCpltCallback+0x308>)
 800143c:	611a      	str	r2, [r3, #16]
		 sprintf(Data1String,"%c%c",RxData[5],RxData[6]);
 800143e:	4b6f      	ldr	r3, [pc, #444]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	001a      	movs	r2, r3
 8001444:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 8001446:	799b      	ldrb	r3, [r3, #6]
 8001448:	497e      	ldr	r1, [pc, #504]	; (8001644 <HAL_UART_RxCpltCallback+0x30c>)
 800144a:	487f      	ldr	r0, [pc, #508]	; (8001648 <HAL_UART_RxCpltCallback+0x310>)
 800144c:	f004 fba6 	bl	8005b9c <siprintf>
		 sscanf(Data1String,"%02X",&Data1);
 8001450:	4a7e      	ldr	r2, [pc, #504]	; (800164c <HAL_UART_RxCpltCallback+0x314>)
 8001452:	497f      	ldr	r1, [pc, #508]	; (8001650 <HAL_UART_RxCpltCallback+0x318>)
 8001454:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <HAL_UART_RxCpltCallback+0x310>)
 8001456:	0018      	movs	r0, r3
 8001458:	f004 fbc0 	bl	8005bdc <siscanf>
		 sprintf(Data2String,"%c%c",RxData[7],RxData[8]);
 800145c:	4b67      	ldr	r3, [pc, #412]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 800145e:	79db      	ldrb	r3, [r3, #7]
 8001460:	001a      	movs	r2, r3
 8001462:	4b66      	ldr	r3, [pc, #408]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 8001464:	7a1b      	ldrb	r3, [r3, #8]
 8001466:	4977      	ldr	r1, [pc, #476]	; (8001644 <HAL_UART_RxCpltCallback+0x30c>)
 8001468:	487a      	ldr	r0, [pc, #488]	; (8001654 <HAL_UART_RxCpltCallback+0x31c>)
 800146a:	f004 fb97 	bl	8005b9c <siprintf>
		 sscanf(Data2String,"%02X",&Data2);
 800146e:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <HAL_UART_RxCpltCallback+0x320>)
 8001470:	4977      	ldr	r1, [pc, #476]	; (8001650 <HAL_UART_RxCpltCallback+0x318>)
 8001472:	4b78      	ldr	r3, [pc, #480]	; (8001654 <HAL_UART_RxCpltCallback+0x31c>)
 8001474:	0018      	movs	r0, r3
 8001476:	f004 fbb1 	bl	8005bdc <siscanf>
		 sprintf(Data3String,"%c%c",RxData[9],RxData[10]);
 800147a:	4b60      	ldr	r3, [pc, #384]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 800147c:	7a5b      	ldrb	r3, [r3, #9]
 800147e:	001a      	movs	r2, r3
 8001480:	4b5e      	ldr	r3, [pc, #376]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 8001482:	7a9b      	ldrb	r3, [r3, #10]
 8001484:	496f      	ldr	r1, [pc, #444]	; (8001644 <HAL_UART_RxCpltCallback+0x30c>)
 8001486:	4875      	ldr	r0, [pc, #468]	; (800165c <HAL_UART_RxCpltCallback+0x324>)
 8001488:	f004 fb88 	bl	8005b9c <siprintf>
		 sscanf(Data3String,"%02X",&Data3);
 800148c:	4a74      	ldr	r2, [pc, #464]	; (8001660 <HAL_UART_RxCpltCallback+0x328>)
 800148e:	4970      	ldr	r1, [pc, #448]	; (8001650 <HAL_UART_RxCpltCallback+0x318>)
 8001490:	4b72      	ldr	r3, [pc, #456]	; (800165c <HAL_UART_RxCpltCallback+0x324>)
 8001492:	0018      	movs	r0, r3
 8001494:	f004 fba2 	bl	8005bdc <siscanf>
		 sprintf(Data4String,"%c%c",RxData[11],RxData[12]);
 8001498:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 800149a:	7adb      	ldrb	r3, [r3, #11]
 800149c:	001a      	movs	r2, r3
 800149e:	4b57      	ldr	r3, [pc, #348]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80014a0:	7b1b      	ldrb	r3, [r3, #12]
 80014a2:	4968      	ldr	r1, [pc, #416]	; (8001644 <HAL_UART_RxCpltCallback+0x30c>)
 80014a4:	486f      	ldr	r0, [pc, #444]	; (8001664 <HAL_UART_RxCpltCallback+0x32c>)
 80014a6:	f004 fb79 	bl	8005b9c <siprintf>
		 sscanf(Data4String,"%02X",&Data4);
 80014aa:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <HAL_UART_RxCpltCallback+0x330>)
 80014ac:	4968      	ldr	r1, [pc, #416]	; (8001650 <HAL_UART_RxCpltCallback+0x318>)
 80014ae:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <HAL_UART_RxCpltCallback+0x32c>)
 80014b0:	0018      	movs	r0, r3
 80014b2:	f004 fb93 	bl	8005bdc <siscanf>
		 sprintf(Data5String,"%c%c",RxData[13],RxData[14]);
 80014b6:	4b51      	ldr	r3, [pc, #324]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80014b8:	7b5b      	ldrb	r3, [r3, #13]
 80014ba:	001a      	movs	r2, r3
 80014bc:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80014be:	7b9b      	ldrb	r3, [r3, #14]
 80014c0:	4960      	ldr	r1, [pc, #384]	; (8001644 <HAL_UART_RxCpltCallback+0x30c>)
 80014c2:	486a      	ldr	r0, [pc, #424]	; (800166c <HAL_UART_RxCpltCallback+0x334>)
 80014c4:	f004 fb6a 	bl	8005b9c <siprintf>
		 sscanf(Data5String,"%02X",&Data5);
 80014c8:	4a69      	ldr	r2, [pc, #420]	; (8001670 <HAL_UART_RxCpltCallback+0x338>)
 80014ca:	4961      	ldr	r1, [pc, #388]	; (8001650 <HAL_UART_RxCpltCallback+0x318>)
 80014cc:	4b67      	ldr	r3, [pc, #412]	; (800166c <HAL_UART_RxCpltCallback+0x334>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f004 fb84 	bl	8005bdc <siscanf>
		 sprintf(Data6String,"%c%c",RxData[15],RxData[16]);
 80014d4:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80014d6:	7bdb      	ldrb	r3, [r3, #15]
 80014d8:	001a      	movs	r2, r3
 80014da:	4b48      	ldr	r3, [pc, #288]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80014dc:	7c1b      	ldrb	r3, [r3, #16]
 80014de:	4959      	ldr	r1, [pc, #356]	; (8001644 <HAL_UART_RxCpltCallback+0x30c>)
 80014e0:	4864      	ldr	r0, [pc, #400]	; (8001674 <HAL_UART_RxCpltCallback+0x33c>)
 80014e2:	f004 fb5b 	bl	8005b9c <siprintf>
		 sscanf(Data6String,"%02X",&Data6);
 80014e6:	4a64      	ldr	r2, [pc, #400]	; (8001678 <HAL_UART_RxCpltCallback+0x340>)
 80014e8:	4959      	ldr	r1, [pc, #356]	; (8001650 <HAL_UART_RxCpltCallback+0x318>)
 80014ea:	4b62      	ldr	r3, [pc, #392]	; (8001674 <HAL_UART_RxCpltCallback+0x33c>)
 80014ec:	0018      	movs	r0, r3
 80014ee:	f004 fb75 	bl	8005bdc <siscanf>
		 sprintf(Data7String,"%c%c",RxData[17],RxData[18]);
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80014f4:	7c5b      	ldrb	r3, [r3, #17]
 80014f6:	001a      	movs	r2, r3
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80014fa:	7c9b      	ldrb	r3, [r3, #18]
 80014fc:	4951      	ldr	r1, [pc, #324]	; (8001644 <HAL_UART_RxCpltCallback+0x30c>)
 80014fe:	485f      	ldr	r0, [pc, #380]	; (800167c <HAL_UART_RxCpltCallback+0x344>)
 8001500:	f004 fb4c 	bl	8005b9c <siprintf>
		 sscanf(Data7String,"%02X",&Data7);
 8001504:	4a5e      	ldr	r2, [pc, #376]	; (8001680 <HAL_UART_RxCpltCallback+0x348>)
 8001506:	4952      	ldr	r1, [pc, #328]	; (8001650 <HAL_UART_RxCpltCallback+0x318>)
 8001508:	4b5c      	ldr	r3, [pc, #368]	; (800167c <HAL_UART_RxCpltCallback+0x344>)
 800150a:	0018      	movs	r0, r3
 800150c:	f004 fb66 	bl	8005bdc <siscanf>
		 sprintf(Data7String,"%c%c",RxData[19],RxData[20]);
 8001510:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 8001512:	7cdb      	ldrb	r3, [r3, #19]
 8001514:	001a      	movs	r2, r3
 8001516:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 8001518:	7d1b      	ldrb	r3, [r3, #20]
 800151a:	494a      	ldr	r1, [pc, #296]	; (8001644 <HAL_UART_RxCpltCallback+0x30c>)
 800151c:	4857      	ldr	r0, [pc, #348]	; (800167c <HAL_UART_RxCpltCallback+0x344>)
 800151e:	f004 fb3d 	bl	8005b9c <siprintf>
		 sscanf(Data8String,"%02X",&Data8);
 8001522:	4a58      	ldr	r2, [pc, #352]	; (8001684 <HAL_UART_RxCpltCallback+0x34c>)
 8001524:	494a      	ldr	r1, [pc, #296]	; (8001650 <HAL_UART_RxCpltCallback+0x318>)
 8001526:	4b58      	ldr	r3, [pc, #352]	; (8001688 <HAL_UART_RxCpltCallback+0x350>)
 8001528:	0018      	movs	r0, r3
 800152a:	f004 fb57 	bl	8005bdc <siscanf>
		 canTxData[0] = Data1;
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_UART_RxCpltCallback+0x314>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b55      	ldr	r3, [pc, #340]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 8001536:	701a      	strb	r2, [r3, #0]
		 canTxData[1] = Data2;
 8001538:	4b47      	ldr	r3, [pc, #284]	; (8001658 <HAL_UART_RxCpltCallback+0x320>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 8001540:	705a      	strb	r2, [r3, #1]
		 canTxData[2] = Data3;
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_UART_RxCpltCallback+0x328>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 800154a:	709a      	strb	r2, [r3, #2]
		 canTxData[3] = Data4;
 800154c:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_UART_RxCpltCallback+0x330>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b4e      	ldr	r3, [pc, #312]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 8001554:	70da      	strb	r2, [r3, #3]
		 canTxData[4] = Data5;
 8001556:	4b46      	ldr	r3, [pc, #280]	; (8001670 <HAL_UART_RxCpltCallback+0x338>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b4b      	ldr	r3, [pc, #300]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 800155e:	711a      	strb	r2, [r3, #4]
		 canTxData[5] = Data6;
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <HAL_UART_RxCpltCallback+0x340>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 8001568:	715a      	strb	r2, [r3, #5]
		 canTxData[6] = Data7;
 800156a:	4b45      	ldr	r3, [pc, #276]	; (8001680 <HAL_UART_RxCpltCallback+0x348>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 8001572:	719a      	strb	r2, [r3, #6]
		 canTxData[7] = Data8;
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_UART_RxCpltCallback+0x34c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 800157c:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, canTxData, &TxMailbox) != HAL_OK)
 800157e:	4b44      	ldr	r3, [pc, #272]	; (8001690 <HAL_UART_RxCpltCallback+0x358>)
 8001580:	4a42      	ldr	r2, [pc, #264]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 8001582:	492f      	ldr	r1, [pc, #188]	; (8001640 <HAL_UART_RxCpltCallback+0x308>)
 8001584:	4829      	ldr	r0, [pc, #164]	; (800162c <HAL_UART_RxCpltCallback+0x2f4>)
 8001586:	f001 f8d9 	bl	800273c <HAL_CAN_AddTxMessage>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d009      	beq.n	80015a2 <HAL_UART_RxCpltCallback+0x26a>
		{
			HAL_TIM_Base_Start_IT(&htim17);
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_UART_RxCpltCallback+0x35c>)
 8001590:	0018      	movs	r0, r3
 8001592:	f002 fe2b 	bl	80041ec <HAL_TIM_Base_Start_IT>
				if (i >= 40)
 8001596:	4b40      	ldr	r3, [pc, #256]	; (8001698 <HAL_UART_RxCpltCallback+0x360>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b27      	cmp	r3, #39	; 0x27
 800159c:	d901      	bls.n	80015a2 <HAL_UART_RxCpltCallback+0x26a>
				{
					Error_Handler();
 800159e:	f000 fc45 	bl	8001e2c <Error_Handler>
				}
		}
		memset(RxData,0,21);
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80015a4:	2215      	movs	r2, #21
 80015a6:	2100      	movs	r1, #0
 80015a8:	0018      	movs	r0, r3
 80015aa:	f004 faef 	bl	8005b8c <memset>
		        }
		 }
		 memset(RxData,0,21);
	 }

}
 80015ae:	e021      	b.n	80015f4 <HAL_UART_RxCpltCallback+0x2bc>
	 }else if(RxData[3] == 1)
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d11d      	bne.n	80015f4 <HAL_UART_RxCpltCallback+0x2bc>
		 TxHeader.RTR = CAN_RTR_REMOTE;
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_UART_RxCpltCallback+0x308>)
 80015ba:	2202      	movs	r2, #2
 80015bc:	60da      	str	r2, [r3, #12]
		 TxHeader.DLC = 0;
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_UART_RxCpltCallback+0x308>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
		 if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, canTxData, &TxMailbox) != HAL_OK)
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <HAL_UART_RxCpltCallback+0x358>)
 80015c6:	4a31      	ldr	r2, [pc, #196]	; (800168c <HAL_UART_RxCpltCallback+0x354>)
 80015c8:	491d      	ldr	r1, [pc, #116]	; (8001640 <HAL_UART_RxCpltCallback+0x308>)
 80015ca:	4818      	ldr	r0, [pc, #96]	; (800162c <HAL_UART_RxCpltCallback+0x2f4>)
 80015cc:	f001 f8b6 	bl	800273c <HAL_CAN_AddTxMessage>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d009      	beq.n	80015e8 <HAL_UART_RxCpltCallback+0x2b0>
		 	    HAL_TIM_Base_Start_IT(&htim17);
 80015d4:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_UART_RxCpltCallback+0x35c>)
 80015d6:	0018      	movs	r0, r3
 80015d8:	f002 fe08 	bl	80041ec <HAL_TIM_Base_Start_IT>
		 		if (i >= 40)
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_UART_RxCpltCallback+0x360>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b27      	cmp	r3, #39	; 0x27
 80015e2:	d901      	bls.n	80015e8 <HAL_UART_RxCpltCallback+0x2b0>
		 			Error_Handler();
 80015e4:	f000 fc22 	bl	8001e2c <Error_Handler>
		 memset(RxData,0,21);
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_UART_RxCpltCallback+0x2c4>)
 80015ea:	2215      	movs	r2, #21
 80015ec:	2100      	movs	r1, #0
 80015ee:	0018      	movs	r0, r3
 80015f0:	f004 facc 	bl	8005b8c <memset>
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b003      	add	sp, #12
 80015fa:	bd90      	pop	{r4, r7, pc}
 80015fc:	20000180 	.word	0x20000180
 8001600:	200000fc 	.word	0x200000fc
 8001604:	200001b0 	.word	0x200001b0
 8001608:	08006e88 	.word	0x08006e88
 800160c:	200001b4 	.word	0x200001b4
 8001610:	20000181 	.word	0x20000181
 8001614:	200001b8 	.word	0x200001b8
 8001618:	20000182 	.word	0x20000182
 800161c:	200001bc 	.word	0x200001bc
 8001620:	20000183 	.word	0x20000183
 8001624:	200001c8 	.word	0x200001c8
 8001628:	40e77000 	.word	0x40e77000
 800162c:	2000008c 	.word	0x2000008c
 8001630:	08006e90 	.word	0x08006e90
 8001634:	200001c0 	.word	0x200001c0
 8001638:	200001c4 	.word	0x200001c4
 800163c:	08006e98 	.word	0x08006e98
 8001640:	20000210 	.word	0x20000210
 8001644:	08006ea0 	.word	0x08006ea0
 8001648:	200001d0 	.word	0x200001d0
 800164c:	200001f0 	.word	0x200001f0
 8001650:	08006ea8 	.word	0x08006ea8
 8001654:	200001d4 	.word	0x200001d4
 8001658:	200001f4 	.word	0x200001f4
 800165c:	200001d8 	.word	0x200001d8
 8001660:	200001f8 	.word	0x200001f8
 8001664:	200001dc 	.word	0x200001dc
 8001668:	200001fc 	.word	0x200001fc
 800166c:	200001e0 	.word	0x200001e0
 8001670:	20000200 	.word	0x20000200
 8001674:	200001e4 	.word	0x200001e4
 8001678:	20000204 	.word	0x20000204
 800167c:	200001e8 	.word	0x200001e8
 8001680:	20000208 	.word	0x20000208
 8001684:	2000020c 	.word	0x2000020c
 8001688:	200001ec 	.word	0x200001ec
 800168c:	20000248 	.word	0x20000248
 8001690:	20000244 	.word	0x20000244
 8001694:	200000b4 	.word	0x200000b4
 8001698:	200001cc 	.word	0x200001cc

0800169c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	46d6      	mov	lr, sl
 80016a0:	464f      	mov	r7, r9
 80016a2:	4646      	mov	r6, r8
 80016a4:	b5c0      	push	{r6, r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af08      	add	r7, sp, #32
 80016aa:	6078      	str	r0, [r7, #4]
 HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, canRxData);
 80016ac:	4bd3      	ldr	r3, [pc, #844]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80016ae:	4ad4      	ldr	r2, [pc, #848]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	2100      	movs	r1, #0
 80016b4:	f001 f920 	bl	80028f8 <HAL_CAN_GetRxMessage>

 if(RxHeader.RTR == CAN_RTR_REMOTE)
 80016b8:	4bd1      	ldr	r3, [pc, #836]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d115      	bne.n	80016ec <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 {
	 sprintf(TxData,"%03X100000000000000000",RxHeader.StdId);
 80016c0:	4bcf      	ldr	r3, [pc, #828]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	49cf      	ldr	r1, [pc, #828]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x368>)
 80016c6:	4bd0      	ldr	r3, [pc, #832]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f004 fa67 	bl	8005b9c <siprintf>
	 HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X100000000000000000",RxHeader.StdId));
 80016ce:	4bcc      	ldr	r3, [pc, #816]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	49cc      	ldr	r1, [pc, #816]	; (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x368>)
 80016d4:	4bcc      	ldr	r3, [pc, #816]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f004 fa60 	bl	8005b9c <siprintf>
 80016dc:	0003      	movs	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	49c9      	ldr	r1, [pc, #804]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80016e2:	4bca      	ldr	r3, [pc, #808]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 80016e4:	0018      	movs	r0, r3
 80016e6:	f002 ffdd 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
	default:
		break;
	}
 }
}
 80016ea:	e200      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
 }else if(RxHeader.RTR == CAN_RTR_DATA)
 80016ec:	4bc4      	ldr	r3, [pc, #784]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d000      	beq.n	80016f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 80016f4:	e1f8      	b.n	8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>
	switch(RxHeader.DLC)
 80016f6:	4bc2      	ldr	r3, [pc, #776]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d900      	bls.n	8001700 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
 80016fe:	e1f5      	b.n	8001aec <HAL_CAN_RxFifo0MsgPendingCallback+0x450>
 8001700:	009a      	lsls	r2, r3, #2
 8001702:	4bc3      	ldr	r3, [pc, #780]	; (8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	469f      	mov	pc, r3
		sprintf(TxData,"%03X000000000000000000",RxHeader.StdId);
 800170a:	4bbd      	ldr	r3, [pc, #756]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	49c1      	ldr	r1, [pc, #772]	; (8001a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x378>)
 8001710:	4bbd      	ldr	r3, [pc, #756]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001712:	0018      	movs	r0, r3
 8001714:	f004 fa42 	bl	8005b9c <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X000000000000000000",RxHeader.StdId));
 8001718:	4bb9      	ldr	r3, [pc, #740]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	49bd      	ldr	r1, [pc, #756]	; (8001a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x378>)
 800171e:	4bba      	ldr	r3, [pc, #744]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001720:	0018      	movs	r0, r3
 8001722:	f004 fa3b 	bl	8005b9c <siprintf>
 8001726:	0003      	movs	r3, r0
 8001728:	b29a      	uxth	r2, r3
 800172a:	49b7      	ldr	r1, [pc, #732]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 800172c:	4bb7      	ldr	r3, [pc, #732]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 800172e:	0018      	movs	r0, r3
 8001730:	f002 ffb8 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
 8001734:	e1db      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
		sprintf(TxData,"%03X01%02X00000000000000",RxHeader.StdId,canRxData[0]);
 8001736:	4bb2      	ldr	r3, [pc, #712]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4bb0      	ldr	r3, [pc, #704]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	49b6      	ldr	r1, [pc, #728]	; (8001a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 8001740:	48b1      	ldr	r0, [pc, #708]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001742:	f004 fa2b 	bl	8005b9c <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X01%02X00000000000000",RxHeader.StdId,canRxData[0]));
 8001746:	4bae      	ldr	r3, [pc, #696]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4bac      	ldr	r3, [pc, #688]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	49b2      	ldr	r1, [pc, #712]	; (8001a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 8001750:	48ad      	ldr	r0, [pc, #692]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001752:	f004 fa23 	bl	8005b9c <siprintf>
 8001756:	0003      	movs	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	49ab      	ldr	r1, [pc, #684]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 800175c:	4bab      	ldr	r3, [pc, #684]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 800175e:	0018      	movs	r0, r3
 8001760:	f002 ffa0 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
 8001764:	e1c3      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
		sprintf(TxData,"%03X02%02X%02X000000000000",RxHeader.StdId,canRxData[0],canRxData[1]);
 8001766:	4ba6      	ldr	r3, [pc, #664]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4ba4      	ldr	r3, [pc, #656]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	001c      	movs	r4, r3
 8001770:	4ba2      	ldr	r3, [pc, #648]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	49a9      	ldr	r1, [pc, #676]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x380>)
 8001776:	48a4      	ldr	r0, [pc, #656]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	0023      	movs	r3, r4
 800177c:	f004 fa0e 	bl	8005b9c <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X02%02X%02X000000000000",RxHeader.StdId,canRxData[0],canRxData[1]));
 8001780:	4b9f      	ldr	r3, [pc, #636]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b9d      	ldr	r3, [pc, #628]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	001c      	movs	r4, r3
 800178a:	4b9c      	ldr	r3, [pc, #624]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800178c:	785b      	ldrb	r3, [r3, #1]
 800178e:	49a3      	ldr	r1, [pc, #652]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x380>)
 8001790:	489d      	ldr	r0, [pc, #628]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	0023      	movs	r3, r4
 8001796:	f004 fa01 	bl	8005b9c <siprintf>
 800179a:	0003      	movs	r3, r0
 800179c:	b29a      	uxth	r2, r3
 800179e:	499a      	ldr	r1, [pc, #616]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80017a0:	4b9a      	ldr	r3, [pc, #616]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f002 ff7e 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
 80017a8:	e1a1      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
		sprintf(TxData,"%03X03%02X%02X%02X0000000000",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2]);
 80017aa:	4b95      	ldr	r3, [pc, #596]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b93      	ldr	r3, [pc, #588]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	001d      	movs	r5, r3
 80017b4:	4b91      	ldr	r3, [pc, #580]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	001c      	movs	r4, r3
 80017ba:	4b90      	ldr	r3, [pc, #576]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80017bc:	789b      	ldrb	r3, [r3, #2]
 80017be:	4998      	ldr	r1, [pc, #608]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>)
 80017c0:	4891      	ldr	r0, [pc, #580]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	9400      	str	r4, [sp, #0]
 80017c6:	002b      	movs	r3, r5
 80017c8:	f004 f9e8 	bl	8005b9c <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X03%02X%02X%02X0000000000",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2]));
 80017cc:	4b8c      	ldr	r3, [pc, #560]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b8a      	ldr	r3, [pc, #552]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	001d      	movs	r5, r3
 80017d6:	4b89      	ldr	r3, [pc, #548]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	001c      	movs	r4, r3
 80017dc:	4b87      	ldr	r3, [pc, #540]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	498f      	ldr	r1, [pc, #572]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>)
 80017e2:	4889      	ldr	r0, [pc, #548]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	9400      	str	r4, [sp, #0]
 80017e8:	002b      	movs	r3, r5
 80017ea:	f004 f9d7 	bl	8005b9c <siprintf>
 80017ee:	0003      	movs	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4985      	ldr	r1, [pc, #532]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80017f4:	4b85      	ldr	r3, [pc, #532]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f002 ff54 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
 80017fc:	e177      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
		sprintf(TxData,"%03X04%02X%02X%02X%02X00000000",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3]);
 80017fe:	4b80      	ldr	r3, [pc, #512]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b7e      	ldr	r3, [pc, #504]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	001e      	movs	r6, r3
 8001808:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	001c      	movs	r4, r3
 800180e:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001810:	789b      	ldrb	r3, [r3, #2]
 8001812:	001d      	movs	r5, r3
 8001814:	4b79      	ldr	r3, [pc, #484]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001816:	78db      	ldrb	r3, [r3, #3]
 8001818:	4982      	ldr	r1, [pc, #520]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 800181a:	487b      	ldr	r0, [pc, #492]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	9501      	str	r5, [sp, #4]
 8001820:	9400      	str	r4, [sp, #0]
 8001822:	0033      	movs	r3, r6
 8001824:	f004 f9ba 	bl	8005b9c <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X04%02X%02X%02X%02X00000000",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3]));
 8001828:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	001e      	movs	r6, r3
 8001832:	4b72      	ldr	r3, [pc, #456]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	001c      	movs	r4, r3
 8001838:	4b70      	ldr	r3, [pc, #448]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	001d      	movs	r5, r3
 800183e:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	4978      	ldr	r1, [pc, #480]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 8001844:	4870      	ldr	r0, [pc, #448]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	9501      	str	r5, [sp, #4]
 800184a:	9400      	str	r4, [sp, #0]
 800184c:	0033      	movs	r3, r6
 800184e:	f004 f9a5 	bl	8005b9c <siprintf>
 8001852:	0003      	movs	r3, r0
 8001854:	b29a      	uxth	r2, r3
 8001856:	496c      	ldr	r1, [pc, #432]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001858:	4b6c      	ldr	r3, [pc, #432]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 800185a:	0018      	movs	r0, r3
 800185c:	f002 ff22 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
 8001860:	e145      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
		sprintf(TxData,"%03X05%02X%02X%02X%02X%02X000000",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3],canRxData[4]);
 8001862:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b65      	ldr	r3, [pc, #404]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	469c      	mov	ip, r3
 800186c:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800186e:	785b      	ldrb	r3, [r3, #1]
 8001870:	001c      	movs	r4, r3
 8001872:	4b62      	ldr	r3, [pc, #392]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001874:	789b      	ldrb	r3, [r3, #2]
 8001876:	001d      	movs	r5, r3
 8001878:	4b60      	ldr	r3, [pc, #384]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800187a:	78db      	ldrb	r3, [r3, #3]
 800187c:	001e      	movs	r6, r3
 800187e:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	4969      	ldr	r1, [pc, #420]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x38c>)
 8001884:	4860      	ldr	r0, [pc, #384]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001886:	9303      	str	r3, [sp, #12]
 8001888:	9602      	str	r6, [sp, #8]
 800188a:	9501      	str	r5, [sp, #4]
 800188c:	9400      	str	r4, [sp, #0]
 800188e:	4663      	mov	r3, ip
 8001890:	f004 f984 	bl	8005b9c <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X05%02X%02X%02X%02X%02X000000",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3],canRxData[4]));
 8001894:	4b5a      	ldr	r3, [pc, #360]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	469c      	mov	ip, r3
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	001c      	movs	r4, r3
 80018a4:	4b55      	ldr	r3, [pc, #340]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	001d      	movs	r5, r3
 80018aa:	4b54      	ldr	r3, [pc, #336]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018ac:	78db      	ldrb	r3, [r3, #3]
 80018ae:	001e      	movs	r6, r3
 80018b0:	4b52      	ldr	r3, [pc, #328]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018b2:	791b      	ldrb	r3, [r3, #4]
 80018b4:	495c      	ldr	r1, [pc, #368]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x38c>)
 80018b6:	4854      	ldr	r0, [pc, #336]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80018b8:	9303      	str	r3, [sp, #12]
 80018ba:	9602      	str	r6, [sp, #8]
 80018bc:	9501      	str	r5, [sp, #4]
 80018be:	9400      	str	r4, [sp, #0]
 80018c0:	4663      	mov	r3, ip
 80018c2:	f004 f96b 	bl	8005b9c <siprintf>
 80018c6:	0003      	movs	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	494f      	ldr	r1, [pc, #316]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 80018ce:	0018      	movs	r0, r3
 80018d0:	f002 fee8 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
 80018d4:	e10b      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
		sprintf(TxData,"%03X06%02X%02X%02X%02X%02X%02X0000",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3],canRxData[4],canRxData[5]);
 80018d6:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b48      	ldr	r3, [pc, #288]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4698      	mov	r8, r3
 80018e0:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	001c      	movs	r4, r3
 80018e6:	4b45      	ldr	r3, [pc, #276]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018e8:	789b      	ldrb	r3, [r3, #2]
 80018ea:	001d      	movs	r5, r3
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018ee:	78db      	ldrb	r3, [r3, #3]
 80018f0:	001e      	movs	r6, r3
 80018f2:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018f4:	791b      	ldrb	r3, [r3, #4]
 80018f6:	469c      	mov	ip, r3
 80018f8:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80018fa:	795b      	ldrb	r3, [r3, #5]
 80018fc:	494b      	ldr	r1, [pc, #300]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x390>)
 80018fe:	4842      	ldr	r0, [pc, #264]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001900:	9304      	str	r3, [sp, #16]
 8001902:	4663      	mov	r3, ip
 8001904:	9303      	str	r3, [sp, #12]
 8001906:	9602      	str	r6, [sp, #8]
 8001908:	9501      	str	r5, [sp, #4]
 800190a:	9400      	str	r4, [sp, #0]
 800190c:	4643      	mov	r3, r8
 800190e:	f004 f945 	bl	8005b9c <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X05%02X%02X%02X%02X%02X%02X0000",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3],canRxData[4],canRxData[5]));
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b39      	ldr	r3, [pc, #228]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4698      	mov	r8, r3
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800191e:	785b      	ldrb	r3, [r3, #1]
 8001920:	001c      	movs	r4, r3
 8001922:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001924:	789b      	ldrb	r3, [r3, #2]
 8001926:	001d      	movs	r5, r3
 8001928:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800192a:	78db      	ldrb	r3, [r3, #3]
 800192c:	001e      	movs	r6, r3
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001930:	791b      	ldrb	r3, [r3, #4]
 8001932:	469c      	mov	ip, r3
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001936:	795b      	ldrb	r3, [r3, #5]
 8001938:	493d      	ldr	r1, [pc, #244]	; (8001a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>)
 800193a:	4833      	ldr	r0, [pc, #204]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 800193c:	9304      	str	r3, [sp, #16]
 800193e:	4663      	mov	r3, ip
 8001940:	9303      	str	r3, [sp, #12]
 8001942:	9602      	str	r6, [sp, #8]
 8001944:	9501      	str	r5, [sp, #4]
 8001946:	9400      	str	r4, [sp, #0]
 8001948:	4643      	mov	r3, r8
 800194a:	f004 f927 	bl	8005b9c <siprintf>
 800194e:	0003      	movs	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	492d      	ldr	r1, [pc, #180]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 8001956:	0018      	movs	r0, r3
 8001958:	f002 fea4 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
 800195c:	e0c7      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
		sprintf(TxData,"%03X07%02X%02X%02X%02X%02X%02X%02X00",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3],canRxData[4],canRxData[5],canRxData[6]);
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4699      	mov	r9, r3
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800196a:	785b      	ldrb	r3, [r3, #1]
 800196c:	001c      	movs	r4, r3
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001970:	789b      	ldrb	r3, [r3, #2]
 8001972:	001d      	movs	r5, r3
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	001e      	movs	r6, r3
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800197c:	791b      	ldrb	r3, [r3, #4]
 800197e:	469c      	mov	ip, r3
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001982:	795b      	ldrb	r3, [r3, #5]
 8001984:	4698      	mov	r8, r3
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001988:	799b      	ldrb	r3, [r3, #6]
 800198a:	492a      	ldr	r1, [pc, #168]	; (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x398>)
 800198c:	481e      	ldr	r0, [pc, #120]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 800198e:	9305      	str	r3, [sp, #20]
 8001990:	4643      	mov	r3, r8
 8001992:	9304      	str	r3, [sp, #16]
 8001994:	4663      	mov	r3, ip
 8001996:	9303      	str	r3, [sp, #12]
 8001998:	9602      	str	r6, [sp, #8]
 800199a:	9501      	str	r5, [sp, #4]
 800199c:	9400      	str	r4, [sp, #0]
 800199e:	464b      	mov	r3, r9
 80019a0:	f004 f8fc 	bl	8005b9c <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X07%02X%02X%02X%02X%02X%02X%02X00",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3],canRxData[4],canRxData[5],canRxData[6]));
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4699      	mov	r9, r3
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80019b0:	785b      	ldrb	r3, [r3, #1]
 80019b2:	001c      	movs	r4, r3
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	001d      	movs	r5, r3
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80019bc:	78db      	ldrb	r3, [r3, #3]
 80019be:	001e      	movs	r6, r3
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80019c2:	791b      	ldrb	r3, [r3, #4]
 80019c4:	469c      	mov	ip, r3
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80019c8:	795b      	ldrb	r3, [r3, #5]
 80019ca:	4698      	mov	r8, r3
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 80019ce:	799b      	ldrb	r3, [r3, #6]
 80019d0:	4918      	ldr	r1, [pc, #96]	; (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x398>)
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80019d4:	9305      	str	r3, [sp, #20]
 80019d6:	4643      	mov	r3, r8
 80019d8:	9304      	str	r3, [sp, #16]
 80019da:	4663      	mov	r3, ip
 80019dc:	9303      	str	r3, [sp, #12]
 80019de:	9602      	str	r6, [sp, #8]
 80019e0:	9501      	str	r5, [sp, #4]
 80019e2:	9400      	str	r4, [sp, #0]
 80019e4:	464b      	mov	r3, r9
 80019e6:	f004 f8d9 	bl	8005b9c <siprintf>
 80019ea:	0003      	movs	r3, r0
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4906      	ldr	r1, [pc, #24]	; (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f002 fe56 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
 80019f8:	e079      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	20000250 	.word	0x20000250
 8001a00:	20000228 	.word	0x20000228
 8001a04:	08006eb0 	.word	0x08006eb0
 8001a08:	20000198 	.word	0x20000198
 8001a0c:	200000fc 	.word	0x200000fc
 8001a10:	08007080 	.word	0x08007080
 8001a14:	08006ec8 	.word	0x08006ec8
 8001a18:	08006ee0 	.word	0x08006ee0
 8001a1c:	08006efc 	.word	0x08006efc
 8001a20:	08006f18 	.word	0x08006f18
 8001a24:	08006f38 	.word	0x08006f38
 8001a28:	08006f58 	.word	0x08006f58
 8001a2c:	08006f7c 	.word	0x08006f7c
 8001a30:	08006fa0 	.word	0x08006fa0
 8001a34:	08006fc4 	.word	0x08006fc4
		sprintf(TxData,"%03X08%02X%02X%02X%02X%02X%02X%02X%02X",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3],canRxData[4],canRxData[5],canRxData[6],canRxData[7]);
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	469a      	mov	sl, r3
 8001a42:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	001c      	movs	r4, r3
 8001a48:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a4a:	789b      	ldrb	r3, [r3, #2]
 8001a4c:	001d      	movs	r5, r3
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a50:	78db      	ldrb	r3, [r3, #3]
 8001a52:	001e      	movs	r6, r3
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a56:	791b      	ldrb	r3, [r3, #4]
 8001a58:	469c      	mov	ip, r3
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a5c:	795b      	ldrb	r3, [r3, #5]
 8001a5e:	4698      	mov	r8, r3
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a62:	799b      	ldrb	r3, [r3, #6]
 8001a64:	4699      	mov	r9, r3
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a68:	79db      	ldrb	r3, [r3, #7]
 8001a6a:	4927      	ldr	r1, [pc, #156]	; (8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>)
 8001a6c:	4827      	ldr	r0, [pc, #156]	; (8001b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8001a6e:	9306      	str	r3, [sp, #24]
 8001a70:	464b      	mov	r3, r9
 8001a72:	9305      	str	r3, [sp, #20]
 8001a74:	4643      	mov	r3, r8
 8001a76:	9304      	str	r3, [sp, #16]
 8001a78:	4663      	mov	r3, ip
 8001a7a:	9303      	str	r3, [sp, #12]
 8001a7c:	9602      	str	r6, [sp, #8]
 8001a7e:	9501      	str	r5, [sp, #4]
 8001a80:	9400      	str	r4, [sp, #0]
 8001a82:	4653      	mov	r3, sl
 8001a84:	f004 f88a 	bl	8005b9c <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxData, sprintf(TxData,"%03X08%02X%02X%02X%02X%02X%02X%02X%02X",RxHeader.StdId,canRxData[0],canRxData[1],canRxData[2],canRxData[3],canRxData[4],canRxData[5],canRxData[6],canRxData[7]));
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	469a      	mov	sl, r3
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	001c      	movs	r4, r3
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001a9a:	789b      	ldrb	r3, [r3, #2]
 8001a9c:	001d      	movs	r5, r3
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001aa0:	78db      	ldrb	r3, [r3, #3]
 8001aa2:	001e      	movs	r6, r3
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	469c      	mov	ip, r3
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001aac:	795b      	ldrb	r3, [r3, #5]
 8001aae:	4698      	mov	r8, r3
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001ab2:	799b      	ldrb	r3, [r3, #6]
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001ab8:	79db      	ldrb	r3, [r3, #7]
 8001aba:	4913      	ldr	r1, [pc, #76]	; (8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>)
 8001abc:	4813      	ldr	r0, [pc, #76]	; (8001b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8001abe:	9306      	str	r3, [sp, #24]
 8001ac0:	464b      	mov	r3, r9
 8001ac2:	9305      	str	r3, [sp, #20]
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	9304      	str	r3, [sp, #16]
 8001ac8:	4663      	mov	r3, ip
 8001aca:	9303      	str	r3, [sp, #12]
 8001acc:	9602      	str	r6, [sp, #8]
 8001ace:	9501      	str	r5, [sp, #4]
 8001ad0:	9400      	str	r4, [sp, #0]
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	f004 f862 	bl	8005b9c <siprintf>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	490b      	ldr	r1, [pc, #44]	; (8001b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f002 fddf 	bl	80046a4 <HAL_UART_Transmit_IT>
		break;
 8001ae6:	e002      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
 }
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	e000      	b.n	8001aee <HAL_CAN_RxFifo0MsgPendingCallback+0x452>
		break;
 8001aec:	46c0      	nop			; (mov r8, r8)
}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bce0      	pop	{r5, r6, r7}
 8001af6:	46ba      	mov	sl, r7
 8001af8:	46b1      	mov	r9, r6
 8001afa:	46a8      	mov	r8, r5
 8001afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	20000228 	.word	0x20000228
 8001b04:	20000250 	.word	0x20000250
 8001b08:	08006fec 	.word	0x08006fec
 8001b0c:	20000198 	.word	0x20000198
 8001b10:	200000fc 	.word	0x200000fc

08001b14 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	 memset(TxData,0,21);
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <HAL_UART_TxCpltCallback+0x1c>)
 8001b1e:	2215      	movs	r2, #21
 8001b20:	2100      	movs	r1, #0
 8001b22:	0018      	movs	r0, r3
 8001b24:	f004 f832 	bl	8005b8c <memset>
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b002      	add	sp, #8
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000198 	.word	0x20000198

08001b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b38:	f000 fb42 	bl	80021c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3c:	f000 f828 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b40:	f000 f92a 	bl	8001d98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b44:	f000 f8f8 	bl	8001d38 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 8001b48:	f000 f8d0 	bl	8001cec <MX_TIM17_Init>
  MX_CAN_Init();
 8001b4c:	f000 f874 	bl	8001c38 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

HAL_CAN_Start(&hcan);
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <main+0x48>)
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 fdac 	bl	80026b0 <HAL_CAN_Start>
HAL_UART_Receive_IT(&huart1, RxData, 21);
 8001b58:	4909      	ldr	r1, [pc, #36]	; (8001b80 <main+0x4c>)
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <main+0x50>)
 8001b5c:	2215      	movs	r2, #21
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f002 fe20 	bl	80047a4 <HAL_UART_Receive_IT>

HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <main+0x48>)
 8001b66:	2102      	movs	r1, #2
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 ffe1 	bl	8002b30 <HAL_CAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8001b6e:	4906      	ldr	r1, [pc, #24]	; (8001b88 <main+0x54>)
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <main+0x58>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	0018      	movs	r0, r3
 8001b76:	f001 fcdd 	bl	8003534 <HAL_GPIO_WritePin>
 8001b7a:	e7f8      	b.n	8001b6e <main+0x3a>
 8001b7c:	2000008c 	.word	0x2000008c
 8001b80:	20000180 	.word	0x20000180
 8001b84:	200000fc 	.word	0x200000fc
 8001b88:	00000c02 	.word	0x00000c02
 8001b8c:	48000400 	.word	0x48000400

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b099      	sub	sp, #100	; 0x64
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	242c      	movs	r4, #44	; 0x2c
 8001b98:	193b      	adds	r3, r7, r4
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	2334      	movs	r3, #52	; 0x34
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	f003 fff3 	bl	8005b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba6:	231c      	movs	r3, #28
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	0018      	movs	r0, r3
 8001bac:	2310      	movs	r3, #16
 8001bae:	001a      	movs	r2, r3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	f003 ffeb 	bl	8005b8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	0018      	movs	r0, r3
 8001bba:	2318      	movs	r3, #24
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f003 ffe4 	bl	8005b8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	2201      	movs	r2, #1
 8001bce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f001 fcc9 	bl	8003570 <HAL_RCC_OscConfig>
 8001bde:	1e03      	subs	r3, r0, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001be2:	f000 f923 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be6:	211c      	movs	r1, #28
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2207      	movs	r2, #7
 8001bec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2101      	movs	r1, #1
 8001c04:	0018      	movs	r0, r3
 8001c06:	f002 f839 	bl	8003c7c <HAL_RCC_ClockConfig>
 8001c0a:	1e03      	subs	r3, r0, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c0e:	f000 f90d 	bl	8001e2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	0018      	movs	r0, r3
 8001c22:	f002 f9a5 	bl	8003f70 <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c2a:	f000 f8ff 	bl	8001e2c <Error_Handler>
  }
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b019      	add	sp, #100	; 0x64
 8001c34:	bd90      	pop	{r4, r7, pc}
	...

08001c38 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c40:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <MX_CAN_Init+0xb0>)
 8001c42:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c46:	2206      	movs	r2, #6
 8001c48:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c58:	22c0      	movs	r2, #192	; 0xc0
 8001c5a:	0312      	lsls	r2, r2, #12
 8001c5c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	0352      	lsls	r2, r2, #13
 8001c64:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001c66:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 fb1f 	bl	80022d0 <HAL_CAN_Init>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001c96:	f000 f8c9 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

       canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001c9a:	003b      	movs	r3, r7
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	621a      	str	r2, [r3, #32]
       canfilterconfig.FilterBank = 13;
 8001ca0:	003b      	movs	r3, r7
 8001ca2:	220d      	movs	r2, #13
 8001ca4:	615a      	str	r2, [r3, #20]
       canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001ca6:	003b      	movs	r3, r7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
       canfilterconfig.FilterIdHigh = 0x0000;
 8001cac:	003b      	movs	r3, r7
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
       canfilterconfig.FilterIdLow = 0;
 8001cb2:	003b      	movs	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
       canfilterconfig.FilterMaskIdHigh = 0x0000;
 8001cb8:	003b      	movs	r3, r7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
       canfilterconfig.FilterMaskIdLow = 0x0000;
 8001cbe:	003b      	movs	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
       canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cc4:	003b      	movs	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
       canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001cca:	003b      	movs	r3, r7
 8001ccc:	2201      	movs	r2, #1
 8001cce:	61da      	str	r2, [r3, #28]


       HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001cd0:	003a      	movs	r2, r7
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <MX_CAN_Init+0xac>)
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 fbf8 	bl	80024cc <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b00a      	add	sp, #40	; 0x28
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000008c 	.word	0x2000008c
 8001ce8:	40006400 	.word	0x40006400

08001cec <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_TIM17_Init+0x44>)
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <MX_TIM17_Init+0x48>)
 8001cf4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2-1;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_TIM17_Init+0x44>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_TIM17_Init+0x44>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 53-1;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <MX_TIM17_Init+0x44>)
 8001d04:	2234      	movs	r2, #52	; 0x34
 8001d06:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_TIM17_Init+0x44>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <MX_TIM17_Init+0x44>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_TIM17_Init+0x44>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <MX_TIM17_Init+0x44>)
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f002 fa15 	bl	800414c <HAL_TIM_Base_Init>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001d26:	f000 f881 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200000b4 	.word	0x200000b4
 8001d34:	40014800 	.word	0x40014800

08001d38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d3e:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <MX_USART1_UART_Init+0x5c>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d44:	22e1      	movs	r2, #225	; 0xe1
 8001d46:	0312      	lsls	r2, r2, #12
 8001d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <MX_USART1_UART_Init+0x58>)
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f002 fc3d 	bl	80045fc <HAL_UART_Init>
 8001d82:	1e03      	subs	r3, r0, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d86:	f000 f851 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200000fc 	.word	0x200000fc
 8001d94:	40013800 	.word	0x40013800

08001d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9e:	240c      	movs	r4, #12
 8001da0:	193b      	adds	r3, r7, r4
 8001da2:	0018      	movs	r0, r3
 8001da4:	2314      	movs	r3, #20
 8001da6:	001a      	movs	r2, r3
 8001da8:	2100      	movs	r1, #0
 8001daa:	f003 feef 	bl	8005b8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_GPIO_Init+0x88>)
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <MX_GPIO_Init+0x88>)
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	02c9      	lsls	r1, r1, #11
 8001db8:	430a      	orrs	r2, r1
 8001dba:	615a      	str	r2, [r3, #20]
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <MX_GPIO_Init+0x88>)
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	02db      	lsls	r3, r3, #11
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_GPIO_Init+0x88>)
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_GPIO_Init+0x88>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0289      	lsls	r1, r1, #10
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_GPIO_Init+0x88>)
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	4013      	ands	r3, r2
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001de6:	490f      	ldr	r1, [pc, #60]	; (8001e24 <MX_GPIO_Init+0x8c>)
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <MX_GPIO_Init+0x90>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	0018      	movs	r0, r3
 8001dee:	f001 fba1 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8001df2:	0021      	movs	r1, r4
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <MX_GPIO_Init+0x8c>)
 8001df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <MX_GPIO_Init+0x90>)
 8001e10:	0019      	movs	r1, r3
 8001e12:	0010      	movs	r0, r2
 8001e14:	f001 fa26 	bl	8003264 <HAL_GPIO_Init>

}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b009      	add	sp, #36	; 0x24
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	00000c02 	.word	0x00000c02
 8001e28:	48000400 	.word	0x48000400

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001e34:	4907      	ldr	r1, [pc, #28]	; (8001e54 <Error_Handler+0x28>)
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <Error_Handler+0x2c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f001 fb7a 	bl	8003534 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001e40:	2064      	movs	r0, #100	; 0x64
 8001e42:	f000 fa21 	bl	8002288 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8001e46:	4903      	ldr	r1, [pc, #12]	; (8001e54 <Error_Handler+0x28>)
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <Error_Handler+0x2c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f001 fb71 	bl	8003534 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001e52:	e7ef      	b.n	8001e34 <Error_Handler+0x8>
 8001e54:	00000c02 	.word	0x00000c02
 8001e58:	48000400 	.word	0x48000400

08001e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	619a      	str	r2, [r3, #24]
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4013      	ands	r3, r2
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0549      	lsls	r1, r1, #21
 8001e84:	430a      	orrs	r2, r1
 8001e86:	61da      	str	r2, [r3, #28]
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	4013      	ands	r3, r2
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b002      	add	sp, #8
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	2414      	movs	r4, #20
 8001eae:	193b      	adds	r3, r7, r4
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	2314      	movs	r3, #20
 8001eb4:	001a      	movs	r2, r3
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	f003 fe68 	bl	8005b8c <memset>
  if(hcan->Instance==CAN)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_CAN_MspInit+0xa0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d13a      	bne.n	8001f3c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_CAN_MspInit+0xa4>)
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_CAN_MspInit+0xa4>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	0489      	lsls	r1, r1, #18
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	61da      	str	r2, [r3, #28]
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <HAL_CAN_MspInit+0xa4>)
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	049b      	lsls	r3, r3, #18
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_CAN_MspInit+0xa4>)
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_CAN_MspInit+0xa4>)
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	02c9      	lsls	r1, r1, #11
 8001eec:	430a      	orrs	r2, r1
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_CAN_MspInit+0xa4>)
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	02db      	lsls	r3, r3, #11
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001efe:	193b      	adds	r3, r7, r4
 8001f00:	22c0      	movs	r2, #192	; 0xc0
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	0021      	movs	r1, r4
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	187b      	adds	r3, r7, r1
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	2203      	movs	r2, #3
 8001f18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_CAN_MspInit+0xa8>)
 8001f24:	0019      	movs	r1, r3
 8001f26:	0010      	movs	r0, r2
 8001f28:	f001 f99c 	bl	8003264 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	201e      	movs	r0, #30
 8001f32:	f001 f8e7 	bl	8003104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001f36:	201e      	movs	r0, #30
 8001f38:	f001 f8f9 	bl	800312e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b00b      	add	sp, #44	; 0x2c
 8001f42:	bd90      	pop	{r4, r7, pc}
 8001f44:	40006400 	.word	0x40006400
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48000400 	.word	0x48000400

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <HAL_TIM_Base_MspInit+0x48>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d115      	bne.n	8001f8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_TIM_Base_MspInit+0x4c>)
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_TIM_Base_MspInit+0x4c>)
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	02c9      	lsls	r1, r1, #11
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	619a      	str	r2, [r3, #24]
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_TIM_Base_MspInit+0x4c>)
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	02db      	lsls	r3, r3, #11
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	2016      	movs	r0, #22
 8001f84:	f001 f8be 	bl	8003104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001f88:	2016      	movs	r0, #22
 8001f8a:	f001 f8d0 	bl	800312e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b004      	add	sp, #16
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40014800 	.word	0x40014800
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b08b      	sub	sp, #44	; 0x2c
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	2414      	movs	r4, #20
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	0018      	movs	r0, r3
 8001fae:	2314      	movs	r3, #20
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f003 fdea 	bl	8005b8c <memset>
  if(huart->Instance==USART1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a21      	ldr	r2, [pc, #132]	; (8002044 <HAL_UART_MspInit+0xa4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d13b      	bne.n	800203a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_UART_MspInit+0xa8>)
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_UART_MspInit+0xa8>)
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	01c9      	lsls	r1, r1, #7
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	619a      	str	r2, [r3, #24]
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_UART_MspInit+0xa8>)
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	01db      	lsls	r3, r3, #7
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_UART_MspInit+0xa8>)
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_UART_MspInit+0xa8>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0289      	lsls	r1, r1, #10
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	615a      	str	r2, [r3, #20]
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <HAL_UART_MspInit+0xa8>)
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ffa:	193b      	adds	r3, r7, r4
 8001ffc:	22c0      	movs	r2, #192	; 0xc0
 8001ffe:	00d2      	lsls	r2, r2, #3
 8002000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	0021      	movs	r1, r4
 8002004:	187b      	adds	r3, r7, r1
 8002006:	2202      	movs	r2, #2
 8002008:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	187b      	adds	r3, r7, r1
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002010:	187b      	adds	r3, r7, r1
 8002012:	2203      	movs	r2, #3
 8002014:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002016:	187b      	adds	r3, r7, r1
 8002018:	2201      	movs	r2, #1
 800201a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	187a      	adds	r2, r7, r1
 800201e:	2390      	movs	r3, #144	; 0x90
 8002020:	05db      	lsls	r3, r3, #23
 8002022:	0011      	movs	r1, r2
 8002024:	0018      	movs	r0, r3
 8002026:	f001 f91d 	bl	8003264 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	201b      	movs	r0, #27
 8002030:	f001 f868 	bl	8003104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002034:	201b      	movs	r0, #27
 8002036:	f001 f87a 	bl	800312e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46bd      	mov	sp, r7
 800203e:	b00b      	add	sp, #44	; 0x2c
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	40013800 	.word	0x40013800
 8002048:	40021000 	.word	0x40021000

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <NMI_Handler+0x4>

08002052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <HardFault_Handler+0x4>

08002058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002070:	f000 f8ee 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <TIM17_IRQHandler+0x14>)
 8002082:	0018      	movs	r0, r3
 8002084:	f002 f8fe 	bl	8004284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	200000b4 	.word	0x200000b4

08002094 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <USART1_IRQHandler+0x14>)
 800209a:	0018      	movs	r0, r3
 800209c:	f002 fbe4 	bl	8004868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	200000fc 	.word	0x200000fc

080020ac <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <CEC_CAN_IRQHandler+0x14>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 fd66 	bl	8002b84 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	2000008c 	.word	0x2000008c

080020c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <_sbrk+0x5c>)
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <_sbrk+0x60>)
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <_sbrk+0x64>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <_sbrk+0x68>)
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	18d3      	adds	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d207      	bcs.n	8002104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f4:	f003 fd20 	bl	8005b38 <__errno>
 80020f8:	0003      	movs	r3, r0
 80020fa:	220c      	movs	r2, #12
 80020fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fe:	2301      	movs	r3, #1
 8002100:	425b      	negs	r3, r3
 8002102:	e009      	b.n	8002118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	18d2      	adds	r2, r2, r3
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <_sbrk+0x64>)
 8002114:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b006      	add	sp, #24
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20001800 	.word	0x20001800
 8002124:	00000400 	.word	0x00000400
 8002128:	20000258 	.word	0x20000258
 800212c:	20000270 	.word	0x20000270

08002130 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800213c:	4813      	ldr	r0, [pc, #76]	; (800218c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800213e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002140:	4813      	ldr	r0, [pc, #76]	; (8002190 <LoopForever+0x6>)
    LDR R1, [R0]
 8002142:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002144:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002146:	4a13      	ldr	r2, [pc, #76]	; (8002194 <LoopForever+0xa>)
    CMP R1, R2
 8002148:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800214a:	d105      	bne.n	8002158 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800214c:	4812      	ldr	r0, [pc, #72]	; (8002198 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800214e:	4913      	ldr	r1, [pc, #76]	; (800219c <LoopForever+0x12>)
    STR R1, [R0]
 8002150:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002152:	4813      	ldr	r0, [pc, #76]	; (80021a0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002154:	4913      	ldr	r1, [pc, #76]	; (80021a4 <LoopForever+0x1a>)
    STR R1, [R0]
 8002156:	6001      	str	r1, [r0, #0]

08002158 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002158:	4813      	ldr	r0, [pc, #76]	; (80021a8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800215a:	4914      	ldr	r1, [pc, #80]	; (80021ac <LoopForever+0x22>)
  ldr r2, =_sidata
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <LoopForever+0x26>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002170:	4c11      	ldr	r4, [pc, #68]	; (80021b8 <LoopForever+0x2e>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800217e:	f7ff ffd7 	bl	8002130 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002182:	f003 fcdf 	bl	8005b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002186:	f7ff fcd5 	bl	8001b34 <main>

0800218a <LoopForever>:

LoopForever:
    b LoopForever
 800218a:	e7fe      	b.n	800218a <LoopForever>
  ldr   r0, =_estack
 800218c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002190:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002194:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002198:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800219c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80021a0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80021a4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80021b0:	08007274 	.word	0x08007274
  ldr r2, =_sbss
 80021b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80021b8:	20000270 	.word	0x20000270

080021bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC1_IRQHandler>
	...

080021c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_Init+0x24>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_Init+0x24>)
 80021ca:	2110      	movs	r1, #16
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f000 f809 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d6:	f7ff fe41 	bl	8001e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	40022000 	.word	0x40022000

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_InitTick+0x5c>)
 80021f2:	681c      	ldr	r4, [r3, #0]
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_InitTick+0x60>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	0019      	movs	r1, r3
 80021fa:	23fa      	movs	r3, #250	; 0xfa
 80021fc:	0098      	lsls	r0, r3, #2
 80021fe:	f7fd ff95 	bl	800012c <__udivsi3>
 8002202:	0003      	movs	r3, r0
 8002204:	0019      	movs	r1, r3
 8002206:	0020      	movs	r0, r4
 8002208:	f7fd ff90 	bl	800012c <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	0018      	movs	r0, r3
 8002210:	f000 ff9d 	bl	800314e <HAL_SYSTICK_Config>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d001      	beq.n	800221c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e00f      	b.n	800223c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d80b      	bhi.n	800223a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	2301      	movs	r3, #1
 8002226:	425b      	negs	r3, r3
 8002228:	2200      	movs	r2, #0
 800222a:	0018      	movs	r0, r3
 800222c:	f000 ff6a 	bl	8003104 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_InitTick+0x64>)
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b003      	add	sp, #12
 8002242:	bd90      	pop	{r4, r7, pc}
 8002244:	20000000 	.word	0x20000000
 8002248:	20000008 	.word	0x20000008
 800224c:	20000004 	.word	0x20000004

08002250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_IncTick+0x1c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	001a      	movs	r2, r3
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_IncTick+0x20>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	18d2      	adds	r2, r2, r3
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_IncTick+0x20>)
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	20000008 	.word	0x20000008
 8002270:	2000025c 	.word	0x2000025c

08002274 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <HAL_GetTick+0x10>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	2000025c 	.word	0x2000025c

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff fff0 	bl	8002274 <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3301      	adds	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	001a      	movs	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	189b      	adds	r3, r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	f7ff ffe0 	bl	8002274 <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b004      	add	sp, #16
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0f0      	b.n	80024c4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	5c9b      	ldrb	r3, [r3, r2]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f7ff fdd7 	bl	8001ea4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002306:	f7ff ffb5 	bl	8002274 <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800230e:	e013      	b.n	8002338 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002310:	f7ff ffb0 	bl	8002274 <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d90c      	bls.n	8002338 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	0292      	lsls	r2, r2, #10
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	2105      	movs	r1, #5
 8002332:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0c5      	b.n	80024c4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	4013      	ands	r3, r2
 8002342:	d0e5      	beq.n	8002310 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2102      	movs	r1, #2
 8002350:	438a      	bics	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002354:	f7ff ff8e 	bl	8002274 <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800235c:	e013      	b.n	8002386 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800235e:	f7ff ff89 	bl	8002274 <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b0a      	cmp	r3, #10
 800236a:	d90c      	bls.n	8002386 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	0292      	lsls	r2, r2, #10
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	2105      	movs	r1, #5
 8002380:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e09e      	b.n	80024c4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	4013      	ands	r3, r2
 8002390:	d1e5      	bne.n	800235e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7e1b      	ldrb	r3, [r3, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d108      	bne.n	80023ac <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2180      	movs	r1, #128	; 0x80
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e007      	b.n	80023bc <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	438a      	bics	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	7e5b      	ldrb	r3, [r3, #25]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d108      	bne.n	80023d6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2140      	movs	r1, #64	; 0x40
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e007      	b.n	80023e6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	438a      	bics	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7e9b      	ldrb	r3, [r3, #26]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d108      	bne.n	8002400 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2120      	movs	r1, #32
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e007      	b.n	8002410 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2120      	movs	r1, #32
 800240c:	438a      	bics	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7edb      	ldrb	r3, [r3, #27]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2110      	movs	r1, #16
 8002424:	438a      	bics	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e007      	b.n	800243a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2110      	movs	r1, #16
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7f1b      	ldrb	r3, [r3, #28]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2108      	movs	r1, #8
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e007      	b.n	8002464 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2108      	movs	r1, #8
 8002460:	438a      	bics	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7f5b      	ldrb	r3, [r3, #29]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2104      	movs	r1, #4
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e007      	b.n	800248e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2104      	movs	r1, #4
 800248a:	438a      	bics	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	0011      	movs	r1, r2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	1e5a      	subs	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b004      	add	sp, #16
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024dc:	2013      	movs	r0, #19
 80024de:	183b      	adds	r3, r7, r0
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	2120      	movs	r1, #32
 80024e4:	5c52      	ldrb	r2, [r2, r1]
 80024e6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80024e8:	0002      	movs	r2, r0
 80024ea:	18bb      	adds	r3, r7, r2
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d004      	beq.n	80024fc <HAL_CAN_ConfigFilter+0x30>
 80024f2:	18bb      	adds	r3, r7, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d000      	beq.n	80024fc <HAL_CAN_ConfigFilter+0x30>
 80024fa:	e0cd      	b.n	8002698 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	58d3      	ldr	r3, [r2, r3]
 8002504:	2201      	movs	r2, #1
 8002506:	431a      	orrs	r2, r3
 8002508:	0011      	movs	r1, r2
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	221f      	movs	r2, #31
 8002518:	4013      	ands	r3, r2
 800251a:	2201      	movs	r2, #1
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	2387      	movs	r3, #135	; 0x87
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	58d3      	ldr	r3, [r2, r3]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	43d2      	mvns	r2, r2
 800252e:	401a      	ands	r2, r3
 8002530:	0011      	movs	r1, r2
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	2387      	movs	r3, #135	; 0x87
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d129      	bne.n	8002596 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	2383      	movs	r3, #131	; 0x83
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	58d3      	ldr	r3, [r2, r3]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	43d2      	mvns	r2, r2
 800254e:	401a      	ands	r2, r3
 8002550:	0011      	movs	r1, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	2383      	movs	r3, #131	; 0x83
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800256c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3248      	adds	r2, #72	; 0x48
 8002572:	00d2      	lsls	r2, r2, #3
 8002574:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002588:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800258a:	6979      	ldr	r1, [r7, #20]
 800258c:	3348      	adds	r3, #72	; 0x48
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	18cb      	adds	r3, r1, r3
 8002592:	3304      	adds	r3, #4
 8002594:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d128      	bne.n	80025f0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	2383      	movs	r3, #131	; 0x83
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	58d2      	ldr	r2, [r2, r3]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	0011      	movs	r1, r2
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	2383      	movs	r3, #131	; 0x83
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025c6:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	3248      	adds	r2, #72	; 0x48
 80025cc:	00d2      	lsls	r2, r2, #3
 80025ce:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	3348      	adds	r3, #72	; 0x48
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	18cb      	adds	r3, r1, r3
 80025ec:	3304      	adds	r3, #4
 80025ee:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10c      	bne.n	8002612 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	2381      	movs	r3, #129	; 0x81
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	58d3      	ldr	r3, [r2, r3]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	43d2      	mvns	r2, r2
 8002604:	401a      	ands	r2, r3
 8002606:	0011      	movs	r1, r2
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	2381      	movs	r3, #129	; 0x81
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	50d1      	str	r1, [r2, r3]
 8002610:	e00a      	b.n	8002628 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	2381      	movs	r3, #129	; 0x81
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	58d2      	ldr	r2, [r2, r3]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	431a      	orrs	r2, r3
 800261e:	0011      	movs	r1, r2
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	2381      	movs	r3, #129	; 0x81
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10c      	bne.n	800264a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	2385      	movs	r3, #133	; 0x85
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	58d3      	ldr	r3, [r2, r3]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	43d2      	mvns	r2, r2
 800263c:	401a      	ands	r2, r3
 800263e:	0011      	movs	r1, r2
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	2385      	movs	r3, #133	; 0x85
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	50d1      	str	r1, [r2, r3]
 8002648:	e00a      	b.n	8002660 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	2385      	movs	r3, #133	; 0x85
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	58d2      	ldr	r2, [r2, r3]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	431a      	orrs	r2, r3
 8002656:	0011      	movs	r1, r2
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	2385      	movs	r3, #133	; 0x85
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d10a      	bne.n	800267e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	2387      	movs	r3, #135	; 0x87
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	58d2      	ldr	r2, [r2, r3]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	431a      	orrs	r2, r3
 8002674:	0011      	movs	r1, r2
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	2387      	movs	r3, #135	; 0x87
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	58d3      	ldr	r3, [r2, r3]
 8002686:	2201      	movs	r2, #1
 8002688:	4393      	bics	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	e007      	b.n	80026a8 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	02d2      	lsls	r2, r2, #11
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
  }
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b006      	add	sp, #24
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	5c9b      	ldrb	r3, [r3, r2]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d12f      	bne.n	8002724 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	2102      	movs	r1, #2
 80026ca:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2101      	movs	r1, #1
 80026d8:	438a      	bics	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026dc:	f7ff fdca 	bl	8002274 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026e4:	e013      	b.n	800270e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026e6:	f7ff fdc5 	bl	8002274 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b0a      	cmp	r3, #10
 80026f2:	d90c      	bls.n	800270e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	0292      	lsls	r2, r2, #10
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	2105      	movs	r1, #5
 8002708:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e012      	b.n	8002734 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	4013      	ands	r3, r2
 8002718:	d1e5      	bne.n	80026e6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	e007      	b.n	8002734 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	2280      	movs	r2, #128	; 0x80
 800272a:	0312      	lsls	r2, r2, #12
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
  }
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b004      	add	sp, #16
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800274a:	201f      	movs	r0, #31
 800274c:	183b      	adds	r3, r7, r0
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	2120      	movs	r1, #32
 8002752:	5c52      	ldrb	r2, [r2, r1]
 8002754:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800275e:	183b      	adds	r3, r7, r0
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d004      	beq.n	8002770 <HAL_CAN_AddTxMessage+0x34>
 8002766:	183b      	adds	r3, r7, r0
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d000      	beq.n	8002770 <HAL_CAN_AddTxMessage+0x34>
 800276e:	e0b7      	b.n	80028e0 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	04db      	lsls	r3, r3, #19
 8002776:	4013      	ands	r3, r2
 8002778:	d10a      	bne.n	8002790 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	051b      	lsls	r3, r3, #20
 8002780:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002782:	d105      	bne.n	8002790 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	055b      	lsls	r3, r3, #21
 800278a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800278c:	d100      	bne.n	8002790 <HAL_CAN_AddTxMessage+0x54>
 800278e:	e09e      	b.n	80028ce <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	0e1b      	lsrs	r3, r3, #24
 8002794:	2203      	movs	r2, #3
 8002796:	4013      	ands	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d908      	bls.n	80027b2 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	0412      	lsls	r2, r2, #16
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e09e      	b.n	80028f0 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027b2:	2201      	movs	r2, #1
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10c      	bne.n	80027de <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4311      	orrs	r1, r2
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	3218      	adds	r2, #24
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	50d1      	str	r1, [r2, r3]
 80027dc:	e00f      	b.n	80027fe <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027e8:	431a      	orrs	r2, r3
 80027ea:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80027f4:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	3218      	adds	r2, #24
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3318      	adds	r3, #24
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	18cb      	adds	r3, r1, r3
 800280e:	3304      	adds	r3, #4
 8002810:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	7d1b      	ldrb	r3, [r3, #20]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d112      	bne.n	8002840 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3318      	adds	r3, #24
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	18d3      	adds	r3, r2, r3
 8002826:	3304      	adds	r3, #4
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	431a      	orrs	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3318      	adds	r3, #24
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	18cb      	adds	r3, r1, r3
 800283c:	3304      	adds	r3, #4
 800283e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3307      	adds	r3, #7
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	061a      	lsls	r2, r3, #24
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3306      	adds	r3, #6
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3305      	adds	r3, #5
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	0019      	movs	r1, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	6979      	ldr	r1, [r7, #20]
 800286c:	23c6      	movs	r3, #198	; 0xc6
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	0109      	lsls	r1, r1, #4
 8002872:	1841      	adds	r1, r0, r1
 8002874:	18cb      	adds	r3, r1, r3
 8002876:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3303      	adds	r3, #3
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	061a      	lsls	r2, r3, #24
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3302      	adds	r3, #2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3301      	adds	r3, #1
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	0019      	movs	r1, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	6979      	ldr	r1, [r7, #20]
 80028a2:	23c4      	movs	r3, #196	; 0xc4
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	0109      	lsls	r1, r1, #4
 80028a8:	1841      	adds	r1, r0, r1
 80028aa:	18cb      	adds	r3, r1, r3
 80028ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	3218      	adds	r2, #24
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	58d2      	ldr	r2, [r2, r3]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2101      	movs	r1, #1
 80028c0:	4311      	orrs	r1, r2
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	3218      	adds	r2, #24
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e010      	b.n	80028f0 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	0392      	lsls	r2, r2, #14
 80028d6:	431a      	orrs	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e007      	b.n	80028f0 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	02d2      	lsls	r2, r2, #11
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
  }
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b008      	add	sp, #32
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002906:	2017      	movs	r0, #23
 8002908:	183b      	adds	r3, r7, r0
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	2120      	movs	r1, #32
 800290e:	5c52      	ldrb	r2, [r2, r1]
 8002910:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002912:	0002      	movs	r2, r0
 8002914:	18bb      	adds	r3, r7, r2
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d004      	beq.n	8002926 <HAL_CAN_GetRxMessage+0x2e>
 800291c:	18bb      	adds	r3, r7, r2
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d000      	beq.n	8002926 <HAL_CAN_GetRxMessage+0x2e>
 8002924:	e0f8      	b.n	8002b18 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10e      	bne.n	800294a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2203      	movs	r2, #3
 8002934:	4013      	ands	r3, r2
 8002936:	d117      	bne.n	8002968 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	0392      	lsls	r2, r2, #14
 8002940:	431a      	orrs	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0ee      	b.n	8002b28 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2203      	movs	r2, #3
 8002952:	4013      	ands	r3, r2
 8002954:	d108      	bne.n	8002968 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	0392      	lsls	r2, r2, #14
 800295e:	431a      	orrs	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0df      	b.n	8002b28 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	321b      	adds	r2, #27
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	58d3      	ldr	r3, [r2, r3]
 8002974:	2204      	movs	r2, #4
 8002976:	401a      	ands	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	321b      	adds	r2, #27
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	58d3      	ldr	r3, [r2, r3]
 8002990:	0d5b      	lsrs	r3, r3, #21
 8002992:	055b      	lsls	r3, r3, #21
 8002994:	0d5a      	lsrs	r2, r3, #21
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e00a      	b.n	80029b2 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	321b      	adds	r2, #27
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	58d3      	ldr	r3, [r2, r3]
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	321b      	adds	r2, #27
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	58d3      	ldr	r3, [r2, r3]
 80029be:	2202      	movs	r2, #2
 80029c0:	401a      	ands	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	331b      	adds	r3, #27
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	18d3      	adds	r3, r2, r3
 80029d2:	3304      	adds	r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	220f      	movs	r2, #15
 80029d8:	401a      	ands	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	331b      	adds	r3, #27
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	18d3      	adds	r3, r2, r3
 80029ea:	3304      	adds	r3, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	22ff      	movs	r2, #255	; 0xff
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	331b      	adds	r3, #27
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	18d3      	adds	r3, r2, r3
 8002a04:	3304      	adds	r3, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	0c1a      	lsrs	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	23dc      	movs	r3, #220	; 0xdc
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	0112      	lsls	r2, r2, #4
 8002a1e:	188a      	adds	r2, r1, r2
 8002a20:	18d3      	adds	r3, r2, r3
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6819      	ldr	r1, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	23dc      	movs	r3, #220	; 0xdc
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	188a      	adds	r2, r1, r2
 8002a38:	18d3      	adds	r3, r2, r3
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0a1a      	lsrs	r2, r3, #8
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	23dc      	movs	r3, #220	; 0xdc
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	188a      	adds	r2, r1, r2
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0c1a      	lsrs	r2, r3, #16
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	23dc      	movs	r3, #220	; 0xdc
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	188a      	adds	r2, r1, r2
 8002a70:	18d3      	adds	r3, r2, r3
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e1a      	lsrs	r2, r3, #24
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	3303      	adds	r3, #3
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	23de      	movs	r3, #222	; 0xde
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	188a      	adds	r2, r1, r2
 8002a8c:	18d3      	adds	r3, r2, r3
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	3304      	adds	r3, #4
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	23de      	movs	r3, #222	; 0xde
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	188a      	adds	r2, r1, r2
 8002aa6:	18d3      	adds	r3, r2, r3
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0a1a      	lsrs	r2, r3, #8
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	3305      	adds	r3, #5
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	23de      	movs	r3, #222	; 0xde
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	188a      	adds	r2, r1, r2
 8002ac2:	18d3      	adds	r3, r2, r3
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0c1a      	lsrs	r2, r3, #16
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	3306      	adds	r3, #6
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	23de      	movs	r3, #222	; 0xde
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	188a      	adds	r2, r1, r2
 8002ade:	18d3      	adds	r3, r2, r3
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e1a      	lsrs	r2, r3, #24
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	3307      	adds	r3, #7
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d108      	bne.n	8002b04 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2120      	movs	r1, #32
 8002afe:	430a      	orrs	r2, r1
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	e007      	b.n	8002b14 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2120      	movs	r1, #32
 8002b10:	430a      	orrs	r2, r1
 8002b12:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e007      	b.n	8002b28 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	02d2      	lsls	r2, r2, #11
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
  }
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b006      	add	sp, #24
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b3a:	200f      	movs	r0, #15
 8002b3c:	183b      	adds	r3, r7, r0
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	2120      	movs	r1, #32
 8002b42:	5c52      	ldrb	r2, [r2, r1]
 8002b44:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b46:	0002      	movs	r2, r0
 8002b48:	18bb      	adds	r3, r7, r2
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d003      	beq.n	8002b58 <HAL_CAN_ActivateNotification+0x28>
 8002b50:	18bb      	adds	r3, r7, r2
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d109      	bne.n	8002b6c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6959      	ldr	r1, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e007      	b.n	8002b7c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	02d2      	lsls	r2, r2, #11
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
  }
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b004      	add	sp, #16
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d100      	bne.n	8002bca <HAL_CAN_IRQHandler+0x46>
 8002bc8:	e084      	b.n	8002cd4 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d024      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 f981 	bl	8002eec <HAL_CAN_TxMailbox0CompleteCallback>
 8002bea:	e017      	b.n	8002c1c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d005      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfe:	e00d      	b.n	8002c1c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2208      	movs	r2, #8
 8002c04:	4013      	ands	r3, r2
 8002c06:	d005      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	0152      	lsls	r2, r2, #5
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
 8002c12:	e003      	b.n	8002c1c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 f980 	bl	8002f1c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	d028      	beq.n	8002c78 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	0052      	lsls	r2, r2, #1
 8002c2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4013      	ands	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f95d 	bl	8002efc <HAL_CAN_TxMailbox1CompleteCallback>
 8002c42:	e019      	b.n	8002c78 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d005      	beq.n	8002c5a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	0192      	lsls	r2, r2, #6
 8002c54:	4313      	orrs	r3, r2
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
 8002c58:	e00e      	b.n	8002c78 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	4013      	ands	r3, r2
 8002c62:	d005      	beq.n	8002c70 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	01d2      	lsls	r2, r2, #7
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	e003      	b.n	8002c78 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 f95a 	bl	8002f2c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	025b      	lsls	r3, r3, #9
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d028      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	0252      	lsls	r2, r2, #9
 8002c8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	029b      	lsls	r3, r3, #10
 8002c92:	4013      	ands	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 f937 	bl	8002f0c <HAL_CAN_TxMailbox2CompleteCallback>
 8002c9e:	e019      	b.n	8002cd4 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	02db      	lsls	r3, r3, #11
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d005      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	0212      	lsls	r2, r2, #8
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb4:	e00e      	b.n	8002cd4 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	031b      	lsls	r3, r3, #12
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d005      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	0252      	lsls	r2, r2, #9
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cca:	e003      	b.n	8002cd4 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 f934 	bl	8002f3c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d00c      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2210      	movs	r2, #16
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d008      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	0092      	lsls	r2, r2, #2
 8002cea:	4313      	orrs	r3, r2
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d00b      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2208      	movs	r2, #8
 8002d02:	4013      	ands	r3, r2
 8002d04:	d007      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f91b 	bl	8002f4c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2203      	movs	r2, #3
 8002d26:	4013      	ands	r3, r2
 8002d28:	d003      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7fe fcb5 	bl	800169c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	2240      	movs	r2, #64	; 0x40
 8002d36:	4013      	ands	r3, r2
 8002d38:	d00c      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d008      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	00d2      	lsls	r2, r2, #3
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2210      	movs	r2, #16
 8002d52:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	2220      	movs	r2, #32
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d00b      	beq.n	8002d74 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2208      	movs	r2, #8
 8002d60:	4013      	ands	r3, r2
 8002d62:	d007      	beq.n	8002d74 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 f8fc 	bl	8002f6c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2210      	movs	r2, #16
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2203      	movs	r2, #3
 8002d84:	4013      	ands	r3, r2
 8002d86:	d003      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 f8e6 	bl	8002f5c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	029b      	lsls	r3, r3, #10
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d007      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2210      	movs	r2, #16
 8002da8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 f8e5 	bl	8002f7c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002db2:	6a3a      	ldr	r2, [r7, #32]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	4013      	ands	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 f8dc 	bl	8002f8c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d100      	bne.n	8002de0 <HAL_CAN_IRQHandler+0x25c>
 8002dde:	e074      	b.n	8002eca <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2204      	movs	r2, #4
 8002de4:	4013      	ands	r3, r2
 8002de6:	d100      	bne.n	8002dea <HAL_CAN_IRQHandler+0x266>
 8002de8:	e06b      	b.n	8002ec2 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dea:	6a3a      	ldr	r2, [r7, #32]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	d007      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dfa:	d003      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4313      	orrs	r3, r2
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2202      	movs	r2, #2
 8002e12:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e14:	d003      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	2202      	movs	r2, #2
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4013      	ands	r3, r2
 8002e26:	d007      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e2e:	d003      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	2204      	movs	r2, #4
 8002e34:	4313      	orrs	r3, r2
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d03f      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2270      	movs	r2, #112	; 0x70
 8002e46:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e48:	d03b      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2270      	movs	r2, #112	; 0x70
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b60      	cmp	r3, #96	; 0x60
 8002e52:	d027      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x320>
 8002e54:	d82c      	bhi.n	8002eb0 <HAL_CAN_IRQHandler+0x32c>
 8002e56:	2b50      	cmp	r3, #80	; 0x50
 8002e58:	d01f      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x316>
 8002e5a:	d829      	bhi.n	8002eb0 <HAL_CAN_IRQHandler+0x32c>
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d017      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x30c>
 8002e60:	d826      	bhi.n	8002eb0 <HAL_CAN_IRQHandler+0x32c>
 8002e62:	2b30      	cmp	r3, #48	; 0x30
 8002e64:	d00f      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x302>
 8002e66:	d823      	bhi.n	8002eb0 <HAL_CAN_IRQHandler+0x32c>
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d002      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x2ee>
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d005      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e70:	e01e      	b.n	8002eb0 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	2208      	movs	r2, #8
 8002e76:	4313      	orrs	r3, r2
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e7a:	e01a      	b.n	8002eb2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	2210      	movs	r2, #16
 8002e80:	4313      	orrs	r3, r2
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e84:	e015      	b.n	8002eb2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2220      	movs	r2, #32
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e8e:	e010      	b.n	8002eb2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	2240      	movs	r2, #64	; 0x40
 8002e94:	4313      	orrs	r3, r2
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e98:	e00b      	b.n	8002eb2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ea2:	e006      	b.n	8002eb2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	0052      	lsls	r2, r2, #1
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002eae:	e000      	b.n	8002eb2 <HAL_CAN_IRQHandler+0x32e>
            break;
 8002eb0:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2170      	movs	r1, #112	; 0x70
 8002ebe:	438a      	bics	r2, r1
 8002ec0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 f85c 	bl	8002f9c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b00a      	add	sp, #40	; 0x28
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}

08002fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fb8:	1dfb      	adds	r3, r7, #7
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8002fbe:	d809      	bhi.n	8002fd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc0:	1dfb      	adds	r3, r7, #7
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	001a      	movs	r2, r3
 8002fc6:	231f      	movs	r3, #31
 8002fc8:	401a      	ands	r2, r3
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_EnableIRQ+0x30>)
 8002fcc:	2101      	movs	r1, #1
 8002fce:	4091      	lsls	r1, r2
 8002fd0:	000a      	movs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
  }
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	1dfb      	adds	r3, r7, #7
 8002fec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fee:	1dfb      	adds	r3, r7, #7
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff4:	d828      	bhi.n	8003048 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ff6:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <__NVIC_SetPriority+0xd4>)
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b25b      	sxtb	r3, r3
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	33c0      	adds	r3, #192	; 0xc0
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	589b      	ldr	r3, [r3, r2]
 8003006:	1dfa      	adds	r2, r7, #7
 8003008:	7812      	ldrb	r2, [r2, #0]
 800300a:	0011      	movs	r1, r2
 800300c:	2203      	movs	r2, #3
 800300e:	400a      	ands	r2, r1
 8003010:	00d2      	lsls	r2, r2, #3
 8003012:	21ff      	movs	r1, #255	; 0xff
 8003014:	4091      	lsls	r1, r2
 8003016:	000a      	movs	r2, r1
 8003018:	43d2      	mvns	r2, r2
 800301a:	401a      	ands	r2, r3
 800301c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	401a      	ands	r2, r3
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	0018      	movs	r0, r3
 800302c:	2303      	movs	r3, #3
 800302e:	4003      	ands	r3, r0
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003034:	481f      	ldr	r0, [pc, #124]	; (80030b4 <__NVIC_SetPriority+0xd4>)
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b25b      	sxtb	r3, r3
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	430a      	orrs	r2, r1
 8003040:	33c0      	adds	r3, #192	; 0xc0
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003046:	e031      	b.n	80030ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003048:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <__NVIC_SetPriority+0xd8>)
 800304a:	1dfb      	adds	r3, r7, #7
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	0019      	movs	r1, r3
 8003050:	230f      	movs	r3, #15
 8003052:	400b      	ands	r3, r1
 8003054:	3b08      	subs	r3, #8
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	3306      	adds	r3, #6
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	18d3      	adds	r3, r2, r3
 800305e:	3304      	adds	r3, #4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	1dfa      	adds	r2, r7, #7
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	0011      	movs	r1, r2
 8003068:	2203      	movs	r2, #3
 800306a:	400a      	ands	r2, r1
 800306c:	00d2      	lsls	r2, r2, #3
 800306e:	21ff      	movs	r1, #255	; 0xff
 8003070:	4091      	lsls	r1, r2
 8003072:	000a      	movs	r2, r1
 8003074:	43d2      	mvns	r2, r2
 8003076:	401a      	ands	r2, r3
 8003078:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	019b      	lsls	r3, r3, #6
 800307e:	22ff      	movs	r2, #255	; 0xff
 8003080:	401a      	ands	r2, r3
 8003082:	1dfb      	adds	r3, r7, #7
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	0018      	movs	r0, r3
 8003088:	2303      	movs	r3, #3
 800308a:	4003      	ands	r3, r0
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003090:	4809      	ldr	r0, [pc, #36]	; (80030b8 <__NVIC_SetPriority+0xd8>)
 8003092:	1dfb      	adds	r3, r7, #7
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	001c      	movs	r4, r3
 8003098:	230f      	movs	r3, #15
 800309a:	4023      	ands	r3, r4
 800309c:	3b08      	subs	r3, #8
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	430a      	orrs	r2, r1
 80030a2:	3306      	adds	r3, #6
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	18c3      	adds	r3, r0, r3
 80030a8:	3304      	adds	r3, #4
 80030aa:	601a      	str	r2, [r3, #0]
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b003      	add	sp, #12
 80030b2:	bd90      	pop	{r4, r7, pc}
 80030b4:	e000e100 	.word	0xe000e100
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1e5a      	subs	r2, r3, #1
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	045b      	lsls	r3, r3, #17
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d301      	bcc.n	80030d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d0:	2301      	movs	r3, #1
 80030d2:	e010      	b.n	80030f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <SysTick_Config+0x44>)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	3a01      	subs	r2, #1
 80030da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030dc:	2301      	movs	r3, #1
 80030de:	425b      	negs	r3, r3
 80030e0:	2103      	movs	r1, #3
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7ff ff7c 	bl	8002fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <SysTick_Config+0x44>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <SysTick_Config+0x44>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	0018      	movs	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b002      	add	sp, #8
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	e000e010 	.word	0xe000e010

08003104 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	210f      	movs	r1, #15
 8003110:	187b      	adds	r3, r7, r1
 8003112:	1c02      	adds	r2, r0, #0
 8003114:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	187b      	adds	r3, r7, r1
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b25b      	sxtb	r3, r3
 800311e:	0011      	movs	r1, r2
 8003120:	0018      	movs	r0, r3
 8003122:	f7ff ff5d 	bl	8002fe0 <__NVIC_SetPriority>
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b004      	add	sp, #16
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	0002      	movs	r2, r0
 8003136:	1dfb      	adds	r3, r7, #7
 8003138:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b25b      	sxtb	r3, r3
 8003140:	0018      	movs	r0, r3
 8003142:	f7ff ff33 	bl	8002fac <__NVIC_EnableIRQ>
}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	46bd      	mov	sp, r7
 800314a:	b002      	add	sp, #8
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	0018      	movs	r0, r3
 800315a:	f7ff ffaf 	bl	80030bc <SysTick_Config>
 800315e:	0003      	movs	r3, r0
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b002      	add	sp, #8
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2221      	movs	r2, #33	; 0x21
 8003174:	5c9b      	ldrb	r3, [r3, r2]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d008      	beq.n	800318e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2204      	movs	r2, #4
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	2100      	movs	r1, #0
 8003188:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e020      	b.n	80031d0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	210e      	movs	r1, #14
 800319a:	438a      	bics	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2101      	movs	r1, #1
 80031aa:	438a      	bics	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	2101      	movs	r1, #1
 80031b8:	4091      	lsls	r1, r2
 80031ba:	000a      	movs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2221      	movs	r2, #33	; 0x21
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	210f      	movs	r1, #15
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2221      	movs	r2, #33	; 0x21
 80031ec:	5c9b      	ldrb	r3, [r3, r2]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d006      	beq.n	8003202 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2204      	movs	r2, #4
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e028      	b.n	8003254 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	210e      	movs	r1, #14
 800320e:	438a      	bics	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	438a      	bics	r2, r1
 8003220:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	2101      	movs	r1, #1
 800322c:	4091      	lsls	r1, r2
 800322e:	000a      	movs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2221      	movs	r2, #33	; 0x21
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	2100      	movs	r1, #0
 8003240:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	0010      	movs	r0, r2
 8003252:	4798      	blx	r3
    } 
  }
  return status;
 8003254:	230f      	movs	r3, #15
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	781b      	ldrb	r3, [r3, #0]
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b004      	add	sp, #16
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003272:	e149      	b.n	8003508 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4091      	lsls	r1, r2
 800327e:	000a      	movs	r2, r1
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d100      	bne.n	800328c <HAL_GPIO_Init+0x28>
 800328a:	e13a      	b.n	8003502 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	4013      	ands	r3, r2
 8003294:	2b01      	cmp	r3, #1
 8003296:	d005      	beq.n	80032a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2203      	movs	r2, #3
 800329e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d130      	bne.n	8003306 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	409a      	lsls	r2, r3
 80032b2:	0013      	movs	r3, r2
 80032b4:	43da      	mvns	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	409a      	lsls	r2, r3
 80032c6:	0013      	movs	r3, r2
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032da:	2201      	movs	r2, #1
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
 80032e0:	0013      	movs	r3, r2
 80032e2:	43da      	mvns	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	2201      	movs	r2, #1
 80032f2:	401a      	ands	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	4013      	ands	r3, r2
 800330e:	2b03      	cmp	r3, #3
 8003310:	d017      	beq.n	8003342 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	2203      	movs	r2, #3
 800331e:	409a      	lsls	r2, r3
 8003320:	0013      	movs	r3, r2
 8003322:	43da      	mvns	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2203      	movs	r2, #3
 8003348:	4013      	ands	r3, r2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d123      	bne.n	8003396 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	08da      	lsrs	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3208      	adds	r2, #8
 8003356:	0092      	lsls	r2, r2, #2
 8003358:	58d3      	ldr	r3, [r2, r3]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2207      	movs	r2, #7
 8003360:	4013      	ands	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	220f      	movs	r2, #15
 8003366:	409a      	lsls	r2, r3
 8003368:	0013      	movs	r3, r2
 800336a:	43da      	mvns	r2, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2107      	movs	r1, #7
 800337a:	400b      	ands	r3, r1
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	409a      	lsls	r2, r3
 8003380:	0013      	movs	r3, r2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	08da      	lsrs	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3208      	adds	r2, #8
 8003390:	0092      	lsls	r2, r2, #2
 8003392:	6939      	ldr	r1, [r7, #16]
 8003394:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	409a      	lsls	r2, r3
 80033a4:	0013      	movs	r3, r2
 80033a6:	43da      	mvns	r2, r3
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2203      	movs	r2, #3
 80033b4:	401a      	ands	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	409a      	lsls	r2, r3
 80033bc:	0013      	movs	r3, r2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	23c0      	movs	r3, #192	; 0xc0
 80033d0:	029b      	lsls	r3, r3, #10
 80033d2:	4013      	ands	r3, r2
 80033d4:	d100      	bne.n	80033d8 <HAL_GPIO_Init+0x174>
 80033d6:	e094      	b.n	8003502 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d8:	4b51      	ldr	r3, [pc, #324]	; (8003520 <HAL_GPIO_Init+0x2bc>)
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	4b50      	ldr	r3, [pc, #320]	; (8003520 <HAL_GPIO_Init+0x2bc>)
 80033de:	2101      	movs	r1, #1
 80033e0:	430a      	orrs	r2, r1
 80033e2:	619a      	str	r2, [r3, #24]
 80033e4:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <HAL_GPIO_Init+0x2bc>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2201      	movs	r2, #1
 80033ea:	4013      	ands	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033f0:	4a4c      	ldr	r2, [pc, #304]	; (8003524 <HAL_GPIO_Init+0x2c0>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	589b      	ldr	r3, [r3, r2]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2203      	movs	r2, #3
 8003402:	4013      	ands	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	409a      	lsls	r2, r3
 800340a:	0013      	movs	r3, r2
 800340c:	43da      	mvns	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	2390      	movs	r3, #144	; 0x90
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	429a      	cmp	r2, r3
 800341c:	d00d      	beq.n	800343a <HAL_GPIO_Init+0x1d6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a41      	ldr	r2, [pc, #260]	; (8003528 <HAL_GPIO_Init+0x2c4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <HAL_GPIO_Init+0x1d2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a40      	ldr	r2, [pc, #256]	; (800352c <HAL_GPIO_Init+0x2c8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_GPIO_Init+0x1ce>
 800342e:	2302      	movs	r3, #2
 8003430:	e004      	b.n	800343c <HAL_GPIO_Init+0x1d8>
 8003432:	2305      	movs	r3, #5
 8003434:	e002      	b.n	800343c <HAL_GPIO_Init+0x1d8>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_GPIO_Init+0x1d8>
 800343a:	2300      	movs	r3, #0
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	2103      	movs	r1, #3
 8003440:	400a      	ands	r2, r1
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	4093      	lsls	r3, r2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800344c:	4935      	ldr	r1, [pc, #212]	; (8003524 <HAL_GPIO_Init+0x2c0>)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	3302      	adds	r3, #2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345a:	4b35      	ldr	r3, [pc, #212]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43da      	mvns	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	025b      	lsls	r3, r3, #9
 8003472:	4013      	ands	r3, r2
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003484:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	43da      	mvns	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4013      	ands	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	029b      	lsls	r3, r3, #10
 800349c:	4013      	ands	r3, r2
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43da      	mvns	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	035b      	lsls	r3, r3, #13
 80034c6:	4013      	ands	r3, r2
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80034d8:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43da      	mvns	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	039b      	lsls	r3, r3, #14
 80034f0:	4013      	ands	r3, r2
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_GPIO_Init+0x2cc>)
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3301      	adds	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	40da      	lsrs	r2, r3
 8003510:	1e13      	subs	r3, r2, #0
 8003512:	d000      	beq.n	8003516 <HAL_GPIO_Init+0x2b2>
 8003514:	e6ae      	b.n	8003274 <HAL_GPIO_Init+0x10>
  } 
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b006      	add	sp, #24
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	40010000 	.word	0x40010000
 8003528:	48000400 	.word	0x48000400
 800352c:	48000800 	.word	0x48000800
 8003530:	40010400 	.word	0x40010400

08003534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	0008      	movs	r0, r1
 800353e:	0011      	movs	r1, r2
 8003540:	1cbb      	adds	r3, r7, #2
 8003542:	1c02      	adds	r2, r0, #0
 8003544:	801a      	strh	r2, [r3, #0]
 8003546:	1c7b      	adds	r3, r7, #1
 8003548:	1c0a      	adds	r2, r1, #0
 800354a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800354c:	1c7b      	adds	r3, r7, #1
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003554:	1cbb      	adds	r3, r7, #2
 8003556:	881a      	ldrh	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800355c:	e003      	b.n	8003566 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800355e:	1cbb      	adds	r3, r7, #2
 8003560:	881a      	ldrh	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	b002      	add	sp, #8
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f000 fb76 	bl	8003c70 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2201      	movs	r2, #1
 800358a:	4013      	ands	r3, r2
 800358c:	d100      	bne.n	8003590 <HAL_RCC_OscConfig+0x20>
 800358e:	e08e      	b.n	80036ae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003590:	4bc5      	ldr	r3, [pc, #788]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	220c      	movs	r2, #12
 8003596:	4013      	ands	r3, r2
 8003598:	2b04      	cmp	r3, #4
 800359a:	d00e      	beq.n	80035ba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800359c:	4bc2      	ldr	r3, [pc, #776]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	220c      	movs	r2, #12
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d117      	bne.n	80035d8 <HAL_RCC_OscConfig+0x68>
 80035a8:	4bbf      	ldr	r3, [pc, #764]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	23c0      	movs	r3, #192	; 0xc0
 80035ae:	025b      	lsls	r3, r3, #9
 80035b0:	401a      	ands	r2, r3
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	025b      	lsls	r3, r3, #9
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d10e      	bne.n	80035d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ba:	4bbb      	ldr	r3, [pc, #748]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	029b      	lsls	r3, r3, #10
 80035c2:	4013      	ands	r3, r2
 80035c4:	d100      	bne.n	80035c8 <HAL_RCC_OscConfig+0x58>
 80035c6:	e071      	b.n	80036ac <HAL_RCC_OscConfig+0x13c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d000      	beq.n	80035d2 <HAL_RCC_OscConfig+0x62>
 80035d0:	e06c      	b.n	80036ac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f000 fb4c 	bl	8003c70 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x80>
 80035e0:	4bb1      	ldr	r3, [pc, #708]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4bb0      	ldr	r3, [pc, #704]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	0249      	lsls	r1, r1, #9
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e02f      	b.n	8003650 <HAL_RCC_OscConfig+0xe0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10c      	bne.n	8003612 <HAL_RCC_OscConfig+0xa2>
 80035f8:	4bab      	ldr	r3, [pc, #684]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4baa      	ldr	r3, [pc, #680]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80035fe:	49ab      	ldr	r1, [pc, #684]	; (80038ac <HAL_RCC_OscConfig+0x33c>)
 8003600:	400a      	ands	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	4ba8      	ldr	r3, [pc, #672]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4ba7      	ldr	r3, [pc, #668]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800360a:	49a9      	ldr	r1, [pc, #676]	; (80038b0 <HAL_RCC_OscConfig+0x340>)
 800360c:	400a      	ands	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e01e      	b.n	8003650 <HAL_RCC_OscConfig+0xe0>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b05      	cmp	r3, #5
 8003618:	d10e      	bne.n	8003638 <HAL_RCC_OscConfig+0xc8>
 800361a:	4ba3      	ldr	r3, [pc, #652]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4ba2      	ldr	r3, [pc, #648]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	02c9      	lsls	r1, r1, #11
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	4b9f      	ldr	r3, [pc, #636]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b9e      	ldr	r3, [pc, #632]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	0249      	lsls	r1, r1, #9
 8003632:	430a      	orrs	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0xe0>
 8003638:	4b9b      	ldr	r3, [pc, #620]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b9a      	ldr	r3, [pc, #616]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800363e:	499b      	ldr	r1, [pc, #620]	; (80038ac <HAL_RCC_OscConfig+0x33c>)
 8003640:	400a      	ands	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	4b98      	ldr	r3, [pc, #608]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b97      	ldr	r3, [pc, #604]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800364a:	4999      	ldr	r1, [pc, #612]	; (80038b0 <HAL_RCC_OscConfig+0x340>)
 800364c:	400a      	ands	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d014      	beq.n	8003682 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fe0c 	bl	8002274 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003662:	f7fe fe07 	bl	8002274 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	; 0x64
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e2fd      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003674:	4b8c      	ldr	r3, [pc, #560]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	029b      	lsls	r3, r3, #10
 800367c:	4013      	ands	r3, r2
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0xf2>
 8003680:	e015      	b.n	80036ae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fe fdf7 	bl	8002274 <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe fdf2 	bl	8002274 <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e2e8      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369e:	4b82      	ldr	r3, [pc, #520]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	4013      	ands	r3, r2
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x11c>
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2202      	movs	r2, #2
 80036b4:	4013      	ands	r3, r2
 80036b6:	d100      	bne.n	80036ba <HAL_RCC_OscConfig+0x14a>
 80036b8:	e06c      	b.n	8003794 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036ba:	4b7b      	ldr	r3, [pc, #492]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	220c      	movs	r2, #12
 80036c0:	4013      	ands	r3, r2
 80036c2:	d00e      	beq.n	80036e2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036c4:	4b78      	ldr	r3, [pc, #480]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	220c      	movs	r2, #12
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d11f      	bne.n	8003710 <HAL_RCC_OscConfig+0x1a0>
 80036d0:	4b75      	ldr	r3, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	23c0      	movs	r3, #192	; 0xc0
 80036d6:	025b      	lsls	r3, r3, #9
 80036d8:	401a      	ands	r2, r3
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	429a      	cmp	r2, r3
 80036e0:	d116      	bne.n	8003710 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2202      	movs	r2, #2
 80036e8:	4013      	ands	r3, r2
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_OscConfig+0x188>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e2bb      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b6b      	ldr	r3, [pc, #428]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	22f8      	movs	r2, #248	; 0xf8
 80036fe:	4393      	bics	r3, r2
 8003700:	0019      	movs	r1, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00da      	lsls	r2, r3, #3
 8003708:	4b67      	ldr	r3, [pc, #412]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	e041      	b.n	8003794 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d024      	beq.n	8003762 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003718:	4b63      	ldr	r3, [pc, #396]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800371e:	2101      	movs	r1, #1
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fe fda6 	bl	8002274 <HAL_GetTick>
 8003728:	0003      	movs	r3, r0
 800372a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800372e:	f7fe fda1 	bl	8002274 <HAL_GetTick>
 8003732:	0002      	movs	r2, r0
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e297      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003740:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2202      	movs	r2, #2
 8003746:	4013      	ands	r3, r2
 8003748:	d0f1      	beq.n	800372e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	22f8      	movs	r2, #248	; 0xf8
 8003750:	4393      	bics	r3, r2
 8003752:	0019      	movs	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	00da      	lsls	r2, r3, #3
 800375a:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e018      	b.n	8003794 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003762:	4b51      	ldr	r3, [pc, #324]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003768:	2101      	movs	r1, #1
 800376a:	438a      	bics	r2, r1
 800376c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fe fd81 	bl	8002274 <HAL_GetTick>
 8003772:	0003      	movs	r3, r0
 8003774:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003778:	f7fe fd7c 	bl	8002274 <HAL_GetTick>
 800377c:	0002      	movs	r2, r0
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e272      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	d1f1      	bne.n	8003778 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2208      	movs	r2, #8
 800379a:	4013      	ands	r3, r2
 800379c:	d036      	beq.n	800380c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d019      	beq.n	80037da <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a6:	4b40      	ldr	r3, [pc, #256]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80037a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80037ac:	2101      	movs	r1, #1
 80037ae:	430a      	orrs	r2, r1
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7fe fd5f 	bl	8002274 <HAL_GetTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037bc:	f7fe fd5a 	bl	8002274 <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e250      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	4b36      	ldr	r3, [pc, #216]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2202      	movs	r2, #2
 80037d4:	4013      	ands	r3, r2
 80037d6:	d0f1      	beq.n	80037bc <HAL_RCC_OscConfig+0x24c>
 80037d8:	e018      	b.n	800380c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037da:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80037dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037de:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 80037e0:	2101      	movs	r1, #1
 80037e2:	438a      	bics	r2, r1
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e6:	f7fe fd45 	bl	8002274 <HAL_GetTick>
 80037ea:	0003      	movs	r3, r0
 80037ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f0:	f7fe fd40 	bl	8002274 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e236      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003802:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	2202      	movs	r2, #2
 8003808:	4013      	ands	r3, r2
 800380a:	d1f1      	bne.n	80037f0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2204      	movs	r2, #4
 8003812:	4013      	ands	r3, r2
 8003814:	d100      	bne.n	8003818 <HAL_RCC_OscConfig+0x2a8>
 8003816:	e0b5      	b.n	8003984 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003818:	201f      	movs	r0, #31
 800381a:	183b      	adds	r3, r7, r0
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	055b      	lsls	r3, r3, #21
 8003828:	4013      	ands	r3, r2
 800382a:	d110      	bne.n	800384e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382c:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	0549      	lsls	r1, r1, #21
 8003836:	430a      	orrs	r2, r1
 8003838:	61da      	str	r2, [r3, #28]
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	055b      	lsls	r3, r3, #21
 8003842:	4013      	ands	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003848:	183b      	adds	r3, r7, r0
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_OscConfig+0x344>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4013      	ands	r3, r2
 8003858:	d11a      	bne.n	8003890 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <HAL_RCC_OscConfig+0x344>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <HAL_RCC_OscConfig+0x344>)
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	0049      	lsls	r1, r1, #1
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003868:	f7fe fd04 	bl	8002274 <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7fe fcff 	bl	8002274 <HAL_GetTick>
 8003876:	0002      	movs	r2, r0
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b64      	cmp	r3, #100	; 0x64
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e1f5      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_OscConfig+0x344>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4013      	ands	r3, r2
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10f      	bne.n	80038b8 <HAL_RCC_OscConfig+0x348>
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800389a:	6a1a      	ldr	r2, [r3, #32]
 800389c:	4b02      	ldr	r3, [pc, #8]	; (80038a8 <HAL_RCC_OscConfig+0x338>)
 800389e:	2101      	movs	r1, #1
 80038a0:	430a      	orrs	r2, r1
 80038a2:	621a      	str	r2, [r3, #32]
 80038a4:	e036      	b.n	8003914 <HAL_RCC_OscConfig+0x3a4>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	40021000 	.word	0x40021000
 80038ac:	fffeffff 	.word	0xfffeffff
 80038b0:	fffbffff 	.word	0xfffbffff
 80038b4:	40007000 	.word	0x40007000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10c      	bne.n	80038da <HAL_RCC_OscConfig+0x36a>
 80038c0:	4bca      	ldr	r3, [pc, #808]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	4bc9      	ldr	r3, [pc, #804]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80038c6:	2101      	movs	r1, #1
 80038c8:	438a      	bics	r2, r1
 80038ca:	621a      	str	r2, [r3, #32]
 80038cc:	4bc7      	ldr	r3, [pc, #796]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80038ce:	6a1a      	ldr	r2, [r3, #32]
 80038d0:	4bc6      	ldr	r3, [pc, #792]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80038d2:	2104      	movs	r1, #4
 80038d4:	438a      	bics	r2, r1
 80038d6:	621a      	str	r2, [r3, #32]
 80038d8:	e01c      	b.n	8003914 <HAL_RCC_OscConfig+0x3a4>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x38c>
 80038e2:	4bc2      	ldr	r3, [pc, #776]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80038e4:	6a1a      	ldr	r2, [r3, #32]
 80038e6:	4bc1      	ldr	r3, [pc, #772]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80038e8:	2104      	movs	r1, #4
 80038ea:	430a      	orrs	r2, r1
 80038ec:	621a      	str	r2, [r3, #32]
 80038ee:	4bbf      	ldr	r3, [pc, #764]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80038f0:	6a1a      	ldr	r2, [r3, #32]
 80038f2:	4bbe      	ldr	r3, [pc, #760]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80038f4:	2101      	movs	r1, #1
 80038f6:	430a      	orrs	r2, r1
 80038f8:	621a      	str	r2, [r3, #32]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0x3a4>
 80038fc:	4bbb      	ldr	r3, [pc, #748]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80038fe:	6a1a      	ldr	r2, [r3, #32]
 8003900:	4bba      	ldr	r3, [pc, #744]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003902:	2101      	movs	r1, #1
 8003904:	438a      	bics	r2, r1
 8003906:	621a      	str	r2, [r3, #32]
 8003908:	4bb8      	ldr	r3, [pc, #736]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 800390a:	6a1a      	ldr	r2, [r3, #32]
 800390c:	4bb7      	ldr	r3, [pc, #732]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 800390e:	2104      	movs	r1, #4
 8003910:	438a      	bics	r2, r1
 8003912:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d014      	beq.n	8003946 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fe fcaa 	bl	8002274 <HAL_GetTick>
 8003920:	0003      	movs	r3, r0
 8003922:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	e009      	b.n	800393a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fe fca5 	bl	8002274 <HAL_GetTick>
 800392a:	0002      	movs	r2, r0
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	4aaf      	ldr	r2, [pc, #700]	; (8003bf0 <HAL_RCC_OscConfig+0x680>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e19a      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393a:	4bac      	ldr	r3, [pc, #688]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	2202      	movs	r2, #2
 8003940:	4013      	ands	r3, r2
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x3b6>
 8003944:	e013      	b.n	800396e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7fe fc95 	bl	8002274 <HAL_GetTick>
 800394a:	0003      	movs	r3, r0
 800394c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394e:	e009      	b.n	8003964 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fe fc90 	bl	8002274 <HAL_GetTick>
 8003954:	0002      	movs	r2, r0
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	4aa5      	ldr	r2, [pc, #660]	; (8003bf0 <HAL_RCC_OscConfig+0x680>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e185      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003964:	4ba1      	ldr	r3, [pc, #644]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	2202      	movs	r2, #2
 800396a:	4013      	ands	r3, r2
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800396e:	231f      	movs	r3, #31
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003978:	4b9c      	ldr	r3, [pc, #624]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	4b9b      	ldr	r3, [pc, #620]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 800397e:	499d      	ldr	r1, [pc, #628]	; (8003bf4 <HAL_RCC_OscConfig+0x684>)
 8003980:	400a      	ands	r2, r1
 8003982:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2210      	movs	r2, #16
 800398a:	4013      	ands	r3, r2
 800398c:	d063      	beq.n	8003a56 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d12a      	bne.n	80039ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003996:	4b95      	ldr	r3, [pc, #596]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399a:	4b94      	ldr	r3, [pc, #592]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 800399c:	2104      	movs	r1, #4
 800399e:	430a      	orrs	r2, r1
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80039a2:	4b92      	ldr	r3, [pc, #584]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80039a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a6:	4b91      	ldr	r3, [pc, #580]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80039a8:	2101      	movs	r1, #1
 80039aa:	430a      	orrs	r2, r1
 80039ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ae:	f7fe fc61 	bl	8002274 <HAL_GetTick>
 80039b2:	0003      	movs	r3, r0
 80039b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039b8:	f7fe fc5c 	bl	8002274 <HAL_GetTick>
 80039bc:	0002      	movs	r2, r0
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e152      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039ca:	4b88      	ldr	r3, [pc, #544]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	2202      	movs	r2, #2
 80039d0:	4013      	ands	r3, r2
 80039d2:	d0f1      	beq.n	80039b8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80039d4:	4b85      	ldr	r3, [pc, #532]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	22f8      	movs	r2, #248	; 0xf8
 80039da:	4393      	bics	r3, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	00da      	lsls	r2, r3, #3
 80039e4:	4b81      	ldr	r3, [pc, #516]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80039e6:	430a      	orrs	r2, r1
 80039e8:	635a      	str	r2, [r3, #52]	; 0x34
 80039ea:	e034      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	3305      	adds	r3, #5
 80039f2:	d111      	bne.n	8003a18 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80039f4:	4b7d      	ldr	r3, [pc, #500]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80039f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f8:	4b7c      	ldr	r3, [pc, #496]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 80039fa:	2104      	movs	r1, #4
 80039fc:	438a      	bics	r2, r1
 80039fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a00:	4b7a      	ldr	r3, [pc, #488]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	22f8      	movs	r2, #248	; 0xf8
 8003a06:	4393      	bics	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	00da      	lsls	r2, r3, #3
 8003a10:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a12:	430a      	orrs	r2, r1
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34
 8003a16:	e01e      	b.n	8003a56 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a18:	4b74      	ldr	r3, [pc, #464]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1c:	4b73      	ldr	r3, [pc, #460]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a1e:	2104      	movs	r1, #4
 8003a20:	430a      	orrs	r2, r1
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003a24:	4b71      	ldr	r3, [pc, #452]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a28:	4b70      	ldr	r3, [pc, #448]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a30:	f7fe fc20 	bl	8002274 <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a3a:	f7fe fc1b 	bl	8002274 <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e111      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a4c:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	2202      	movs	r2, #2
 8003a52:	4013      	ands	r3, r2
 8003a54:	d1f1      	bne.n	8003a3a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d05c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003a60:	4b62      	ldr	r3, [pc, #392]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	220c      	movs	r2, #12
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d00e      	beq.n	8003a8a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003a6c:	4b5f      	ldr	r3, [pc, #380]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	220c      	movs	r2, #12
 8003a72:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d114      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003a78:	4b5c      	ldr	r3, [pc, #368]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	23c0      	movs	r3, #192	; 0xc0
 8003a7e:	025b      	lsls	r3, r3, #9
 8003a80:	401a      	ands	r2, r3
 8003a82:	23c0      	movs	r3, #192	; 0xc0
 8003a84:	025b      	lsls	r3, r3, #9
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d10b      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003a8a:	4b58      	ldr	r3, [pc, #352]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	025b      	lsls	r3, r3, #9
 8003a92:	4013      	ands	r3, r2
 8003a94:	d040      	beq.n	8003b18 <HAL_RCC_OscConfig+0x5a8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d03c      	beq.n	8003b18 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e0e6      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01b      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003aaa:	4b50      	ldr	r3, [pc, #320]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aae:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	0249      	lsls	r1, r1, #9
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fbdc 	bl	8002274 <HAL_GetTick>
 8003abc:	0003      	movs	r3, r0
 8003abe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ac2:	f7fe fbd7 	bl	8002274 <HAL_GetTick>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0cd      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003ad4:	4b45      	ldr	r3, [pc, #276]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	025b      	lsls	r3, r3, #9
 8003adc:	4013      	ands	r3, r2
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x552>
 8003ae0:	e01b      	b.n	8003b1a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003ae2:	4b42      	ldr	r3, [pc, #264]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003ae8:	4943      	ldr	r1, [pc, #268]	; (8003bf8 <HAL_RCC_OscConfig+0x688>)
 8003aea:	400a      	ands	r2, r1
 8003aec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fe fbc1 	bl	8002274 <HAL_GetTick>
 8003af2:	0003      	movs	r3, r0
 8003af4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af8:	f7fe fbbc 	bl	8002274 <HAL_GetTick>
 8003afc:	0002      	movs	r2, r0
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0b2      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003b0a:	4b38      	ldr	r3, [pc, #224]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	025b      	lsls	r3, r3, #9
 8003b12:	4013      	ands	r3, r2
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x588>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003b18:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d100      	bne.n	8003b24 <HAL_RCC_OscConfig+0x5b4>
 8003b22:	e0a4      	b.n	8003c6e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b24:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	220c      	movs	r2, #12
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d100      	bne.n	8003b32 <HAL_RCC_OscConfig+0x5c2>
 8003b30:	e078      	b.n	8003c24 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d14c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b40:	492e      	ldr	r1, [pc, #184]	; (8003bfc <HAL_RCC_OscConfig+0x68c>)
 8003b42:	400a      	ands	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fe fb95 	bl	8002274 <HAL_GetTick>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe fb90 	bl	8002274 <HAL_GetTick>
 8003b54:	0002      	movs	r2, r0
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e086      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b62:	4b22      	ldr	r3, [pc, #136]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	049b      	lsls	r3, r3, #18
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	220f      	movs	r2, #15
 8003b74:	4393      	bics	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b82:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_RCC_OscConfig+0x690>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	431a      	orrs	r2, r3
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b9c:	4b13      	ldr	r3, [pc, #76]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	0449      	lsls	r1, r1, #17
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003baa:	f7fe fb63 	bl	8002274 <HAL_GetTick>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb4:	f7fe fb5e 	bl	8002274 <HAL_GetTick>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e054      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	049b      	lsls	r3, r3, #18
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x644>
 8003bd2:	e04c      	b.n	8003c6e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <HAL_RCC_OscConfig+0x67c>)
 8003bda:	4908      	ldr	r1, [pc, #32]	; (8003bfc <HAL_RCC_OscConfig+0x68c>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fe fb48 	bl	8002274 <HAL_GetTick>
 8003be4:	0003      	movs	r3, r0
 8003be6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be8:	e015      	b.n	8003c16 <HAL_RCC_OscConfig+0x6a6>
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	00001388 	.word	0x00001388
 8003bf4:	efffffff 	.word	0xefffffff
 8003bf8:	fffeffff 	.word	0xfffeffff
 8003bfc:	feffffff 	.word	0xfeffffff
 8003c00:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe fb36 	bl	8002274 <HAL_GetTick>
 8003c08:	0002      	movs	r2, r0
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e02c      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c16:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <HAL_RCC_OscConfig+0x708>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	049b      	lsls	r3, r3, #18
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x694>
 8003c22:	e024      	b.n	8003c6e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e01f      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003c30:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <HAL_RCC_OscConfig+0x708>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <HAL_RCC_OscConfig+0x708>)
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	23c0      	movs	r3, #192	; 0xc0
 8003c40:	025b      	lsls	r3, r3, #9
 8003c42:	401a      	ands	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d10e      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	220f      	movs	r2, #15
 8003c50:	401a      	ands	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	23f0      	movs	r3, #240	; 0xf0
 8003c5e:	039b      	lsls	r3, r3, #14
 8003c60:	401a      	ands	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	0018      	movs	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b008      	add	sp, #32
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0bf      	b.n	8003e10 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c90:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <HAL_RCC_ClockConfig+0x19c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	4013      	ands	r3, r2
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d911      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b5e      	ldr	r3, [pc, #376]	; (8003e18 <HAL_RCC_ClockConfig+0x19c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <HAL_RCC_ClockConfig+0x19c>)
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb0:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_RCC_ClockConfig+0x19c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0a6      	b.n	8003e10 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d006      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003cd6:	4b51      	ldr	r3, [pc, #324]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	4b50      	ldr	r3, [pc, #320]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003cdc:	21e0      	movs	r1, #224	; 0xe0
 8003cde:	00c9      	lsls	r1, r1, #3
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b4d      	ldr	r3, [pc, #308]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	22f0      	movs	r2, #240	; 0xf0
 8003cea:	4393      	bics	r3, r2
 8003cec:	0019      	movs	r1, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d04c      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d107      	bne.n	8003d1a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b44      	ldr	r3, [pc, #272]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	029b      	lsls	r3, r3, #10
 8003d12:	4013      	ands	r3, r2
 8003d14:	d120      	bne.n	8003d58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e07a      	b.n	8003e10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	4b3e      	ldr	r3, [pc, #248]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	049b      	lsls	r3, r3, #18
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d114      	bne.n	8003d58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06e      	b.n	8003e10 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003d3a:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	025b      	lsls	r3, r3, #9
 8003d42:	4013      	ands	r3, r2
 8003d44:	d108      	bne.n	8003d58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e062      	b.n	8003e10 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	4013      	ands	r3, r2
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e05b      	b.n	8003e10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d58:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	4393      	bics	r3, r2
 8003d60:	0019      	movs	r1, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d6c:	f7fe fa82 	bl	8002274 <HAL_GetTick>
 8003d70:	0003      	movs	r3, r0
 8003d72:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d74:	e009      	b.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d76:	f7fe fa7d 	bl	8002274 <HAL_GetTick>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <HAL_RCC_ClockConfig+0x1a4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e042      	b.n	8003e10 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	220c      	movs	r2, #12
 8003d90:	401a      	ands	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1ec      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCC_ClockConfig+0x19c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2201      	movs	r2, #1
 8003da2:	4013      	ands	r3, r2
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d211      	bcs.n	8003dce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_ClockConfig+0x19c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2201      	movs	r2, #1
 8003db0:	4393      	bics	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <HAL_RCC_ClockConfig+0x19c>)
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbc:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_RCC_ClockConfig+0x19c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e020      	b.n	8003e10 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <HAL_RCC_ClockConfig+0x1a8>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	0019      	movs	r1, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dec:	f000 f820 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8003df0:	0001      	movs	r1, r0
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_RCC_ClockConfig+0x1a0>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	220f      	movs	r2, #15
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <HAL_RCC_ClockConfig+0x1ac>)
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	000a      	movs	r2, r1
 8003e02:	40da      	lsrs	r2, r3
 8003e04:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x1b0>)
 8003e06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003e08:	2003      	movs	r0, #3
 8003e0a:	f7fe f9ed 	bl	80021e8 <HAL_InitTick>
  
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b004      	add	sp, #16
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	00001388 	.word	0x00001388
 8003e24:	fffff8ff 	.word	0xfffff8ff
 8003e28:	080070a4 	.word	0x080070a4
 8003e2c:	20000000 	.word	0x20000000

08003e30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b08f      	sub	sp, #60	; 0x3c
 8003e34:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003e36:	2314      	movs	r3, #20
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	4a38      	ldr	r2, [pc, #224]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xec>)
 8003e3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e3e:	c313      	stmia	r3!, {r0, r1, r4}
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	4a36      	ldr	r2, [pc, #216]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e4a:	c313      	stmia	r3!, {r0, r1, r4}
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e54:	2300      	movs	r3, #0
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e58:	2300      	movs	r3, #0
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003e64:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b0c      	cmp	r3, #12
 8003e72:	d047      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0xd4>
 8003e74:	d849      	bhi.n	8003f0a <HAL_RCC_GetSysClockFreq+0xda>
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d002      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x50>
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x56>
 8003e7e:	e044      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e80:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e84:	e044      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	0c9b      	lsrs	r3, r3, #18
 8003e8a:	220f      	movs	r2, #15
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2214      	movs	r2, #20
 8003e90:	18ba      	adds	r2, r7, r2
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003e96:	4b23      	ldr	r3, [pc, #140]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	220f      	movs	r2, #15
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	1d3a      	adds	r2, r7, #4
 8003ea0:	5cd3      	ldrb	r3, [r2, r3]
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea6:	23c0      	movs	r3, #192	; 0xc0
 8003ea8:	025b      	lsls	r3, r3, #9
 8003eaa:	401a      	ands	r2, r3
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	025b      	lsls	r3, r3, #9
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d109      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb6:	481c      	ldr	r0, [pc, #112]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eb8:	f7fc f938 	bl	800012c <__udivsi3>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	4353      	muls	r3, r2
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec6:	e01a      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eca:	23c0      	movs	r3, #192	; 0xc0
 8003ecc:	025b      	lsls	r3, r3, #9
 8003ece:	401a      	ands	r2, r3
 8003ed0:	23c0      	movs	r3, #192	; 0xc0
 8003ed2:	025b      	lsls	r3, r3, #9
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d109      	bne.n	8003eec <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eda:	4814      	ldr	r0, [pc, #80]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003edc:	f7fc f926 	bl	800012c <__udivsi3>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	4353      	muls	r3, r2
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	e008      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eee:	480e      	ldr	r0, [pc, #56]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ef0:	f7fc f91c 	bl	800012c <__udivsi3>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	4353      	muls	r3, r2
 8003efc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f02:	e005      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f08:	e002      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f0a:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f0e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b00f      	add	sp, #60	; 0x3c
 8003f18:	bd90      	pop	{r4, r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	08007014 	.word	0x08007014
 8003f20:	08007024 	.word	0x08007024
 8003f24:	40021000 	.word	0x40021000
 8003f28:	007a1200 	.word	0x007a1200
 8003f2c:	02dc6c00 	.word	0x02dc6c00

08003f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f34:	4b02      	ldr	r3, [pc, #8]	; (8003f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	20000000 	.word	0x20000000

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003f48:	f7ff fff2 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f4c:	0001      	movs	r1, r0
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	2207      	movs	r2, #7
 8003f56:	4013      	ands	r3, r2
 8003f58:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	40d9      	lsrs	r1, r3
 8003f5e:	000b      	movs	r3, r1
}    
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	080070b4 	.word	0x080070b4

08003f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	025b      	lsls	r3, r3, #9
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d100      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003f8c:	e08e      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003f8e:	2017      	movs	r0, #23
 8003f90:	183b      	adds	r3, r7, r0
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	4b67      	ldr	r3, [pc, #412]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	055b      	lsls	r3, r3, #21
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d110      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	4b64      	ldr	r3, [pc, #400]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fa4:	69da      	ldr	r2, [r3, #28]
 8003fa6:	4b63      	ldr	r3, [pc, #396]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0549      	lsls	r1, r1, #21
 8003fac:	430a      	orrs	r2, r1
 8003fae:	61da      	str	r2, [r3, #28]
 8003fb0:	4b60      	ldr	r3, [pc, #384]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	055b      	lsls	r3, r3, #21
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fbe:	183b      	adds	r3, r7, r0
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d11a      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd0:	4b59      	ldr	r3, [pc, #356]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b58      	ldr	r3, [pc, #352]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003fd6:	2180      	movs	r1, #128	; 0x80
 8003fd8:	0049      	lsls	r1, r1, #1
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fde:	f7fe f949 	bl	8002274 <HAL_GetTick>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	e008      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe8:	f7fe f944 	bl	8002274 <HAL_GetTick>
 8003fec:	0002      	movs	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	; 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e097      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b4f      	ldr	r3, [pc, #316]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4013      	ands	r3, r2
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004006:	4b4b      	ldr	r3, [pc, #300]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	23c0      	movs	r3, #192	; 0xc0
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4013      	ands	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d034      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	23c0      	movs	r3, #192	; 0xc0
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4013      	ands	r3, r2
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	429a      	cmp	r2, r3
 8004026:	d02c      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004028:	4b42      	ldr	r3, [pc, #264]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4a43      	ldr	r2, [pc, #268]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800402e:	4013      	ands	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004032:	4b40      	ldr	r3, [pc, #256]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004034:	6a1a      	ldr	r2, [r3, #32]
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004038:	2180      	movs	r1, #128	; 0x80
 800403a:	0249      	lsls	r1, r1, #9
 800403c:	430a      	orrs	r2, r1
 800403e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004040:	4b3c      	ldr	r3, [pc, #240]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004046:	493e      	ldr	r1, [pc, #248]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	400a      	ands	r2, r1
 800404a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800404c:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	4013      	ands	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fe f90b 	bl	8002274 <HAL_GetTick>
 800405e:	0003      	movs	r3, r0
 8004060:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	e009      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fe f906 	bl	8002274 <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	4a35      	ldr	r2, [pc, #212]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e058      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	2202      	movs	r2, #2
 800407e:	4013      	ands	r3, r2
 8004080:	d0f0      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004082:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4a2d      	ldr	r2, [pc, #180]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004088:	4013      	ands	r3, r2
 800408a:	0019      	movs	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	4b28      	ldr	r3, [pc, #160]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004092:	430a      	orrs	r2, r1
 8004094:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004096:	2317      	movs	r3, #23
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a0:	4b24      	ldr	r3, [pc, #144]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	4b23      	ldr	r3, [pc, #140]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040a6:	4928      	ldr	r1, [pc, #160]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040a8:	400a      	ands	r2, r1
 80040aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2201      	movs	r2, #1
 80040b2:	4013      	ands	r3, r2
 80040b4:	d009      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b6:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	2203      	movs	r2, #3
 80040bc:	4393      	bics	r3, r2
 80040be:	0019      	movs	r1, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040c6:	430a      	orrs	r2, r1
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2220      	movs	r2, #32
 80040d0:	4013      	ands	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	2210      	movs	r2, #16
 80040da:	4393      	bics	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040e4:	430a      	orrs	r2, r1
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	4013      	ands	r3, r2
 80040f2:	d009      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	2280      	movs	r2, #128	; 0x80
 80040fa:	4393      	bics	r3, r2
 80040fc:	0019      	movs	r1, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004104:	430a      	orrs	r2, r1
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4013      	ands	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	2240      	movs	r2, #64	; 0x40
 800411a:	4393      	bics	r3, r2
 800411c:	0019      	movs	r1, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	4b04      	ldr	r3, [pc, #16]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004124:	430a      	orrs	r2, r1
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b006      	add	sp, #24
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	40021000 	.word	0x40021000
 8004138:	40007000 	.word	0x40007000
 800413c:	fffffcff 	.word	0xfffffcff
 8004140:	fffeffff 	.word	0xfffeffff
 8004144:	00001388 	.word	0x00001388
 8004148:	efffffff 	.word	0xefffffff

0800414c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e042      	b.n	80041e4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	223d      	movs	r2, #61	; 0x3d
 8004162:	5c9b      	ldrb	r3, [r3, r2]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	223c      	movs	r2, #60	; 0x3c
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0018      	movs	r0, r3
 8004176:	f7fd feeb 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	223d      	movs	r2, #61	; 0x3d
 800417e:	2102      	movs	r1, #2
 8004180:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	0019      	movs	r1, r3
 800418c:	0010      	movs	r0, r2
 800418e:	f000 f9af 	bl	80044f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2246      	movs	r2, #70	; 0x46
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	223e      	movs	r2, #62	; 0x3e
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	223f      	movs	r2, #63	; 0x3f
 80041a6:	2101      	movs	r1, #1
 80041a8:	5499      	strb	r1, [r3, r2]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2240      	movs	r2, #64	; 0x40
 80041ae:	2101      	movs	r1, #1
 80041b0:	5499      	strb	r1, [r3, r2]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2241      	movs	r2, #65	; 0x41
 80041b6:	2101      	movs	r1, #1
 80041b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2242      	movs	r2, #66	; 0x42
 80041be:	2101      	movs	r1, #1
 80041c0:	5499      	strb	r1, [r3, r2]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2243      	movs	r2, #67	; 0x43
 80041c6:	2101      	movs	r1, #1
 80041c8:	5499      	strb	r1, [r3, r2]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2244      	movs	r2, #68	; 0x44
 80041ce:	2101      	movs	r1, #1
 80041d0:	5499      	strb	r1, [r3, r2]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2245      	movs	r2, #69	; 0x45
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	223d      	movs	r2, #61	; 0x3d
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	223d      	movs	r2, #61	; 0x3d
 80041f8:	5c9b      	ldrb	r3, [r3, r2]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d001      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e036      	b.n	8004272 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	223d      	movs	r2, #61	; 0x3d
 8004208:	2102      	movs	r1, #2
 800420a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2101      	movs	r1, #1
 8004218:	430a      	orrs	r2, r1
 800421a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <HAL_TIM_Base_Start_IT+0x90>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00a      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x50>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	05db      	lsls	r3, r3, #23
 800422e:	429a      	cmp	r2, r3
 8004230:	d004      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x50>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a12      	ldr	r2, [pc, #72]	; (8004280 <HAL_TIM_Base_Start_IT+0x94>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d111      	bne.n	8004260 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2207      	movs	r2, #7
 8004244:	4013      	ands	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b06      	cmp	r3, #6
 800424c:	d010      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2101      	movs	r1, #1
 800425a:	430a      	orrs	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425e:	e007      	b.n	8004270 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2101      	movs	r1, #1
 800426c:	430a      	orrs	r2, r1
 800426e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	0018      	movs	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	b004      	add	sp, #16
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40000400 	.word	0x40000400

08004284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2202      	movs	r2, #2
 8004294:	4013      	ands	r3, r2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d124      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2202      	movs	r2, #2
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d11d      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2203      	movs	r2, #3
 80042ae:	4252      	negs	r2, r2
 80042b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2203      	movs	r2, #3
 80042c0:	4013      	ands	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 f8fa 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 80042cc:	e007      	b.n	80042de <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 f8ed 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 f8f9 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2204      	movs	r2, #4
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d125      	bne.n	800433e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2204      	movs	r2, #4
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d11e      	bne.n	800433e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2205      	movs	r2, #5
 8004306:	4252      	negs	r2, r2
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	23c0      	movs	r3, #192	; 0xc0
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4013      	ands	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	0018      	movs	r0, r3
 8004322:	f000 f8cd 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 8004326:	e007      	b.n	8004338 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f8c0 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f000 f8cc 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	2208      	movs	r2, #8
 8004346:	4013      	ands	r3, r2
 8004348:	2b08      	cmp	r3, #8
 800434a:	d124      	bne.n	8004396 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2208      	movs	r2, #8
 8004354:	4013      	ands	r3, r2
 8004356:	2b08      	cmp	r3, #8
 8004358:	d11d      	bne.n	8004396 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2209      	movs	r2, #9
 8004360:	4252      	negs	r2, r2
 8004362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2204      	movs	r2, #4
 8004368:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	2203      	movs	r2, #3
 8004372:	4013      	ands	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0018      	movs	r0, r3
 800437a:	f000 f8a1 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 800437e:	e007      	b.n	8004390 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0018      	movs	r0, r3
 8004384:	f000 f894 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	0018      	movs	r0, r3
 800438c:	f000 f8a0 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2210      	movs	r2, #16
 800439e:	4013      	ands	r3, r2
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d125      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2210      	movs	r2, #16
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d11e      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2211      	movs	r2, #17
 80043b8:	4252      	negs	r2, r2
 80043ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2208      	movs	r2, #8
 80043c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	23c0      	movs	r3, #192	; 0xc0
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4013      	ands	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	0018      	movs	r0, r3
 80043d4:	f000 f874 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e007      	b.n	80043ea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 f867 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0018      	movs	r0, r3
 80043e6:	f000 f873 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2201      	movs	r2, #1
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d10f      	bne.n	800441e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	4013      	ands	r3, r2
 8004408:	2b01      	cmp	r3, #1
 800440a:	d108      	bne.n	800441e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2202      	movs	r2, #2
 8004412:	4252      	negs	r2, r2
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0018      	movs	r0, r3
 800441a:	f7fc ff7d 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2280      	movs	r2, #128	; 0x80
 8004426:	4013      	ands	r3, r2
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d10f      	bne.n	800444c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2280      	movs	r2, #128	; 0x80
 8004434:	4013      	ands	r3, r2
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d108      	bne.n	800444c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2281      	movs	r2, #129	; 0x81
 8004440:	4252      	negs	r2, r2
 8004442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f000 f8d0 	bl	80045ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2240      	movs	r2, #64	; 0x40
 8004454:	4013      	ands	r3, r2
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	d10f      	bne.n	800447a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2240      	movs	r2, #64	; 0x40
 8004462:	4013      	ands	r3, r2
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d108      	bne.n	800447a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2241      	movs	r2, #65	; 0x41
 800446e:	4252      	negs	r2, r2
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f833 	bl	80044e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2220      	movs	r2, #32
 8004482:	4013      	ands	r3, r2
 8004484:	2b20      	cmp	r3, #32
 8004486:	d10f      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	4013      	ands	r3, r2
 8004492:	2b20      	cmp	r3, #32
 8004494:	d108      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2221      	movs	r2, #33	; 0x21
 800449c:	4252      	negs	r2, r2
 800449e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 f89a 	bl	80045dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b002      	add	sp, #8
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a30      	ldr	r2, [pc, #192]	; (80045c4 <TIM_Base_SetConfig+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d008      	beq.n	800451a <TIM_Base_SetConfig+0x2a>
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	05db      	lsls	r3, r3, #23
 800450e:	429a      	cmp	r2, r3
 8004510:	d003      	beq.n	800451a <TIM_Base_SetConfig+0x2a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <TIM_Base_SetConfig+0xd8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2270      	movs	r2, #112	; 0x70
 800451e:	4393      	bics	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <TIM_Base_SetConfig+0xd4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d014      	beq.n	800455e <TIM_Base_SetConfig+0x6e>
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	05db      	lsls	r3, r3, #23
 800453a:	429a      	cmp	r2, r3
 800453c:	d00f      	beq.n	800455e <TIM_Base_SetConfig+0x6e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <TIM_Base_SetConfig+0xd8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_Base_SetConfig+0x6e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a20      	ldr	r2, [pc, #128]	; (80045cc <TIM_Base_SetConfig+0xdc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_Base_SetConfig+0x6e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <TIM_Base_SetConfig+0xe0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0x6e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <TIM_Base_SetConfig+0xe4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <TIM_Base_SetConfig+0xe8>)
 8004562:	4013      	ands	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	4393      	bics	r3, r2
 8004576:	001a      	movs	r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <TIM_Base_SetConfig+0xd4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0xbe>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a0b      	ldr	r2, [pc, #44]	; (80045d0 <TIM_Base_SetConfig+0xe0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0xbe>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <TIM_Base_SetConfig+0xe4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d103      	bne.n	80045b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	615a      	str	r2, [r3, #20]
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b004      	add	sp, #16
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40002000 	.word	0x40002000
 80045d0:	40014400 	.word	0x40014400
 80045d4:	40014800 	.word	0x40014800
 80045d8:	fffffcff 	.word	0xfffffcff

080045dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b002      	add	sp, #8
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e044      	b.n	8004698 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004612:	2b00      	cmp	r3, #0
 8004614:	d107      	bne.n	8004626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2274      	movs	r2, #116	; 0x74
 800461a:	2100      	movs	r1, #0
 800461c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f7fd fcbd 	bl	8001fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2224      	movs	r2, #36	; 0x24
 800462a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2101      	movs	r1, #1
 8004638:	438a      	bics	r2, r1
 800463a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 fbfe 	bl	8004e40 <UART_SetConfig>
 8004644:	0003      	movs	r3, r0
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e024      	b.n	8004698 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f000 fd31 	bl	80050c0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	490d      	ldr	r1, [pc, #52]	; (80046a0 <HAL_UART_Init+0xa4>)
 800466a:	400a      	ands	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	212a      	movs	r1, #42	; 0x2a
 800467a:	438a      	bics	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2101      	movs	r1, #1
 800468a:	430a      	orrs	r2, r1
 800468c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f000 fdc9 	bl	8005228 <UART_CheckIdleState>
 8004696:	0003      	movs	r3, r0
}
 8004698:	0018      	movs	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	b002      	add	sp, #8
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	ffffb7ff 	.word	0xffffb7ff

080046a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	1dbb      	adds	r3, r7, #6
 80046b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d000      	beq.n	80046bc <HAL_UART_Transmit_IT+0x18>
 80046ba:	e06a      	b.n	8004792 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_UART_Transmit_IT+0x26>
 80046c2:	1dbb      	adds	r3, r7, #6
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e062      	b.n	8004794 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	015b      	lsls	r3, r3, #5
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d109      	bne.n	80046ee <HAL_UART_Transmit_IT+0x4a>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2201      	movs	r2, #1
 80046e6:	4013      	ands	r3, r2
 80046e8:	d001      	beq.n	80046ee <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e052      	b.n	8004794 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2274      	movs	r2, #116	; 0x74
 80046f2:	5c9b      	ldrb	r3, [r3, r2]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_UART_Transmit_IT+0x58>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e04b      	b.n	8004794 <HAL_UART_Transmit_IT+0xf0>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2274      	movs	r2, #116	; 0x74
 8004700:	2101      	movs	r1, #1
 8004702:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1dba      	adds	r2, r7, #6
 800470e:	2150      	movs	r1, #80	; 0x50
 8004710:	8812      	ldrh	r2, [r2, #0]
 8004712:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1dba      	adds	r2, r7, #6
 8004718:	2152      	movs	r1, #82	; 0x52
 800471a:	8812      	ldrh	r2, [r2, #0]
 800471c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	2100      	movs	r1, #0
 800472a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2221      	movs	r2, #33	; 0x21
 8004730:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	015b      	lsls	r3, r3, #5
 800473a:	429a      	cmp	r2, r3
 800473c:	d107      	bne.n	800474e <HAL_UART_Transmit_IT+0xaa>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a14      	ldr	r2, [pc, #80]	; (800479c <HAL_UART_Transmit_IT+0xf8>)
 800474a:	669a      	str	r2, [r3, #104]	; 0x68
 800474c:	e002      	b.n	8004754 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a13      	ldr	r2, [pc, #76]	; (80047a0 <HAL_UART_Transmit_IT+0xfc>)
 8004752:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2274      	movs	r2, #116	; 0x74
 8004758:	2100      	movs	r1, #0
 800475a:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475c:	f3ef 8310 	mrs	r3, PRIMASK
 8004760:	613b      	str	r3, [r7, #16]
  return(result);
 8004762:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	2301      	movs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			; (mov r8, r8)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2180      	movs	r1, #128	; 0x80
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	f383 8810 	msr	PRIMASK, r3
}
 800478c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e000      	b.n	8004794 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b008      	add	sp, #32
 800479a:	bd80      	pop	{r7, pc}
 800479c:	08005747 	.word	0x08005747
 80047a0:	08005693 	.word	0x08005693

080047a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	1dbb      	adds	r3, r7, #6
 80047b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d150      	bne.n	800485c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_UART_Receive_IT+0x24>
 80047c0:	1dbb      	adds	r3, r7, #6
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e048      	b.n	800485e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	015b      	lsls	r3, r3, #5
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d109      	bne.n	80047ec <HAL_UART_Receive_IT+0x48>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2201      	movs	r2, #1
 80047e4:	4013      	ands	r3, r2
 80047e6:	d001      	beq.n	80047ec <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e038      	b.n	800485e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2274      	movs	r2, #116	; 0x74
 80047f0:	5c9b      	ldrb	r3, [r3, r2]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Receive_IT+0x56>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e031      	b.n	800485e <HAL_UART_Receive_IT+0xba>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2274      	movs	r2, #116	; 0x74
 80047fe:	2101      	movs	r1, #1
 8004800:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	041b      	lsls	r3, r3, #16
 8004812:	4013      	ands	r3, r2
 8004814:	d019      	beq.n	800484a <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004816:	f3ef 8310 	mrs	r3, PRIMASK
 800481a:	613b      	str	r3, [r7, #16]
  return(result);
 800481c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	2301      	movs	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f383 8810 	msr	PRIMASK, r3
}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	04c9      	lsls	r1, r1, #19
 800483a:	430a      	orrs	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800484a:	1dbb      	adds	r3, r7, #6
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	0018      	movs	r0, r3
 8004854:	f000 fdf4 	bl	8005440 <UART_Start_Receive_IT>
 8004858:	0003      	movs	r3, r0
 800485a:	e000      	b.n	800485e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	0018      	movs	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	b008      	add	sp, #32
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b0ab      	sub	sp, #172	; 0xac
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	22a4      	movs	r2, #164	; 0xa4
 8004878:	18b9      	adds	r1, r7, r2
 800487a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	20a0      	movs	r0, #160	; 0xa0
 8004884:	1839      	adds	r1, r7, r0
 8004886:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	219c      	movs	r1, #156	; 0x9c
 8004890:	1879      	adds	r1, r7, r1
 8004892:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004894:	0011      	movs	r1, r2
 8004896:	18bb      	adds	r3, r7, r2
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a99      	ldr	r2, [pc, #612]	; (8004b00 <HAL_UART_IRQHandler+0x298>)
 800489c:	4013      	ands	r3, r2
 800489e:	2298      	movs	r2, #152	; 0x98
 80048a0:	18bc      	adds	r4, r7, r2
 80048a2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80048a4:	18bb      	adds	r3, r7, r2
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d114      	bne.n	80048d6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2220      	movs	r2, #32
 80048b2:	4013      	ands	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048b6:	183b      	adds	r3, r7, r0
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2220      	movs	r2, #32
 80048bc:	4013      	ands	r3, r2
 80048be:	d00a      	beq.n	80048d6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d100      	bne.n	80048ca <HAL_UART_IRQHandler+0x62>
 80048c8:	e296      	b.n	8004df8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	0010      	movs	r0, r2
 80048d2:	4798      	blx	r3
      }
      return;
 80048d4:	e290      	b.n	8004df8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048d6:	2398      	movs	r3, #152	; 0x98
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d100      	bne.n	80048e2 <HAL_UART_IRQHandler+0x7a>
 80048e0:	e114      	b.n	8004b0c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048e2:	239c      	movs	r3, #156	; 0x9c
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2201      	movs	r2, #1
 80048ea:	4013      	ands	r3, r2
 80048ec:	d106      	bne.n	80048fc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048ee:	23a0      	movs	r3, #160	; 0xa0
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a83      	ldr	r2, [pc, #524]	; (8004b04 <HAL_UART_IRQHandler+0x29c>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	d100      	bne.n	80048fc <HAL_UART_IRQHandler+0x94>
 80048fa:	e107      	b.n	8004b0c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048fc:	23a4      	movs	r3, #164	; 0xa4
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2201      	movs	r2, #1
 8004904:	4013      	ands	r3, r2
 8004906:	d012      	beq.n	800492e <HAL_UART_IRQHandler+0xc6>
 8004908:	23a0      	movs	r3, #160	; 0xa0
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4013      	ands	r3, r2
 8004914:	d00b      	beq.n	800492e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2201      	movs	r2, #1
 800491c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2280      	movs	r2, #128	; 0x80
 8004922:	589b      	ldr	r3, [r3, r2]
 8004924:	2201      	movs	r2, #1
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2180      	movs	r1, #128	; 0x80
 800492c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800492e:	23a4      	movs	r3, #164	; 0xa4
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2202      	movs	r2, #2
 8004936:	4013      	ands	r3, r2
 8004938:	d011      	beq.n	800495e <HAL_UART_IRQHandler+0xf6>
 800493a:	239c      	movs	r3, #156	; 0x9c
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2201      	movs	r2, #1
 8004942:	4013      	ands	r3, r2
 8004944:	d00b      	beq.n	800495e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2202      	movs	r2, #2
 800494c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2280      	movs	r2, #128	; 0x80
 8004952:	589b      	ldr	r3, [r3, r2]
 8004954:	2204      	movs	r2, #4
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800495e:	23a4      	movs	r3, #164	; 0xa4
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2204      	movs	r2, #4
 8004966:	4013      	ands	r3, r2
 8004968:	d011      	beq.n	800498e <HAL_UART_IRQHandler+0x126>
 800496a:	239c      	movs	r3, #156	; 0x9c
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2201      	movs	r2, #1
 8004972:	4013      	ands	r3, r2
 8004974:	d00b      	beq.n	800498e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2204      	movs	r2, #4
 800497c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	589b      	ldr	r3, [r3, r2]
 8004984:	2202      	movs	r2, #2
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800498e:	23a4      	movs	r3, #164	; 0xa4
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2208      	movs	r2, #8
 8004996:	4013      	ands	r3, r2
 8004998:	d017      	beq.n	80049ca <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800499a:	23a0      	movs	r3, #160	; 0xa0
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2220      	movs	r2, #32
 80049a2:	4013      	ands	r3, r2
 80049a4:	d105      	bne.n	80049b2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049a6:	239c      	movs	r3, #156	; 0x9c
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2201      	movs	r2, #1
 80049ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049b0:	d00b      	beq.n	80049ca <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2208      	movs	r2, #8
 80049b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2280      	movs	r2, #128	; 0x80
 80049be:	589b      	ldr	r3, [r3, r2]
 80049c0:	2208      	movs	r2, #8
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2180      	movs	r1, #128	; 0x80
 80049c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049ca:	23a4      	movs	r3, #164	; 0xa4
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	4013      	ands	r3, r2
 80049d6:	d013      	beq.n	8004a00 <HAL_UART_IRQHandler+0x198>
 80049d8:	23a0      	movs	r3, #160	; 0xa0
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	04db      	lsls	r3, r3, #19
 80049e2:	4013      	ands	r3, r2
 80049e4:	d00c      	beq.n	8004a00 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2280      	movs	r2, #128	; 0x80
 80049ec:	0112      	lsls	r2, r2, #4
 80049ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2280      	movs	r2, #128	; 0x80
 80049f4:	589b      	ldr	r3, [r3, r2]
 80049f6:	2220      	movs	r2, #32
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2280      	movs	r2, #128	; 0x80
 8004a04:	589b      	ldr	r3, [r3, r2]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d100      	bne.n	8004a0c <HAL_UART_IRQHandler+0x1a4>
 8004a0a:	e1f7      	b.n	8004dfc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a0c:	23a4      	movs	r3, #164	; 0xa4
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2220      	movs	r2, #32
 8004a14:	4013      	ands	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a18:	23a0      	movs	r3, #160	; 0xa0
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4013      	ands	r3, r2
 8004a22:	d008      	beq.n	8004a36 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	0010      	movs	r0, r2
 8004a34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	589b      	ldr	r3, [r3, r2]
 8004a3c:	2194      	movs	r1, #148	; 0x94
 8004a3e:	187a      	adds	r2, r7, r1
 8004a40:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2240      	movs	r2, #64	; 0x40
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d004      	beq.n	8004a5a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a50:	187b      	adds	r3, r7, r1
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2228      	movs	r2, #40	; 0x28
 8004a56:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a58:	d047      	beq.n	8004aea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f000 fd9f 	bl	80055a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2240      	movs	r2, #64	; 0x40
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d137      	bne.n	8004ae0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a78:	2090      	movs	r0, #144	; 0x90
 8004a7a:	183a      	adds	r2, r7, r0
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	2301      	movs	r3, #1
 8004a80:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a84:	f383 8810 	msr	PRIMASK, r3
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	438a      	bics	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
 8004a9a:	183b      	adds	r3, r7, r0
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d012      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <HAL_UART_IRQHandler+0x2a0>)
 8004ab6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7fe fb8b 	bl	80031d8 <HAL_DMA_Abort_IT>
 8004ac2:	1e03      	subs	r3, r0, #0
 8004ac4:	d01a      	beq.n	8004afc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	e012      	b.n	8004afc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 f99d 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ade:	e00d      	b.n	8004afc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f000 f998 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	e008      	b.n	8004afc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f000 f993 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2280      	movs	r2, #128	; 0x80
 8004af6:	2100      	movs	r1, #0
 8004af8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004afa:	e17f      	b.n	8004dfc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	46c0      	nop			; (mov r8, r8)
    return;
 8004afe:	e17d      	b.n	8004dfc <HAL_UART_IRQHandler+0x594>
 8004b00:	0000080f 	.word	0x0000080f
 8004b04:	04000120 	.word	0x04000120
 8004b08:	08005665 	.word	0x08005665

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d000      	beq.n	8004b16 <HAL_UART_IRQHandler+0x2ae>
 8004b14:	e131      	b.n	8004d7a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b16:	23a4      	movs	r3, #164	; 0xa4
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d100      	bne.n	8004b24 <HAL_UART_IRQHandler+0x2bc>
 8004b22:	e12a      	b.n	8004d7a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b24:	23a0      	movs	r3, #160	; 0xa0
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d100      	bne.n	8004b32 <HAL_UART_IRQHandler+0x2ca>
 8004b30:	e123      	b.n	8004d7a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2210      	movs	r2, #16
 8004b38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2240      	movs	r2, #64	; 0x40
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d000      	beq.n	8004b4a <HAL_UART_IRQHandler+0x2e2>
 8004b48:	e09b      	b.n	8004c82 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	217e      	movs	r1, #126	; 0x7e
 8004b54:	187b      	adds	r3, r7, r1
 8004b56:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d100      	bne.n	8004b62 <HAL_UART_IRQHandler+0x2fa>
 8004b60:	e14e      	b.n	8004e00 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2258      	movs	r2, #88	; 0x58
 8004b66:	5a9b      	ldrh	r3, [r3, r2]
 8004b68:	187a      	adds	r2, r7, r1
 8004b6a:	8812      	ldrh	r2, [r2, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d300      	bcc.n	8004b72 <HAL_UART_IRQHandler+0x30a>
 8004b70:	e146      	b.n	8004e00 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	187a      	adds	r2, r7, r1
 8004b76:	215a      	movs	r1, #90	; 0x5a
 8004b78:	8812      	ldrh	r2, [r2, #0]
 8004b7a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d06e      	beq.n	8004c64 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b86:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b90:	2301      	movs	r3, #1
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b96:	f383 8810 	msr	PRIMASK, r3
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	499a      	ldr	r1, [pc, #616]	; (8004e10 <HAL_UART_IRQHandler+0x5a8>)
 8004ba8:	400a      	ands	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	f383 8810 	msr	PRIMASK, r3
}
 8004bb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	677b      	str	r3, [r7, #116]	; 0x74
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc8:	f383 8810 	msr	PRIMASK, r3
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2101      	movs	r1, #1
 8004bda:	438a      	bics	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
 8004bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	f383 8810 	msr	PRIMASK, r3
}
 8004be8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bea:	f3ef 8310 	mrs	r3, PRIMASK
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf2:	673b      	str	r3, [r7, #112]	; 0x70
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfa:	f383 8810 	msr	PRIMASK, r3
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2140      	movs	r1, #64	; 0x40
 8004c0c:	438a      	bics	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c12:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c16:	f383 8810 	msr	PRIMASK, r3
}
 8004c1a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c32:	2301      	movs	r3, #1
 8004c34:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2110      	movs	r1, #16
 8004c4a:	438a      	bics	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c54:	f383 8810 	msr	PRIMASK, r3
}
 8004c58:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fe fa82 	bl	8003168 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2258      	movs	r2, #88	; 0x58
 8004c68:	5a9a      	ldrh	r2, [r3, r2]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	215a      	movs	r1, #90	; 0x5a
 8004c6e:	5a5b      	ldrh	r3, [r3, r1]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	0011      	movs	r1, r2
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f000 f8d4 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c80:	e0be      	b.n	8004e00 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2258      	movs	r2, #88	; 0x58
 8004c86:	5a99      	ldrh	r1, [r3, r2]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	225a      	movs	r2, #90	; 0x5a
 8004c8c:	5a9b      	ldrh	r3, [r3, r2]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	208e      	movs	r0, #142	; 0x8e
 8004c92:	183b      	adds	r3, r7, r0
 8004c94:	1a8a      	subs	r2, r1, r2
 8004c96:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	225a      	movs	r2, #90	; 0x5a
 8004c9c:	5a9b      	ldrh	r3, [r3, r2]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d100      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x43e>
 8004ca4:	e0ae      	b.n	8004e04 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8004ca6:	183b      	adds	r3, r7, r0
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d100      	bne.n	8004cb0 <HAL_UART_IRQHandler+0x448>
 8004cae:	e0a9      	b.n	8004e04 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb8:	2488      	movs	r4, #136	; 0x88
 8004cba:	193a      	adds	r2, r7, r4
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	494f      	ldr	r1, [pc, #316]	; (8004e14 <HAL_UART_IRQHandler+0x5ac>)
 8004cd6:	400a      	ands	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	193b      	adds	r3, r7, r4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f383 8810 	msr	PRIMASK, r3
}
 8004ce6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cec:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	2484      	movs	r4, #132	; 0x84
 8004cf2:	193a      	adds	r2, r7, r4
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	438a      	bics	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]
 8004d12:	193b      	adds	r3, r7, r4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	f383 8810 	msr	PRIMASK, r3
}
 8004d1e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d32:	f3ef 8310 	mrs	r3, PRIMASK
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3a:	2480      	movs	r4, #128	; 0x80
 8004d3c:	193a      	adds	r2, r7, r4
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	2301      	movs	r3, #1
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	f383 8810 	msr	PRIMASK, r3
}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2110      	movs	r1, #16
 8004d58:	438a      	bics	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	193b      	adds	r3, r7, r4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	f383 8810 	msr	PRIMASK, r3
}
 8004d68:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d6a:	183b      	adds	r3, r7, r0
 8004d6c:	881a      	ldrh	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	0011      	movs	r1, r2
 8004d72:	0018      	movs	r0, r3
 8004d74:	f000 f858 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d78:	e044      	b.n	8004e04 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d7a:	23a4      	movs	r3, #164	; 0xa4
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	035b      	lsls	r3, r3, #13
 8004d84:	4013      	ands	r3, r2
 8004d86:	d010      	beq.n	8004daa <HAL_UART_IRQHandler+0x542>
 8004d88:	239c      	movs	r3, #156	; 0x9c
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	03db      	lsls	r3, r3, #15
 8004d92:	4013      	ands	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2280      	movs	r2, #128	; 0x80
 8004d9c:	0352      	lsls	r2, r2, #13
 8004d9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f000 fec0 	bl	8005b28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004da8:	e02f      	b.n	8004e0a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004daa:	23a4      	movs	r3, #164	; 0xa4
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2280      	movs	r2, #128	; 0x80
 8004db2:	4013      	ands	r3, r2
 8004db4:	d00f      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004db6:	23a0      	movs	r3, #160	; 0xa0
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2280      	movs	r2, #128	; 0x80
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01e      	beq.n	8004e08 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	0010      	movs	r0, r2
 8004dd2:	4798      	blx	r3
    }
    return;
 8004dd4:	e018      	b.n	8004e08 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dd6:	23a4      	movs	r3, #164	; 0xa4
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2240      	movs	r2, #64	; 0x40
 8004dde:	4013      	ands	r3, r2
 8004de0:	d013      	beq.n	8004e0a <HAL_UART_IRQHandler+0x5a2>
 8004de2:	23a0      	movs	r3, #160	; 0xa0
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2240      	movs	r2, #64	; 0x40
 8004dea:	4013      	ands	r3, r2
 8004dec:	d00d      	beq.n	8004e0a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 fd06 	bl	8005802 <UART_EndTransmit_IT>
    return;
 8004df6:	e008      	b.n	8004e0a <HAL_UART_IRQHandler+0x5a2>
      return;
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	e006      	b.n	8004e0a <HAL_UART_IRQHandler+0x5a2>
    return;
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	e004      	b.n	8004e0a <HAL_UART_IRQHandler+0x5a2>
      return;
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	e002      	b.n	8004e0a <HAL_UART_IRQHandler+0x5a2>
      return;
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	e000      	b.n	8004e0a <HAL_UART_IRQHandler+0x5a2>
    return;
 8004e08:	46c0      	nop			; (mov r8, r8)
  }

}
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b02b      	add	sp, #172	; 0xac
 8004e0e:	bd90      	pop	{r4, r7, pc}
 8004e10:	fffffeff 	.word	0xfffffeff
 8004e14:	fffffedf 	.word	0xfffffedf

08004e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b002      	add	sp, #8
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	000a      	movs	r2, r1
 8004e32:	1cbb      	adds	r3, r7, #2
 8004e34:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b002      	add	sp, #8
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e48:	231e      	movs	r3, #30
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a8d      	ldr	r2, [pc, #564]	; (80050a4 <UART_SetConfig+0x264>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a88      	ldr	r2, [pc, #544]	; (80050a8 <UART_SetConfig+0x268>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	0019      	movs	r1, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4a7f      	ldr	r2, [pc, #508]	; (80050ac <UART_SetConfig+0x26c>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a7b      	ldr	r2, [pc, #492]	; (80050b0 <UART_SetConfig+0x270>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d127      	bne.n	8004f16 <UART_SetConfig+0xd6>
 8004ec6:	4b7b      	ldr	r3, [pc, #492]	; (80050b4 <UART_SetConfig+0x274>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	2203      	movs	r2, #3
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d00d      	beq.n	8004eee <UART_SetConfig+0xae>
 8004ed2:	d81b      	bhi.n	8004f0c <UART_SetConfig+0xcc>
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d014      	beq.n	8004f02 <UART_SetConfig+0xc2>
 8004ed8:	d818      	bhi.n	8004f0c <UART_SetConfig+0xcc>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <UART_SetConfig+0xa4>
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d00a      	beq.n	8004ef8 <UART_SetConfig+0xb8>
 8004ee2:	e013      	b.n	8004f0c <UART_SetConfig+0xcc>
 8004ee4:	231f      	movs	r3, #31
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	e021      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004eee:	231f      	movs	r3, #31
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	e01c      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004ef8:	231f      	movs	r3, #31
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	2204      	movs	r2, #4
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e017      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004f02:	231f      	movs	r3, #31
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	2208      	movs	r2, #8
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e012      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004f0c:	231f      	movs	r3, #31
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2210      	movs	r2, #16
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	e00d      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a67      	ldr	r2, [pc, #412]	; (80050b8 <UART_SetConfig+0x278>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d104      	bne.n	8004f2a <UART_SetConfig+0xea>
 8004f20:	231f      	movs	r3, #31
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e003      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004f2a:	231f      	movs	r3, #31
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	2210      	movs	r2, #16
 8004f30:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d15d      	bne.n	8004ffa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004f3e:	231f      	movs	r3, #31
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d015      	beq.n	8004f74 <UART_SetConfig+0x134>
 8004f48:	dc18      	bgt.n	8004f7c <UART_SetConfig+0x13c>
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d00d      	beq.n	8004f6a <UART_SetConfig+0x12a>
 8004f4e:	dc15      	bgt.n	8004f7c <UART_SetConfig+0x13c>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <UART_SetConfig+0x11a>
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d005      	beq.n	8004f64 <UART_SetConfig+0x124>
 8004f58:	e010      	b.n	8004f7c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5a:	f7fe fff3 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	61bb      	str	r3, [r7, #24]
        break;
 8004f62:	e012      	b.n	8004f8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f64:	4b55      	ldr	r3, [pc, #340]	; (80050bc <UART_SetConfig+0x27c>)
 8004f66:	61bb      	str	r3, [r7, #24]
        break;
 8004f68:	e00f      	b.n	8004f8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6a:	f7fe ff61 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	61bb      	str	r3, [r7, #24]
        break;
 8004f72:	e00a      	b.n	8004f8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	61bb      	str	r3, [r7, #24]
        break;
 8004f7a:	e006      	b.n	8004f8a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f80:	231e      	movs	r3, #30
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
        break;
 8004f88:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d100      	bne.n	8004f92 <UART_SetConfig+0x152>
 8004f90:	e07b      	b.n	800508a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	005a      	lsls	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	18d2      	adds	r2, r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	0010      	movs	r0, r2
 8004fa6:	f7fb f8c1 	bl	800012c <__udivsi3>
 8004faa:	0003      	movs	r3, r0
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b0f      	cmp	r3, #15
 8004fb4:	d91c      	bls.n	8004ff0 <UART_SetConfig+0x1b0>
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	025b      	lsls	r3, r3, #9
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d217      	bcs.n	8004ff0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	200e      	movs	r0, #14
 8004fc6:	183b      	adds	r3, r7, r0
 8004fc8:	210f      	movs	r1, #15
 8004fca:	438a      	bics	r2, r1
 8004fcc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	b299      	uxth	r1, r3
 8004fda:	183b      	adds	r3, r7, r0
 8004fdc:	183a      	adds	r2, r7, r0
 8004fde:	8812      	ldrh	r2, [r2, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	183a      	adds	r2, r7, r0
 8004fea:	8812      	ldrh	r2, [r2, #0]
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	e04c      	b.n	800508a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff0:	231e      	movs	r3, #30
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e047      	b.n	800508a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ffa:	231f      	movs	r3, #31
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d015      	beq.n	8005030 <UART_SetConfig+0x1f0>
 8005004:	dc18      	bgt.n	8005038 <UART_SetConfig+0x1f8>
 8005006:	2b04      	cmp	r3, #4
 8005008:	d00d      	beq.n	8005026 <UART_SetConfig+0x1e6>
 800500a:	dc15      	bgt.n	8005038 <UART_SetConfig+0x1f8>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <UART_SetConfig+0x1d6>
 8005010:	2b02      	cmp	r3, #2
 8005012:	d005      	beq.n	8005020 <UART_SetConfig+0x1e0>
 8005014:	e010      	b.n	8005038 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005016:	f7fe ff95 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 800501a:	0003      	movs	r3, r0
 800501c:	61bb      	str	r3, [r7, #24]
        break;
 800501e:	e012      	b.n	8005046 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005020:	4b26      	ldr	r3, [pc, #152]	; (80050bc <UART_SetConfig+0x27c>)
 8005022:	61bb      	str	r3, [r7, #24]
        break;
 8005024:	e00f      	b.n	8005046 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005026:	f7fe ff03 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 800502a:	0003      	movs	r3, r0
 800502c:	61bb      	str	r3, [r7, #24]
        break;
 800502e:	e00a      	b.n	8005046 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	61bb      	str	r3, [r7, #24]
        break;
 8005036:	e006      	b.n	8005046 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800503c:	231e      	movs	r3, #30
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
        break;
 8005044:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01e      	beq.n	800508a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	085a      	lsrs	r2, r3, #1
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	18d2      	adds	r2, r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	0019      	movs	r1, r3
 800505c:	0010      	movs	r0, r2
 800505e:	f7fb f865 	bl	800012c <__udivsi3>
 8005062:	0003      	movs	r3, r0
 8005064:	b29b      	uxth	r3, r3
 8005066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d909      	bls.n	8005082 <UART_SetConfig+0x242>
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	025b      	lsls	r3, r3, #9
 8005074:	429a      	cmp	r2, r3
 8005076:	d204      	bcs.n	8005082 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	60da      	str	r2, [r3, #12]
 8005080:	e003      	b.n	800508a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005082:	231e      	movs	r3, #30
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2201      	movs	r2, #1
 8005088:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005096:	231e      	movs	r3, #30
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	781b      	ldrb	r3, [r3, #0]
}
 800509c:	0018      	movs	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	b008      	add	sp, #32
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	efff69f3 	.word	0xefff69f3
 80050a8:	ffffcfff 	.word	0xffffcfff
 80050ac:	fffff4ff 	.word	0xfffff4ff
 80050b0:	40013800 	.word	0x40013800
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40004400 	.word	0x40004400
 80050bc:	007a1200 	.word	0x007a1200

080050c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2201      	movs	r2, #1
 80050ce:	4013      	ands	r3, r2
 80050d0:	d00b      	beq.n	80050ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a4a      	ldr	r2, [pc, #296]	; (8005204 <UART_AdvFeatureConfig+0x144>)
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2202      	movs	r2, #2
 80050f0:	4013      	ands	r3, r2
 80050f2:	d00b      	beq.n	800510c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4a43      	ldr	r2, [pc, #268]	; (8005208 <UART_AdvFeatureConfig+0x148>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	0019      	movs	r1, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2204      	movs	r2, #4
 8005112:	4013      	ands	r3, r2
 8005114:	d00b      	beq.n	800512e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4a3b      	ldr	r2, [pc, #236]	; (800520c <UART_AdvFeatureConfig+0x14c>)
 800511e:	4013      	ands	r3, r2
 8005120:	0019      	movs	r1, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2208      	movs	r2, #8
 8005134:	4013      	ands	r3, r2
 8005136:	d00b      	beq.n	8005150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4a34      	ldr	r2, [pc, #208]	; (8005210 <UART_AdvFeatureConfig+0x150>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2210      	movs	r2, #16
 8005156:	4013      	ands	r3, r2
 8005158:	d00b      	beq.n	8005172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <UART_AdvFeatureConfig+0x154>)
 8005162:	4013      	ands	r3, r2
 8005164:	0019      	movs	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	2220      	movs	r2, #32
 8005178:	4013      	ands	r3, r2
 800517a:	d00b      	beq.n	8005194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	4a25      	ldr	r2, [pc, #148]	; (8005218 <UART_AdvFeatureConfig+0x158>)
 8005184:	4013      	ands	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2240      	movs	r2, #64	; 0x40
 800519a:	4013      	ands	r3, r2
 800519c:	d01d      	beq.n	80051da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <UART_AdvFeatureConfig+0x15c>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	0019      	movs	r1, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ba:	2380      	movs	r3, #128	; 0x80
 80051bc:	035b      	lsls	r3, r3, #13
 80051be:	429a      	cmp	r2, r3
 80051c0:	d10b      	bne.n	80051da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a15      	ldr	r2, [pc, #84]	; (8005220 <UART_AdvFeatureConfig+0x160>)
 80051ca:	4013      	ands	r3, r2
 80051cc:	0019      	movs	r1, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2280      	movs	r2, #128	; 0x80
 80051e0:	4013      	ands	r3, r2
 80051e2:	d00b      	beq.n	80051fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <UART_AdvFeatureConfig+0x164>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	0019      	movs	r1, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
  }
}
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	46bd      	mov	sp, r7
 8005200:	b002      	add	sp, #8
 8005202:	bd80      	pop	{r7, pc}
 8005204:	fffdffff 	.word	0xfffdffff
 8005208:	fffeffff 	.word	0xfffeffff
 800520c:	fffbffff 	.word	0xfffbffff
 8005210:	ffff7fff 	.word	0xffff7fff
 8005214:	ffffefff 	.word	0xffffefff
 8005218:	ffffdfff 	.word	0xffffdfff
 800521c:	ffefffff 	.word	0xffefffff
 8005220:	ff9fffff 	.word	0xff9fffff
 8005224:	fff7ffff 	.word	0xfff7ffff

08005228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af02      	add	r7, sp, #8
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2280      	movs	r2, #128	; 0x80
 8005234:	2100      	movs	r1, #0
 8005236:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005238:	f7fd f81c 	bl	8002274 <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2208      	movs	r2, #8
 8005248:	4013      	ands	r3, r2
 800524a:	2b08      	cmp	r3, #8
 800524c:	d10c      	bne.n	8005268 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2280      	movs	r2, #128	; 0x80
 8005252:	0391      	lsls	r1, r2, #14
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <UART_CheckIdleState+0x8c>)
 8005258:	9200      	str	r2, [sp, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	f000 f82c 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 8005260:	1e03      	subs	r3, r0, #0
 8005262:	d001      	beq.n	8005268 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e021      	b.n	80052ac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2204      	movs	r2, #4
 8005270:	4013      	ands	r3, r2
 8005272:	2b04      	cmp	r3, #4
 8005274:	d10c      	bne.n	8005290 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2280      	movs	r2, #128	; 0x80
 800527a:	03d1      	lsls	r1, r2, #15
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <UART_CheckIdleState+0x8c>)
 8005280:	9200      	str	r2, [sp, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	f000 f818 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 8005288:	1e03      	subs	r3, r0, #0
 800528a:	d001      	beq.n	8005290 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e00d      	b.n	80052ac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2274      	movs	r2, #116	; 0x74
 80052a6:	2100      	movs	r1, #0
 80052a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	0018      	movs	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b004      	add	sp, #16
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	01ffffff 	.word	0x01ffffff

080052b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b094      	sub	sp, #80	; 0x50
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	1dfb      	adds	r3, r7, #7
 80052c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c8:	e0a3      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052cc:	3301      	adds	r3, #1
 80052ce:	d100      	bne.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80052d0:	e09f      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fc ffcf 	bl	8002274 <HAL_GetTick>
 80052d6:	0002      	movs	r2, r0
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d13d      	bne.n	8005364 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052f0:	647b      	str	r3, [r7, #68]	; 0x44
 80052f2:	2301      	movs	r3, #1
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	f383 8810 	msr	PRIMASK, r3
}
 80052fc:	46c0      	nop			; (mov r8, r8)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	494c      	ldr	r1, [pc, #304]	; (800543c <UART_WaitOnFlagUntilTimeout+0x184>)
 800530a:	400a      	ands	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005310:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	f383 8810 	msr	PRIMASK, r3
}
 8005318:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531a:	f3ef 8310 	mrs	r3, PRIMASK
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005322:	643b      	str	r3, [r7, #64]	; 0x40
 8005324:	2301      	movs	r3, #1
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	f383 8810 	msr	PRIMASK, r3
}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2101      	movs	r1, #1
 800533c:	438a      	bics	r2, r1
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005346:	f383 8810 	msr	PRIMASK, r3
}
 800534a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2274      	movs	r2, #116	; 0x74
 800535c:	2100      	movs	r1, #0
 800535e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e067      	b.n	8005434 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2204      	movs	r2, #4
 800536c:	4013      	ands	r3, r2
 800536e:	d050      	beq.n	8005412 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	401a      	ands	r2, r3
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	429a      	cmp	r2, r3
 8005382:	d146      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	0112      	lsls	r2, r2, #4
 800538c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538e:	f3ef 8310 	mrs	r3, PRIMASK
 8005392:	613b      	str	r3, [r7, #16]
  return(result);
 8005394:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005398:	2301      	movs	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4923      	ldr	r1, [pc, #140]	; (800543c <UART_WaitOnFlagUntilTimeout+0x184>)
 80053b0:	400a      	ands	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	f383 8810 	msr	PRIMASK, r3
}
 80053be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c0:	f3ef 8310 	mrs	r3, PRIMASK
 80053c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80053c6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ca:	2301      	movs	r3, #1
 80053cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f383 8810 	msr	PRIMASK, r3
}
 80053d4:	46c0      	nop			; (mov r8, r8)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2101      	movs	r1, #1
 80053e2:	438a      	bics	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	f383 8810 	msr	PRIMASK, r3
}
 80053f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2280      	movs	r2, #128	; 0x80
 8005402:	2120      	movs	r1, #32
 8005404:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2274      	movs	r2, #116	; 0x74
 800540a:	2100      	movs	r1, #0
 800540c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e010      	b.n	8005434 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	425a      	negs	r2, r3
 8005422:	4153      	adcs	r3, r2
 8005424:	b2db      	uxtb	r3, r3
 8005426:	001a      	movs	r2, r3
 8005428:	1dfb      	adds	r3, r7, #7
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d100      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005430:	e74b      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b014      	add	sp, #80	; 0x50
 800543a:	bd80      	pop	{r7, pc}
 800543c:	fffffe5f 	.word	0xfffffe5f

08005440 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08c      	sub	sp, #48	; 0x30
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	1dbb      	adds	r3, r7, #6
 800544c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1dba      	adds	r2, r7, #6
 8005458:	2158      	movs	r1, #88	; 0x58
 800545a:	8812      	ldrh	r2, [r2, #0]
 800545c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1dba      	adds	r2, r7, #6
 8005462:	215a      	movs	r1, #90	; 0x5a
 8005464:	8812      	ldrh	r2, [r2, #0]
 8005466:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	015b      	lsls	r3, r3, #5
 8005476:	429a      	cmp	r2, r3
 8005478:	d10d      	bne.n	8005496 <UART_Start_Receive_IT+0x56>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <UART_Start_Receive_IT+0x4c>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	225c      	movs	r2, #92	; 0x5c
 8005486:	4943      	ldr	r1, [pc, #268]	; (8005594 <UART_Start_Receive_IT+0x154>)
 8005488:	5299      	strh	r1, [r3, r2]
 800548a:	e02e      	b.n	80054ea <UART_Start_Receive_IT+0xaa>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	225c      	movs	r2, #92	; 0x5c
 8005490:	21ff      	movs	r1, #255	; 0xff
 8005492:	5299      	strh	r1, [r3, r2]
 8005494:	e029      	b.n	80054ea <UART_Start_Receive_IT+0xaa>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10d      	bne.n	80054ba <UART_Start_Receive_IT+0x7a>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <UART_Start_Receive_IT+0x70>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	225c      	movs	r2, #92	; 0x5c
 80054aa:	21ff      	movs	r1, #255	; 0xff
 80054ac:	5299      	strh	r1, [r3, r2]
 80054ae:	e01c      	b.n	80054ea <UART_Start_Receive_IT+0xaa>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	225c      	movs	r2, #92	; 0x5c
 80054b4:	217f      	movs	r1, #127	; 0x7f
 80054b6:	5299      	strh	r1, [r3, r2]
 80054b8:	e017      	b.n	80054ea <UART_Start_Receive_IT+0xaa>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	055b      	lsls	r3, r3, #21
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d10d      	bne.n	80054e2 <UART_Start_Receive_IT+0xa2>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <UART_Start_Receive_IT+0x98>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	225c      	movs	r2, #92	; 0x5c
 80054d2:	217f      	movs	r1, #127	; 0x7f
 80054d4:	5299      	strh	r1, [r3, r2]
 80054d6:	e008      	b.n	80054ea <UART_Start_Receive_IT+0xaa>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	225c      	movs	r2, #92	; 0x5c
 80054dc:	213f      	movs	r1, #63	; 0x3f
 80054de:	5299      	strh	r1, [r3, r2]
 80054e0:	e003      	b.n	80054ea <UART_Start_Receive_IT+0xaa>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	225c      	movs	r2, #92	; 0x5c
 80054e6:	2100      	movs	r1, #0
 80054e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2280      	movs	r2, #128	; 0x80
 80054ee:	2100      	movs	r1, #0
 80054f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2222      	movs	r2, #34	; 0x22
 80054f6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f8:	f3ef 8310 	mrs	r3, PRIMASK
 80054fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80054fe:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005502:	2301      	movs	r3, #1
 8005504:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f383 8810 	msr	PRIMASK, r3
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2101      	movs	r1, #1
 800551a:	430a      	orrs	r2, r1
 800551c:	609a      	str	r2, [r3, #8]
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	f383 8810 	msr	PRIMASK, r3
}
 8005528:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	2380      	movs	r3, #128	; 0x80
 8005530:	015b      	lsls	r3, r3, #5
 8005532:	429a      	cmp	r2, r3
 8005534:	d107      	bne.n	8005546 <UART_Start_Receive_IT+0x106>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4a15      	ldr	r2, [pc, #84]	; (8005598 <UART_Start_Receive_IT+0x158>)
 8005542:	665a      	str	r2, [r3, #100]	; 0x64
 8005544:	e002      	b.n	800554c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4a14      	ldr	r2, [pc, #80]	; (800559c <UART_Start_Receive_IT+0x15c>)
 800554a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2274      	movs	r2, #116	; 0x74
 8005550:	2100      	movs	r1, #0
 8005552:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005554:	f3ef 8310 	mrs	r3, PRIMASK
 8005558:	613b      	str	r3, [r7, #16]
  return(result);
 800555a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
 800555e:	2301      	movs	r3, #1
 8005560:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2190      	movs	r1, #144	; 0x90
 8005576:	0049      	lsls	r1, r1, #1
 8005578:	430a      	orrs	r2, r1
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f383 8810 	msr	PRIMASK, r3
}
 8005586:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	0018      	movs	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	b00c      	add	sp, #48	; 0x30
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	000001ff 	.word	0x000001ff
 8005598:	080059c1 	.word	0x080059c1
 800559c:	08005859 	.word	0x08005859

080055a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08e      	sub	sp, #56	; 0x38
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a8:	f3ef 8310 	mrs	r3, PRIMASK
 80055ac:	617b      	str	r3, [r7, #20]
  return(result);
 80055ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
 80055b2:	2301      	movs	r3, #1
 80055b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	f383 8810 	msr	PRIMASK, r3
}
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4925      	ldr	r1, [pc, #148]	; (8005660 <UART_EndRxTransfer+0xc0>)
 80055ca:	400a      	ands	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f383 8810 	msr	PRIMASK, r3
}
 80055d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055da:	f3ef 8310 	mrs	r3, PRIMASK
 80055de:	623b      	str	r3, [r7, #32]
  return(result);
 80055e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
 80055e4:	2301      	movs	r3, #1
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f383 8810 	msr	PRIMASK, r3
}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2101      	movs	r1, #1
 80055fc:	438a      	bics	r2, r1
 80055fe:	609a      	str	r2, [r3, #8]
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	f383 8810 	msr	PRIMASK, r3
}
 800560a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005610:	2b01      	cmp	r3, #1
 8005612:	d118      	bne.n	8005646 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005614:	f3ef 8310 	mrs	r3, PRIMASK
 8005618:	60bb      	str	r3, [r7, #8]
  return(result);
 800561a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561e:	2301      	movs	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f383 8810 	msr	PRIMASK, r3
}
 8005628:	46c0      	nop			; (mov r8, r8)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2110      	movs	r1, #16
 8005636:	438a      	bics	r2, r1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f383 8810 	msr	PRIMASK, r3
}
 8005644:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b00e      	add	sp, #56	; 0x38
 800565e:	bd80      	pop	{r7, pc}
 8005660:	fffffedf 	.word	0xfffffedf

08005664 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	225a      	movs	r2, #90	; 0x5a
 8005676:	2100      	movs	r1, #0
 8005678:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2252      	movs	r2, #82	; 0x52
 800567e:	2100      	movs	r1, #0
 8005680:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	0018      	movs	r0, r3
 8005686:	f7ff fbc7 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	46bd      	mov	sp, r7
 800568e:	b004      	add	sp, #16
 8005690:	bd80      	pop	{r7, pc}

08005692 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b08a      	sub	sp, #40	; 0x28
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800569e:	2b21      	cmp	r3, #33	; 0x21
 80056a0:	d14d      	bne.n	800573e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2252      	movs	r2, #82	; 0x52
 80056a6:	5a9b      	ldrh	r3, [r3, r2]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d132      	bne.n	8005714 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ae:	f3ef 8310 	mrs	r3, PRIMASK
 80056b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
 80056b8:	2301      	movs	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f383 8810 	msr	PRIMASK, r3
}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2180      	movs	r1, #128	; 0x80
 80056d0:	438a      	bics	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e0:	f3ef 8310 	mrs	r3, PRIMASK
 80056e4:	617b      	str	r3, [r7, #20]
  return(result);
 80056e6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056e8:	623b      	str	r3, [r7, #32]
 80056ea:	2301      	movs	r3, #1
 80056ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	f383 8810 	msr	PRIMASK, r3
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2140      	movs	r1, #64	; 0x40
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f383 8810 	msr	PRIMASK, r3
}
 8005710:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005712:	e014      	b.n	800573e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	b292      	uxth	r2, r2
 8005720:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2252      	movs	r2, #82	; 0x52
 8005730:	5a9b      	ldrh	r3, [r3, r2]
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b299      	uxth	r1, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2252      	movs	r2, #82	; 0x52
 800573c:	5299      	strh	r1, [r3, r2]
}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	46bd      	mov	sp, r7
 8005742:	b00a      	add	sp, #40	; 0x28
 8005744:	bd80      	pop	{r7, pc}

08005746 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b08c      	sub	sp, #48	; 0x30
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005752:	2b21      	cmp	r3, #33	; 0x21
 8005754:	d151      	bne.n	80057fa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2252      	movs	r2, #82	; 0x52
 800575a:	5a9b      	ldrh	r3, [r3, r2]
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d132      	bne.n	80057c8 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005762:	f3ef 8310 	mrs	r3, PRIMASK
 8005766:	60fb      	str	r3, [r7, #12]
  return(result);
 8005768:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
 800576c:	2301      	movs	r3, #1
 800576e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f383 8810 	msr	PRIMASK, r3
}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2180      	movs	r1, #128	; 0x80
 8005784:	438a      	bics	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f383 8810 	msr	PRIMASK, r3
}
 8005792:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005794:	f3ef 8310 	mrs	r3, PRIMASK
 8005798:	61bb      	str	r3, [r7, #24]
  return(result);
 800579a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
 800579e:	2301      	movs	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f383 8810 	msr	PRIMASK, r3
}
 80057a8:	46c0      	nop			; (mov r8, r8)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2140      	movs	r1, #64	; 0x40
 80057b6:	430a      	orrs	r2, r1
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f383 8810 	msr	PRIMASK, r3
}
 80057c4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80057c6:	e018      	b.n	80057fa <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	881a      	ldrh	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	05d2      	lsls	r2, r2, #23
 80057d8:	0dd2      	lsrs	r2, r2, #23
 80057da:	b292      	uxth	r2, r2
 80057dc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e2:	1c9a      	adds	r2, r3, #2
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2252      	movs	r2, #82	; 0x52
 80057ec:	5a9b      	ldrh	r3, [r3, r2]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b299      	uxth	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2252      	movs	r2, #82	; 0x52
 80057f8:	5299      	strh	r1, [r3, r2]
}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b00c      	add	sp, #48	; 0x30
 8005800:	bd80      	pop	{r7, pc}

08005802 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b086      	sub	sp, #24
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800580a:	f3ef 8310 	mrs	r3, PRIMASK
 800580e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005810:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	2301      	movs	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f383 8810 	msr	PRIMASK, r3
}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2140      	movs	r1, #64	; 0x40
 800582c:	438a      	bics	r2, r1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f383 8810 	msr	PRIMASK, r3
}
 800583a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	0018      	movs	r0, r3
 800584c:	f7fc f962 	bl	8001b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005850:	46c0      	nop			; (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b006      	add	sp, #24
 8005856:	bd80      	pop	{r7, pc}

08005858 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b090      	sub	sp, #64	; 0x40
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005860:	203e      	movs	r0, #62	; 0x3e
 8005862:	183b      	adds	r3, r7, r0
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	215c      	movs	r1, #92	; 0x5c
 8005868:	5a52      	ldrh	r2, [r2, r1]
 800586a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005870:	2b22      	cmp	r3, #34	; 0x22
 8005872:	d000      	beq.n	8005876 <UART_RxISR_8BIT+0x1e>
 8005874:	e095      	b.n	80059a2 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	213c      	movs	r1, #60	; 0x3c
 800587c:	187b      	adds	r3, r7, r1
 800587e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005880:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005882:	187b      	adds	r3, r7, r1
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	183b      	adds	r3, r7, r0
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b2d9      	uxtb	r1, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005892:	400a      	ands	r2, r1
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	225a      	movs	r2, #90	; 0x5a
 80058a6:	5a9b      	ldrh	r3, [r3, r2]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b299      	uxth	r1, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	225a      	movs	r2, #90	; 0x5a
 80058b2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	225a      	movs	r2, #90	; 0x5a
 80058b8:	5a9b      	ldrh	r3, [r3, r2]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d178      	bne.n	80059b2 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c0:	f3ef 8310 	mrs	r3, PRIMASK
 80058c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80058c6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ca:	2301      	movs	r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f383 8810 	msr	PRIMASK, r3
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4936      	ldr	r1, [pc, #216]	; (80059bc <UART_RxISR_8BIT+0x164>)
 80058e2:	400a      	ands	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	f383 8810 	msr	PRIMASK, r3
}
 80058f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f2:	f3ef 8310 	mrs	r3, PRIMASK
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
 80058fc:	2301      	movs	r3, #1
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	f383 8810 	msr	PRIMASK, r3
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2101      	movs	r1, #1
 8005914:	438a      	bics	r2, r1
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	f383 8810 	msr	PRIMASK, r3
}
 8005922:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005934:	2b01      	cmp	r3, #1
 8005936:	d12f      	bne.n	8005998 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593e:	f3ef 8310 	mrs	r3, PRIMASK
 8005942:	60fb      	str	r3, [r7, #12]
  return(result);
 8005944:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005946:	633b      	str	r3, [r7, #48]	; 0x30
 8005948:	2301      	movs	r3, #1
 800594a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f383 8810 	msr	PRIMASK, r3
}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2110      	movs	r1, #16
 8005960:	438a      	bics	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f383 8810 	msr	PRIMASK, r3
}
 800596e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	2210      	movs	r2, #16
 8005978:	4013      	ands	r3, r2
 800597a:	2b10      	cmp	r3, #16
 800597c:	d103      	bne.n	8005986 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2210      	movs	r2, #16
 8005984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2258      	movs	r2, #88	; 0x58
 800598a:	5a9a      	ldrh	r2, [r3, r2]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	0011      	movs	r1, r2
 8005990:	0018      	movs	r0, r3
 8005992:	f7ff fa49 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005996:	e00c      	b.n	80059b2 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	0018      	movs	r0, r3
 800599c:	f7fb fccc 	bl	8001338 <HAL_UART_RxCpltCallback>
}
 80059a0:	e007      	b.n	80059b2 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2108      	movs	r1, #8
 80059ae:	430a      	orrs	r2, r1
 80059b0:	619a      	str	r2, [r3, #24]
}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b010      	add	sp, #64	; 0x40
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	fffffedf 	.word	0xfffffedf

080059c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b090      	sub	sp, #64	; 0x40
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80059c8:	203e      	movs	r0, #62	; 0x3e
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	215c      	movs	r1, #92	; 0x5c
 80059d0:	5a52      	ldrh	r2, [r2, r1]
 80059d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d8:	2b22      	cmp	r3, #34	; 0x22
 80059da:	d000      	beq.n	80059de <UART_RxISR_16BIT+0x1e>
 80059dc:	e095      	b.n	8005b0a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	213c      	movs	r1, #60	; 0x3c
 80059e4:	187b      	adds	r3, r7, r1
 80059e6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80059e8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ee:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80059f0:	187b      	adds	r3, r7, r1
 80059f2:	183a      	adds	r2, r7, r0
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a04:	1c9a      	adds	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	225a      	movs	r2, #90	; 0x5a
 8005a0e:	5a9b      	ldrh	r3, [r3, r2]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b299      	uxth	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	225a      	movs	r2, #90	; 0x5a
 8005a1a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	225a      	movs	r2, #90	; 0x5a
 8005a20:	5a9b      	ldrh	r3, [r3, r2]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d178      	bne.n	8005b1a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a28:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2c:	617b      	str	r3, [r7, #20]
  return(result);
 8005a2e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
 8005a32:	2301      	movs	r3, #1
 8005a34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f383 8810 	msr	PRIMASK, r3
}
 8005a3c:	46c0      	nop			; (mov r8, r8)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4936      	ldr	r1, [pc, #216]	; (8005b24 <UART_RxISR_16BIT+0x164>)
 8005a4a:	400a      	ands	r2, r1
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f383 8810 	msr	PRIMASK, r3
}
 8005a58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5e:	623b      	str	r3, [r7, #32]
  return(result);
 8005a60:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
 8005a64:	2301      	movs	r3, #1
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	f383 8810 	msr	PRIMASK, r3
}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	438a      	bics	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	f383 8810 	msr	PRIMASK, r3
}
 8005a8a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d12f      	bne.n	8005b00 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aac:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f383 8810 	msr	PRIMASK, r3
}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2110      	movs	r1, #16
 8005ac8:	438a      	bics	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f383 8810 	msr	PRIMASK, r3
}
 8005ad6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	2210      	movs	r2, #16
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d103      	bne.n	8005aee <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2210      	movs	r2, #16
 8005aec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2258      	movs	r2, #88	; 0x58
 8005af2:	5a9a      	ldrh	r2, [r3, r2]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	0011      	movs	r1, r2
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7ff f995 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005afe:	e00c      	b.n	8005b1a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7fb fc18 	bl	8001338 <HAL_UART_RxCpltCallback>
}
 8005b08:	e007      	b.n	8005b1a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2108      	movs	r1, #8
 8005b16:	430a      	orrs	r2, r1
 8005b18:	619a      	str	r2, [r3, #24]
}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b010      	add	sp, #64	; 0x40
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	fffffedf 	.word	0xfffffedf

08005b28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b30:	46c0      	nop			; (mov r8, r8)
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b002      	add	sp, #8
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <__errno>:
 8005b38:	4b01      	ldr	r3, [pc, #4]	; (8005b40 <__errno+0x8>)
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	4770      	bx	lr
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	2000000c 	.word	0x2000000c

08005b44 <__libc_init_array>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	2600      	movs	r6, #0
 8005b48:	4d0c      	ldr	r5, [pc, #48]	; (8005b7c <__libc_init_array+0x38>)
 8005b4a:	4c0d      	ldr	r4, [pc, #52]	; (8005b80 <__libc_init_array+0x3c>)
 8005b4c:	1b64      	subs	r4, r4, r5
 8005b4e:	10a4      	asrs	r4, r4, #2
 8005b50:	42a6      	cmp	r6, r4
 8005b52:	d109      	bne.n	8005b68 <__libc_init_array+0x24>
 8005b54:	2600      	movs	r6, #0
 8005b56:	f001 f98b 	bl	8006e70 <_init>
 8005b5a:	4d0a      	ldr	r5, [pc, #40]	; (8005b84 <__libc_init_array+0x40>)
 8005b5c:	4c0a      	ldr	r4, [pc, #40]	; (8005b88 <__libc_init_array+0x44>)
 8005b5e:	1b64      	subs	r4, r4, r5
 8005b60:	10a4      	asrs	r4, r4, #2
 8005b62:	42a6      	cmp	r6, r4
 8005b64:	d105      	bne.n	8005b72 <__libc_init_array+0x2e>
 8005b66:	bd70      	pop	{r4, r5, r6, pc}
 8005b68:	00b3      	lsls	r3, r6, #2
 8005b6a:	58eb      	ldr	r3, [r5, r3]
 8005b6c:	4798      	blx	r3
 8005b6e:	3601      	adds	r6, #1
 8005b70:	e7ee      	b.n	8005b50 <__libc_init_array+0xc>
 8005b72:	00b3      	lsls	r3, r6, #2
 8005b74:	58eb      	ldr	r3, [r5, r3]
 8005b76:	4798      	blx	r3
 8005b78:	3601      	adds	r6, #1
 8005b7a:	e7f2      	b.n	8005b62 <__libc_init_array+0x1e>
 8005b7c:	0800726c 	.word	0x0800726c
 8005b80:	0800726c 	.word	0x0800726c
 8005b84:	0800726c 	.word	0x0800726c
 8005b88:	08007270 	.word	0x08007270

08005b8c <memset>:
 8005b8c:	0003      	movs	r3, r0
 8005b8e:	1882      	adds	r2, r0, r2
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d100      	bne.n	8005b96 <memset+0xa>
 8005b94:	4770      	bx	lr
 8005b96:	7019      	strb	r1, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	e7f9      	b.n	8005b90 <memset+0x4>

08005b9c <siprintf>:
 8005b9c:	b40e      	push	{r1, r2, r3}
 8005b9e:	b500      	push	{lr}
 8005ba0:	490b      	ldr	r1, [pc, #44]	; (8005bd0 <siprintf+0x34>)
 8005ba2:	b09c      	sub	sp, #112	; 0x70
 8005ba4:	ab1d      	add	r3, sp, #116	; 0x74
 8005ba6:	9002      	str	r0, [sp, #8]
 8005ba8:	9006      	str	r0, [sp, #24]
 8005baa:	9107      	str	r1, [sp, #28]
 8005bac:	9104      	str	r1, [sp, #16]
 8005bae:	4809      	ldr	r0, [pc, #36]	; (8005bd4 <siprintf+0x38>)
 8005bb0:	4909      	ldr	r1, [pc, #36]	; (8005bd8 <siprintf+0x3c>)
 8005bb2:	cb04      	ldmia	r3!, {r2}
 8005bb4:	9105      	str	r1, [sp, #20]
 8005bb6:	6800      	ldr	r0, [r0, #0]
 8005bb8:	a902      	add	r1, sp, #8
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	f000 f89a 	bl	8005cf4 <_svfiprintf_r>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9a02      	ldr	r2, [sp, #8]
 8005bc4:	7013      	strb	r3, [r2, #0]
 8005bc6:	b01c      	add	sp, #112	; 0x70
 8005bc8:	bc08      	pop	{r3}
 8005bca:	b003      	add	sp, #12
 8005bcc:	4718      	bx	r3
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	7fffffff 	.word	0x7fffffff
 8005bd4:	2000000c 	.word	0x2000000c
 8005bd8:	ffff0208 	.word	0xffff0208

08005bdc <siscanf>:
 8005bdc:	b40e      	push	{r1, r2, r3}
 8005bde:	b530      	push	{r4, r5, lr}
 8005be0:	2381      	movs	r3, #129	; 0x81
 8005be2:	b09c      	sub	sp, #112	; 0x70
 8005be4:	466a      	mov	r2, sp
 8005be6:	ac1f      	add	r4, sp, #124	; 0x7c
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	cc20      	ldmia	r4!, {r5}
 8005bec:	8293      	strh	r3, [r2, #20]
 8005bee:	9002      	str	r0, [sp, #8]
 8005bf0:	9006      	str	r0, [sp, #24]
 8005bf2:	f7fa fa89 	bl	8000108 <strlen>
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <siscanf+0x48>)
 8005bf8:	466a      	mov	r2, sp
 8005bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9003      	str	r0, [sp, #12]
 8005c00:	9007      	str	r0, [sp, #28]
 8005c02:	4809      	ldr	r0, [pc, #36]	; (8005c28 <siscanf+0x4c>)
 8005c04:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c06:	9314      	str	r3, [sp, #80]	; 0x50
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	82d3      	strh	r3, [r2, #22]
 8005c0c:	a902      	add	r1, sp, #8
 8005c0e:	0023      	movs	r3, r4
 8005c10:	002a      	movs	r2, r5
 8005c12:	6800      	ldr	r0, [r0, #0]
 8005c14:	9401      	str	r4, [sp, #4]
 8005c16:	f000 f9c9 	bl	8005fac <__ssvfiscanf_r>
 8005c1a:	b01c      	add	sp, #112	; 0x70
 8005c1c:	bc30      	pop	{r4, r5}
 8005c1e:	bc08      	pop	{r3}
 8005c20:	b003      	add	sp, #12
 8005c22:	4718      	bx	r3
 8005c24:	08005c2d 	.word	0x08005c2d
 8005c28:	2000000c 	.word	0x2000000c

08005c2c <__seofread>:
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	4770      	bx	lr

08005c30 <__ssputs_r>:
 8005c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c32:	688e      	ldr	r6, [r1, #8]
 8005c34:	b085      	sub	sp, #20
 8005c36:	0007      	movs	r7, r0
 8005c38:	000c      	movs	r4, r1
 8005c3a:	9203      	str	r2, [sp, #12]
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	429e      	cmp	r6, r3
 8005c40:	d83c      	bhi.n	8005cbc <__ssputs_r+0x8c>
 8005c42:	2390      	movs	r3, #144	; 0x90
 8005c44:	898a      	ldrh	r2, [r1, #12]
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	421a      	tst	r2, r3
 8005c4a:	d034      	beq.n	8005cb6 <__ssputs_r+0x86>
 8005c4c:	6909      	ldr	r1, [r1, #16]
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	6960      	ldr	r0, [r4, #20]
 8005c52:	1a5b      	subs	r3, r3, r1
 8005c54:	9302      	str	r3, [sp, #8]
 8005c56:	2303      	movs	r3, #3
 8005c58:	4343      	muls	r3, r0
 8005c5a:	0fdd      	lsrs	r5, r3, #31
 8005c5c:	18ed      	adds	r5, r5, r3
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	9802      	ldr	r0, [sp, #8]
 8005c62:	3301      	adds	r3, #1
 8005c64:	181b      	adds	r3, r3, r0
 8005c66:	106d      	asrs	r5, r5, #1
 8005c68:	42ab      	cmp	r3, r5
 8005c6a:	d900      	bls.n	8005c6e <__ssputs_r+0x3e>
 8005c6c:	001d      	movs	r5, r3
 8005c6e:	0553      	lsls	r3, r2, #21
 8005c70:	d532      	bpl.n	8005cd8 <__ssputs_r+0xa8>
 8005c72:	0029      	movs	r1, r5
 8005c74:	0038      	movs	r0, r7
 8005c76:	f001 f82b 	bl	8006cd0 <_malloc_r>
 8005c7a:	1e06      	subs	r6, r0, #0
 8005c7c:	d109      	bne.n	8005c92 <__ssputs_r+0x62>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	603b      	str	r3, [r7, #0]
 8005c82:	2340      	movs	r3, #64	; 0x40
 8005c84:	2001      	movs	r0, #1
 8005c86:	89a2      	ldrh	r2, [r4, #12]
 8005c88:	4240      	negs	r0, r0
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	81a3      	strh	r3, [r4, #12]
 8005c8e:	b005      	add	sp, #20
 8005c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c92:	9a02      	ldr	r2, [sp, #8]
 8005c94:	6921      	ldr	r1, [r4, #16]
 8005c96:	f000 ff92 	bl	8006bbe <memcpy>
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <__ssputs_r+0xc0>)
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	81a3      	strh	r3, [r4, #12]
 8005ca6:	9b02      	ldr	r3, [sp, #8]
 8005ca8:	6126      	str	r6, [r4, #16]
 8005caa:	18f6      	adds	r6, r6, r3
 8005cac:	6026      	str	r6, [r4, #0]
 8005cae:	6165      	str	r5, [r4, #20]
 8005cb0:	9e01      	ldr	r6, [sp, #4]
 8005cb2:	1aed      	subs	r5, r5, r3
 8005cb4:	60a5      	str	r5, [r4, #8]
 8005cb6:	9b01      	ldr	r3, [sp, #4]
 8005cb8:	429e      	cmp	r6, r3
 8005cba:	d900      	bls.n	8005cbe <__ssputs_r+0x8e>
 8005cbc:	9e01      	ldr	r6, [sp, #4]
 8005cbe:	0032      	movs	r2, r6
 8005cc0:	9903      	ldr	r1, [sp, #12]
 8005cc2:	6820      	ldr	r0, [r4, #0]
 8005cc4:	f000 ff84 	bl	8006bd0 <memmove>
 8005cc8:	68a3      	ldr	r3, [r4, #8]
 8005cca:	2000      	movs	r0, #0
 8005ccc:	1b9b      	subs	r3, r3, r6
 8005cce:	60a3      	str	r3, [r4, #8]
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	199e      	adds	r6, r3, r6
 8005cd4:	6026      	str	r6, [r4, #0]
 8005cd6:	e7da      	b.n	8005c8e <__ssputs_r+0x5e>
 8005cd8:	002a      	movs	r2, r5
 8005cda:	0038      	movs	r0, r7
 8005cdc:	f001 f86e 	bl	8006dbc <_realloc_r>
 8005ce0:	1e06      	subs	r6, r0, #0
 8005ce2:	d1e0      	bne.n	8005ca6 <__ssputs_r+0x76>
 8005ce4:	0038      	movs	r0, r7
 8005ce6:	6921      	ldr	r1, [r4, #16]
 8005ce8:	f000 ff86 	bl	8006bf8 <_free_r>
 8005cec:	e7c7      	b.n	8005c7e <__ssputs_r+0x4e>
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	fffffb7f 	.word	0xfffffb7f

08005cf4 <_svfiprintf_r>:
 8005cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf6:	b0a1      	sub	sp, #132	; 0x84
 8005cf8:	9003      	str	r0, [sp, #12]
 8005cfa:	001d      	movs	r5, r3
 8005cfc:	898b      	ldrh	r3, [r1, #12]
 8005cfe:	000f      	movs	r7, r1
 8005d00:	0016      	movs	r6, r2
 8005d02:	061b      	lsls	r3, r3, #24
 8005d04:	d511      	bpl.n	8005d2a <_svfiprintf_r+0x36>
 8005d06:	690b      	ldr	r3, [r1, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10e      	bne.n	8005d2a <_svfiprintf_r+0x36>
 8005d0c:	2140      	movs	r1, #64	; 0x40
 8005d0e:	f000 ffdf 	bl	8006cd0 <_malloc_r>
 8005d12:	6038      	str	r0, [r7, #0]
 8005d14:	6138      	str	r0, [r7, #16]
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d105      	bne.n	8005d26 <_svfiprintf_r+0x32>
 8005d1a:	230c      	movs	r3, #12
 8005d1c:	9a03      	ldr	r2, [sp, #12]
 8005d1e:	3801      	subs	r0, #1
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	b021      	add	sp, #132	; 0x84
 8005d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d26:	2340      	movs	r3, #64	; 0x40
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	ac08      	add	r4, sp, #32
 8005d2e:	6163      	str	r3, [r4, #20]
 8005d30:	3320      	adds	r3, #32
 8005d32:	7663      	strb	r3, [r4, #25]
 8005d34:	3310      	adds	r3, #16
 8005d36:	76a3      	strb	r3, [r4, #26]
 8005d38:	9507      	str	r5, [sp, #28]
 8005d3a:	0035      	movs	r5, r6
 8005d3c:	782b      	ldrb	r3, [r5, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <_svfiprintf_r+0x52>
 8005d42:	2b25      	cmp	r3, #37	; 0x25
 8005d44:	d147      	bne.n	8005dd6 <_svfiprintf_r+0xe2>
 8005d46:	1bab      	subs	r3, r5, r6
 8005d48:	9305      	str	r3, [sp, #20]
 8005d4a:	42b5      	cmp	r5, r6
 8005d4c:	d00c      	beq.n	8005d68 <_svfiprintf_r+0x74>
 8005d4e:	0032      	movs	r2, r6
 8005d50:	0039      	movs	r1, r7
 8005d52:	9803      	ldr	r0, [sp, #12]
 8005d54:	f7ff ff6c 	bl	8005c30 <__ssputs_r>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d100      	bne.n	8005d5e <_svfiprintf_r+0x6a>
 8005d5c:	e0ae      	b.n	8005ebc <_svfiprintf_r+0x1c8>
 8005d5e:	6962      	ldr	r2, [r4, #20]
 8005d60:	9b05      	ldr	r3, [sp, #20]
 8005d62:	4694      	mov	ip, r2
 8005d64:	4463      	add	r3, ip
 8005d66:	6163      	str	r3, [r4, #20]
 8005d68:	782b      	ldrb	r3, [r5, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d100      	bne.n	8005d70 <_svfiprintf_r+0x7c>
 8005d6e:	e0a5      	b.n	8005ebc <_svfiprintf_r+0x1c8>
 8005d70:	2201      	movs	r2, #1
 8005d72:	2300      	movs	r3, #0
 8005d74:	4252      	negs	r2, r2
 8005d76:	6062      	str	r2, [r4, #4]
 8005d78:	a904      	add	r1, sp, #16
 8005d7a:	3254      	adds	r2, #84	; 0x54
 8005d7c:	1852      	adds	r2, r2, r1
 8005d7e:	1c6e      	adds	r6, r5, #1
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	60e3      	str	r3, [r4, #12]
 8005d84:	60a3      	str	r3, [r4, #8]
 8005d86:	7013      	strb	r3, [r2, #0]
 8005d88:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	7831      	ldrb	r1, [r6, #0]
 8005d8e:	4854      	ldr	r0, [pc, #336]	; (8005ee0 <_svfiprintf_r+0x1ec>)
 8005d90:	f000 ff0a 	bl	8006ba8 <memchr>
 8005d94:	1c75      	adds	r5, r6, #1
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d11f      	bne.n	8005dda <_svfiprintf_r+0xe6>
 8005d9a:	6822      	ldr	r2, [r4, #0]
 8005d9c:	06d3      	lsls	r3, r2, #27
 8005d9e:	d504      	bpl.n	8005daa <_svfiprintf_r+0xb6>
 8005da0:	2353      	movs	r3, #83	; 0x53
 8005da2:	a904      	add	r1, sp, #16
 8005da4:	185b      	adds	r3, r3, r1
 8005da6:	2120      	movs	r1, #32
 8005da8:	7019      	strb	r1, [r3, #0]
 8005daa:	0713      	lsls	r3, r2, #28
 8005dac:	d504      	bpl.n	8005db8 <_svfiprintf_r+0xc4>
 8005dae:	2353      	movs	r3, #83	; 0x53
 8005db0:	a904      	add	r1, sp, #16
 8005db2:	185b      	adds	r3, r3, r1
 8005db4:	212b      	movs	r1, #43	; 0x2b
 8005db6:	7019      	strb	r1, [r3, #0]
 8005db8:	7833      	ldrb	r3, [r6, #0]
 8005dba:	2b2a      	cmp	r3, #42	; 0x2a
 8005dbc:	d016      	beq.n	8005dec <_svfiprintf_r+0xf8>
 8005dbe:	0035      	movs	r5, r6
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	200a      	movs	r0, #10
 8005dc4:	68e3      	ldr	r3, [r4, #12]
 8005dc6:	782a      	ldrb	r2, [r5, #0]
 8005dc8:	1c6e      	adds	r6, r5, #1
 8005dca:	3a30      	subs	r2, #48	; 0x30
 8005dcc:	2a09      	cmp	r2, #9
 8005dce:	d94e      	bls.n	8005e6e <_svfiprintf_r+0x17a>
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	d111      	bne.n	8005df8 <_svfiprintf_r+0x104>
 8005dd4:	e017      	b.n	8005e06 <_svfiprintf_r+0x112>
 8005dd6:	3501      	adds	r5, #1
 8005dd8:	e7b0      	b.n	8005d3c <_svfiprintf_r+0x48>
 8005dda:	4b41      	ldr	r3, [pc, #260]	; (8005ee0 <_svfiprintf_r+0x1ec>)
 8005ddc:	6822      	ldr	r2, [r4, #0]
 8005dde:	1ac0      	subs	r0, r0, r3
 8005de0:	2301      	movs	r3, #1
 8005de2:	4083      	lsls	r3, r0
 8005de4:	4313      	orrs	r3, r2
 8005de6:	002e      	movs	r6, r5
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	e7ce      	b.n	8005d8a <_svfiprintf_r+0x96>
 8005dec:	9b07      	ldr	r3, [sp, #28]
 8005dee:	1d19      	adds	r1, r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	9107      	str	r1, [sp, #28]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	db01      	blt.n	8005dfc <_svfiprintf_r+0x108>
 8005df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dfa:	e004      	b.n	8005e06 <_svfiprintf_r+0x112>
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	60e3      	str	r3, [r4, #12]
 8005e00:	2302      	movs	r3, #2
 8005e02:	4313      	orrs	r3, r2
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	782b      	ldrb	r3, [r5, #0]
 8005e08:	2b2e      	cmp	r3, #46	; 0x2e
 8005e0a:	d10a      	bne.n	8005e22 <_svfiprintf_r+0x12e>
 8005e0c:	786b      	ldrb	r3, [r5, #1]
 8005e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e10:	d135      	bne.n	8005e7e <_svfiprintf_r+0x18a>
 8005e12:	9b07      	ldr	r3, [sp, #28]
 8005e14:	3502      	adds	r5, #2
 8005e16:	1d1a      	adds	r2, r3, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	9207      	str	r2, [sp, #28]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	db2b      	blt.n	8005e78 <_svfiprintf_r+0x184>
 8005e20:	9309      	str	r3, [sp, #36]	; 0x24
 8005e22:	4e30      	ldr	r6, [pc, #192]	; (8005ee4 <_svfiprintf_r+0x1f0>)
 8005e24:	2203      	movs	r2, #3
 8005e26:	0030      	movs	r0, r6
 8005e28:	7829      	ldrb	r1, [r5, #0]
 8005e2a:	f000 febd 	bl	8006ba8 <memchr>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d006      	beq.n	8005e40 <_svfiprintf_r+0x14c>
 8005e32:	2340      	movs	r3, #64	; 0x40
 8005e34:	1b80      	subs	r0, r0, r6
 8005e36:	4083      	lsls	r3, r0
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	3501      	adds	r5, #1
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	7829      	ldrb	r1, [r5, #0]
 8005e42:	2206      	movs	r2, #6
 8005e44:	4828      	ldr	r0, [pc, #160]	; (8005ee8 <_svfiprintf_r+0x1f4>)
 8005e46:	1c6e      	adds	r6, r5, #1
 8005e48:	7621      	strb	r1, [r4, #24]
 8005e4a:	f000 fead 	bl	8006ba8 <memchr>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d03c      	beq.n	8005ecc <_svfiprintf_r+0x1d8>
 8005e52:	4b26      	ldr	r3, [pc, #152]	; (8005eec <_svfiprintf_r+0x1f8>)
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d125      	bne.n	8005ea4 <_svfiprintf_r+0x1b0>
 8005e58:	2207      	movs	r2, #7
 8005e5a:	9b07      	ldr	r3, [sp, #28]
 8005e5c:	3307      	adds	r3, #7
 8005e5e:	4393      	bics	r3, r2
 8005e60:	3308      	adds	r3, #8
 8005e62:	9307      	str	r3, [sp, #28]
 8005e64:	6963      	ldr	r3, [r4, #20]
 8005e66:	9a04      	ldr	r2, [sp, #16]
 8005e68:	189b      	adds	r3, r3, r2
 8005e6a:	6163      	str	r3, [r4, #20]
 8005e6c:	e765      	b.n	8005d3a <_svfiprintf_r+0x46>
 8005e6e:	4343      	muls	r3, r0
 8005e70:	0035      	movs	r5, r6
 8005e72:	2101      	movs	r1, #1
 8005e74:	189b      	adds	r3, r3, r2
 8005e76:	e7a6      	b.n	8005dc6 <_svfiprintf_r+0xd2>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	425b      	negs	r3, r3
 8005e7c:	e7d0      	b.n	8005e20 <_svfiprintf_r+0x12c>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	200a      	movs	r0, #10
 8005e82:	001a      	movs	r2, r3
 8005e84:	3501      	adds	r5, #1
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	7829      	ldrb	r1, [r5, #0]
 8005e8a:	1c6e      	adds	r6, r5, #1
 8005e8c:	3930      	subs	r1, #48	; 0x30
 8005e8e:	2909      	cmp	r1, #9
 8005e90:	d903      	bls.n	8005e9a <_svfiprintf_r+0x1a6>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0c5      	beq.n	8005e22 <_svfiprintf_r+0x12e>
 8005e96:	9209      	str	r2, [sp, #36]	; 0x24
 8005e98:	e7c3      	b.n	8005e22 <_svfiprintf_r+0x12e>
 8005e9a:	4342      	muls	r2, r0
 8005e9c:	0035      	movs	r5, r6
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	1852      	adds	r2, r2, r1
 8005ea2:	e7f1      	b.n	8005e88 <_svfiprintf_r+0x194>
 8005ea4:	ab07      	add	r3, sp, #28
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	003a      	movs	r2, r7
 8005eaa:	0021      	movs	r1, r4
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <_svfiprintf_r+0x1fc>)
 8005eae:	9803      	ldr	r0, [sp, #12]
 8005eb0:	e000      	b.n	8005eb4 <_svfiprintf_r+0x1c0>
 8005eb2:	bf00      	nop
 8005eb4:	9004      	str	r0, [sp, #16]
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	d1d3      	bne.n	8005e64 <_svfiprintf_r+0x170>
 8005ebc:	89bb      	ldrh	r3, [r7, #12]
 8005ebe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ec0:	065b      	lsls	r3, r3, #25
 8005ec2:	d400      	bmi.n	8005ec6 <_svfiprintf_r+0x1d2>
 8005ec4:	e72d      	b.n	8005d22 <_svfiprintf_r+0x2e>
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	4240      	negs	r0, r0
 8005eca:	e72a      	b.n	8005d22 <_svfiprintf_r+0x2e>
 8005ecc:	ab07      	add	r3, sp, #28
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	003a      	movs	r2, r7
 8005ed2:	0021      	movs	r1, r4
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <_svfiprintf_r+0x1fc>)
 8005ed6:	9803      	ldr	r0, [sp, #12]
 8005ed8:	f000 fa56 	bl	8006388 <_printf_i>
 8005edc:	e7ea      	b.n	8005eb4 <_svfiprintf_r+0x1c0>
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	080070bc 	.word	0x080070bc
 8005ee4:	080070c2 	.word	0x080070c2
 8005ee8:	080070c6 	.word	0x080070c6
 8005eec:	00000000 	.word	0x00000000
 8005ef0:	08005c31 	.word	0x08005c31

08005ef4 <_sungetc_r>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	0014      	movs	r4, r2
 8005ef8:	1c4b      	adds	r3, r1, #1
 8005efa:	d103      	bne.n	8005f04 <_sungetc_r+0x10>
 8005efc:	2501      	movs	r5, #1
 8005efe:	426d      	negs	r5, r5
 8005f00:	0028      	movs	r0, r5
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	8993      	ldrh	r3, [r2, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	4393      	bics	r3, r2
 8005f0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	b2ce      	uxtb	r6, r1
 8005f10:	6863      	ldr	r3, [r4, #4]
 8005f12:	b2cd      	uxtb	r5, r1
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	d010      	beq.n	8005f3a <_sungetc_r+0x46>
 8005f18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	dd07      	ble.n	8005f2e <_sungetc_r+0x3a>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	701e      	strb	r6, [r3, #0]
 8005f26:	6863      	ldr	r3, [r4, #4]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	6063      	str	r3, [r4, #4]
 8005f2c:	e7e8      	b.n	8005f00 <_sungetc_r+0xc>
 8005f2e:	0021      	movs	r1, r4
 8005f30:	f000 fdfa 	bl	8006b28 <__submore>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d0f2      	beq.n	8005f1e <_sungetc_r+0x2a>
 8005f38:	e7e0      	b.n	8005efc <_sungetc_r+0x8>
 8005f3a:	6921      	ldr	r1, [r4, #16]
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	2900      	cmp	r1, #0
 8005f40:	d007      	beq.n	8005f52 <_sungetc_r+0x5e>
 8005f42:	4291      	cmp	r1, r2
 8005f44:	d205      	bcs.n	8005f52 <_sungetc_r+0x5e>
 8005f46:	1e51      	subs	r1, r2, #1
 8005f48:	7808      	ldrb	r0, [r1, #0]
 8005f4a:	42a8      	cmp	r0, r5
 8005f4c:	d101      	bne.n	8005f52 <_sungetc_r+0x5e>
 8005f4e:	6021      	str	r1, [r4, #0]
 8005f50:	e7ea      	b.n	8005f28 <_sungetc_r+0x34>
 8005f52:	6423      	str	r3, [r4, #64]	; 0x40
 8005f54:	0023      	movs	r3, r4
 8005f56:	3344      	adds	r3, #68	; 0x44
 8005f58:	6363      	str	r3, [r4, #52]	; 0x34
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f5e:	0023      	movs	r3, r4
 8005f60:	3346      	adds	r3, #70	; 0x46
 8005f62:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005f64:	701e      	strb	r6, [r3, #0]
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e7de      	b.n	8005f2a <_sungetc_r+0x36>

08005f6c <__ssrefill_r>:
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	000c      	movs	r4, r1
 8005f70:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f72:	2900      	cmp	r1, #0
 8005f74:	d00e      	beq.n	8005f94 <__ssrefill_r+0x28>
 8005f76:	0023      	movs	r3, r4
 8005f78:	3344      	adds	r3, #68	; 0x44
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	d001      	beq.n	8005f82 <__ssrefill_r+0x16>
 8005f7e:	f000 fe3b 	bl	8006bf8 <_free_r>
 8005f82:	2000      	movs	r0, #0
 8005f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f86:	6360      	str	r0, [r4, #52]	; 0x34
 8005f88:	6063      	str	r3, [r4, #4]
 8005f8a:	4283      	cmp	r3, r0
 8005f8c:	d002      	beq.n	8005f94 <__ssrefill_r+0x28>
 8005f8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd10      	pop	{r4, pc}
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	2001      	movs	r0, #1
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	89a2      	ldrh	r2, [r4, #12]
 8005f9e:	6063      	str	r3, [r4, #4]
 8005fa0:	3320      	adds	r3, #32
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	81a3      	strh	r3, [r4, #12]
 8005fa6:	4240      	negs	r0, r0
 8005fa8:	e7f3      	b.n	8005f92 <__ssrefill_r+0x26>
	...

08005fac <__ssvfiscanf_r>:
 8005fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fae:	4cb8      	ldr	r4, [pc, #736]	; (8006290 <__ssvfiscanf_r+0x2e4>)
 8005fb0:	0006      	movs	r6, r0
 8005fb2:	44a5      	add	sp, r4
 8005fb4:	000c      	movs	r4, r1
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	9146      	str	r1, [sp, #280]	; 0x118
 8005fba:	9147      	str	r1, [sp, #284]	; 0x11c
 8005fbc:	a903      	add	r1, sp, #12
 8005fbe:	9148      	str	r1, [sp, #288]	; 0x120
 8005fc0:	21be      	movs	r1, #190	; 0xbe
 8005fc2:	48b4      	ldr	r0, [pc, #720]	; (8006294 <__ssvfiscanf_r+0x2e8>)
 8005fc4:	0049      	lsls	r1, r1, #1
 8005fc6:	ad43      	add	r5, sp, #268	; 0x10c
 8005fc8:	5068      	str	r0, [r5, r1]
 8005fca:	25c0      	movs	r5, #192	; 0xc0
 8005fcc:	49b2      	ldr	r1, [pc, #712]	; (8006298 <__ssvfiscanf_r+0x2ec>)
 8005fce:	006d      	lsls	r5, r5, #1
 8005fd0:	a843      	add	r0, sp, #268	; 0x10c
 8005fd2:	5141      	str	r1, [r0, r5]
 8005fd4:	9302      	str	r3, [sp, #8]
 8005fd6:	7813      	ldrb	r3, [r2, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d100      	bne.n	8005fde <__ssvfiscanf_r+0x32>
 8005fdc:	e155      	b.n	800628a <__ssvfiscanf_r+0x2de>
 8005fde:	49af      	ldr	r1, [pc, #700]	; (800629c <__ssvfiscanf_r+0x2f0>)
 8005fe0:	2508      	movs	r5, #8
 8005fe2:	5cc8      	ldrb	r0, [r1, r3]
 8005fe4:	2108      	movs	r1, #8
 8005fe6:	1c57      	adds	r7, r2, #1
 8005fe8:	4001      	ands	r1, r0
 8005fea:	4228      	tst	r0, r5
 8005fec:	d020      	beq.n	8006030 <__ssvfiscanf_r+0x84>
 8005fee:	6863      	ldr	r3, [r4, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	dd12      	ble.n	800601a <__ssvfiscanf_r+0x6e>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	49a9      	ldr	r1, [pc, #676]	; (800629c <__ssvfiscanf_r+0x2f0>)
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	5c8a      	ldrb	r2, [r1, r2]
 8005ffc:	2108      	movs	r1, #8
 8005ffe:	420a      	tst	r2, r1
 8006000:	d101      	bne.n	8006006 <__ssvfiscanf_r+0x5a>
 8006002:	003a      	movs	r2, r7
 8006004:	e7e7      	b.n	8005fd6 <__ssvfiscanf_r+0x2a>
 8006006:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8006008:	3301      	adds	r3, #1
 800600a:	9200      	str	r2, [sp, #0]
 800600c:	3201      	adds	r2, #1
 800600e:	9247      	str	r2, [sp, #284]	; 0x11c
 8006010:	6862      	ldr	r2, [r4, #4]
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	3a01      	subs	r2, #1
 8006016:	6062      	str	r2, [r4, #4]
 8006018:	e7e9      	b.n	8005fee <__ssvfiscanf_r+0x42>
 800601a:	22c0      	movs	r2, #192	; 0xc0
 800601c:	ab43      	add	r3, sp, #268	; 0x10c
 800601e:	0052      	lsls	r2, r2, #1
 8006020:	589b      	ldr	r3, [r3, r2]
 8006022:	0021      	movs	r1, r4
 8006024:	0030      	movs	r0, r6
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4798      	blx	r3
 800602a:	2800      	cmp	r0, #0
 800602c:	d0e2      	beq.n	8005ff4 <__ssvfiscanf_r+0x48>
 800602e:	e7e8      	b.n	8006002 <__ssvfiscanf_r+0x56>
 8006030:	001d      	movs	r5, r3
 8006032:	2b25      	cmp	r3, #37	; 0x25
 8006034:	d164      	bne.n	8006100 <__ssvfiscanf_r+0x154>
 8006036:	9145      	str	r1, [sp, #276]	; 0x114
 8006038:	9143      	str	r1, [sp, #268]	; 0x10c
 800603a:	7853      	ldrb	r3, [r2, #1]
 800603c:	2b2a      	cmp	r3, #42	; 0x2a
 800603e:	d102      	bne.n	8006046 <__ssvfiscanf_r+0x9a>
 8006040:	3b1a      	subs	r3, #26
 8006042:	9343      	str	r3, [sp, #268]	; 0x10c
 8006044:	1c97      	adds	r7, r2, #2
 8006046:	003d      	movs	r5, r7
 8006048:	220a      	movs	r2, #10
 800604a:	7829      	ldrb	r1, [r5, #0]
 800604c:	1c6b      	adds	r3, r5, #1
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	000b      	movs	r3, r1
 8006052:	3b30      	subs	r3, #48	; 0x30
 8006054:	2b09      	cmp	r3, #9
 8006056:	d91f      	bls.n	8006098 <__ssvfiscanf_r+0xec>
 8006058:	4f91      	ldr	r7, [pc, #580]	; (80062a0 <__ssvfiscanf_r+0x2f4>)
 800605a:	2203      	movs	r2, #3
 800605c:	0038      	movs	r0, r7
 800605e:	f000 fda3 	bl	8006ba8 <memchr>
 8006062:	2800      	cmp	r0, #0
 8006064:	d007      	beq.n	8006076 <__ssvfiscanf_r+0xca>
 8006066:	2301      	movs	r3, #1
 8006068:	1bc0      	subs	r0, r0, r7
 800606a:	4083      	lsls	r3, r0
 800606c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800606e:	9d00      	ldr	r5, [sp, #0]
 8006070:	4313      	orrs	r3, r2
 8006072:	9201      	str	r2, [sp, #4]
 8006074:	9343      	str	r3, [sp, #268]	; 0x10c
 8006076:	1c6f      	adds	r7, r5, #1
 8006078:	782d      	ldrb	r5, [r5, #0]
 800607a:	2d78      	cmp	r5, #120	; 0x78
 800607c:	d807      	bhi.n	800608e <__ssvfiscanf_r+0xe2>
 800607e:	2d57      	cmp	r5, #87	; 0x57
 8006080:	d812      	bhi.n	80060a8 <__ssvfiscanf_r+0xfc>
 8006082:	2d25      	cmp	r5, #37	; 0x25
 8006084:	d03c      	beq.n	8006100 <__ssvfiscanf_r+0x154>
 8006086:	d836      	bhi.n	80060f6 <__ssvfiscanf_r+0x14a>
 8006088:	2d00      	cmp	r5, #0
 800608a:	d100      	bne.n	800608e <__ssvfiscanf_r+0xe2>
 800608c:	e0fa      	b.n	8006284 <__ssvfiscanf_r+0x2d8>
 800608e:	2303      	movs	r3, #3
 8006090:	9349      	str	r3, [sp, #292]	; 0x124
 8006092:	3307      	adds	r3, #7
 8006094:	9344      	str	r3, [sp, #272]	; 0x110
 8006096:	e06d      	b.n	8006174 <__ssvfiscanf_r+0x1c8>
 8006098:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800609a:	9d00      	ldr	r5, [sp, #0]
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	4353      	muls	r3, r2
 80060a0:	3b30      	subs	r3, #48	; 0x30
 80060a2:	185b      	adds	r3, r3, r1
 80060a4:	9345      	str	r3, [sp, #276]	; 0x114
 80060a6:	e7d0      	b.n	800604a <__ssvfiscanf_r+0x9e>
 80060a8:	0028      	movs	r0, r5
 80060aa:	3858      	subs	r0, #88	; 0x58
 80060ac:	2820      	cmp	r0, #32
 80060ae:	d8ee      	bhi.n	800608e <__ssvfiscanf_r+0xe2>
 80060b0:	f7fa f832 	bl	8000118 <__gnu_thumb1_case_shi>
 80060b4:	ffed0051 	.word	0xffed0051
 80060b8:	0087ffed 	.word	0x0087ffed
 80060bc:	ffedffed 	.word	0xffedffed
 80060c0:	ffedffed 	.word	0xffedffed
 80060c4:	ffedffed 	.word	0xffedffed
 80060c8:	0095ffed 	.word	0x0095ffed
 80060cc:	0024007d 	.word	0x0024007d
 80060d0:	00240024 	.word	0x00240024
 80060d4:	007fffed 	.word	0x007fffed
 80060d8:	ffedffed 	.word	0xffedffed
 80060dc:	ffedffed 	.word	0xffedffed
 80060e0:	0083009f 	.word	0x0083009f
 80060e4:	ffed004b 	.word	0xffed004b
 80060e8:	009dffed 	.word	0x009dffed
 80060ec:	007dffed 	.word	0x007dffed
 80060f0:	ffedffed 	.word	0xffedffed
 80060f4:	0051      	.short	0x0051
 80060f6:	3d45      	subs	r5, #69	; 0x45
 80060f8:	2d02      	cmp	r5, #2
 80060fa:	d8c8      	bhi.n	800608e <__ssvfiscanf_r+0xe2>
 80060fc:	2305      	movs	r3, #5
 80060fe:	e06c      	b.n	80061da <__ssvfiscanf_r+0x22e>
 8006100:	6863      	ldr	r3, [r4, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	dd0e      	ble.n	8006124 <__ssvfiscanf_r+0x178>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	781a      	ldrb	r2, [r3, #0]
 800610a:	42aa      	cmp	r2, r5
 800610c:	d000      	beq.n	8006110 <__ssvfiscanf_r+0x164>
 800610e:	e0bc      	b.n	800628a <__ssvfiscanf_r+0x2de>
 8006110:	3301      	adds	r3, #1
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006118:	3a01      	subs	r2, #1
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	6062      	str	r2, [r4, #4]
 8006120:	9347      	str	r3, [sp, #284]	; 0x11c
 8006122:	e76e      	b.n	8006002 <__ssvfiscanf_r+0x56>
 8006124:	22c0      	movs	r2, #192	; 0xc0
 8006126:	ab43      	add	r3, sp, #268	; 0x10c
 8006128:	0052      	lsls	r2, r2, #1
 800612a:	589b      	ldr	r3, [r3, r2]
 800612c:	0021      	movs	r1, r4
 800612e:	0030      	movs	r0, r6
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	4798      	blx	r3
 8006134:	2800      	cmp	r0, #0
 8006136:	d0e6      	beq.n	8006106 <__ssvfiscanf_r+0x15a>
 8006138:	9846      	ldr	r0, [sp, #280]	; 0x118
 800613a:	2800      	cmp	r0, #0
 800613c:	d000      	beq.n	8006140 <__ssvfiscanf_r+0x194>
 800613e:	e09d      	b.n	800627c <__ssvfiscanf_r+0x2d0>
 8006140:	3801      	subs	r0, #1
 8006142:	23a5      	movs	r3, #165	; 0xa5
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	449d      	add	sp, r3
 8006148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800614a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	2320      	movs	r3, #32
 8006150:	9a00      	ldr	r2, [sp, #0]
 8006152:	4313      	orrs	r3, r2
 8006154:	9343      	str	r3, [sp, #268]	; 0x10c
 8006156:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	2380      	movs	r3, #128	; 0x80
 800615c:	9a00      	ldr	r2, [sp, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4313      	orrs	r3, r2
 8006162:	9343      	str	r3, [sp, #268]	; 0x10c
 8006164:	2310      	movs	r3, #16
 8006166:	9344      	str	r3, [sp, #272]	; 0x110
 8006168:	236e      	movs	r3, #110	; 0x6e
 800616a:	42ab      	cmp	r3, r5
 800616c:	41ad      	sbcs	r5, r5
 800616e:	426d      	negs	r5, r5
 8006170:	3503      	adds	r5, #3
 8006172:	9549      	str	r5, [sp, #292]	; 0x124
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	dd4a      	ble.n	8006210 <__ssvfiscanf_r+0x264>
 800617a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	065b      	lsls	r3, r3, #25
 8006180:	d406      	bmi.n	8006190 <__ssvfiscanf_r+0x1e4>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	4945      	ldr	r1, [pc, #276]	; (800629c <__ssvfiscanf_r+0x2f0>)
 8006186:	781a      	ldrb	r2, [r3, #0]
 8006188:	5c8a      	ldrb	r2, [r1, r2]
 800618a:	2108      	movs	r1, #8
 800618c:	420a      	tst	r2, r1
 800618e:	d14a      	bne.n	8006226 <__ssvfiscanf_r+0x27a>
 8006190:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8006192:	2b02      	cmp	r3, #2
 8006194:	dc5e      	bgt.n	8006254 <__ssvfiscanf_r+0x2a8>
 8006196:	0022      	movs	r2, r4
 8006198:	0030      	movs	r0, r6
 800619a:	ab02      	add	r3, sp, #8
 800619c:	a943      	add	r1, sp, #268	; 0x10c
 800619e:	f000 fa05 	bl	80065ac <_scanf_chars>
 80061a2:	2801      	cmp	r0, #1
 80061a4:	d071      	beq.n	800628a <__ssvfiscanf_r+0x2de>
 80061a6:	2802      	cmp	r0, #2
 80061a8:	d000      	beq.n	80061ac <__ssvfiscanf_r+0x200>
 80061aa:	e72a      	b.n	8006002 <__ssvfiscanf_r+0x56>
 80061ac:	e7c4      	b.n	8006138 <__ssvfiscanf_r+0x18c>
 80061ae:	230a      	movs	r3, #10
 80061b0:	e7d9      	b.n	8006166 <__ssvfiscanf_r+0x1ba>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2503      	movs	r5, #3
 80061b6:	9344      	str	r3, [sp, #272]	; 0x110
 80061b8:	e7db      	b.n	8006172 <__ssvfiscanf_r+0x1c6>
 80061ba:	2308      	movs	r3, #8
 80061bc:	2504      	movs	r5, #4
 80061be:	9344      	str	r3, [sp, #272]	; 0x110
 80061c0:	e7d7      	b.n	8006172 <__ssvfiscanf_r+0x1c6>
 80061c2:	0039      	movs	r1, r7
 80061c4:	a803      	add	r0, sp, #12
 80061c6:	f000 fb53 	bl	8006870 <__sccl>
 80061ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80061cc:	0007      	movs	r7, r0
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2340      	movs	r3, #64	; 0x40
 80061d2:	9a00      	ldr	r2, [sp, #0]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	9343      	str	r3, [sp, #268]	; 0x10c
 80061d8:	2301      	movs	r3, #1
 80061da:	9349      	str	r3, [sp, #292]	; 0x124
 80061dc:	e7ca      	b.n	8006174 <__ssvfiscanf_r+0x1c8>
 80061de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	2340      	movs	r3, #64	; 0x40
 80061e4:	9a00      	ldr	r2, [sp, #0]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	9343      	str	r3, [sp, #268]	; 0x10c
 80061ea:	2300      	movs	r3, #0
 80061ec:	e7f5      	b.n	80061da <__ssvfiscanf_r+0x22e>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e7f3      	b.n	80061da <__ssvfiscanf_r+0x22e>
 80061f2:	9843      	ldr	r0, [sp, #268]	; 0x10c
 80061f4:	06c3      	lsls	r3, r0, #27
 80061f6:	d500      	bpl.n	80061fa <__ssvfiscanf_r+0x24e>
 80061f8:	e703      	b.n	8006002 <__ssvfiscanf_r+0x56>
 80061fa:	9b02      	ldr	r3, [sp, #8]
 80061fc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80061fe:	1d19      	adds	r1, r3, #4
 8006200:	9102      	str	r1, [sp, #8]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	07c5      	lsls	r5, r0, #31
 8006206:	d501      	bpl.n	800620c <__ssvfiscanf_r+0x260>
 8006208:	801a      	strh	r2, [r3, #0]
 800620a:	e6fa      	b.n	8006002 <__ssvfiscanf_r+0x56>
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	e6f8      	b.n	8006002 <__ssvfiscanf_r+0x56>
 8006210:	22c0      	movs	r2, #192	; 0xc0
 8006212:	ab43      	add	r3, sp, #268	; 0x10c
 8006214:	0052      	lsls	r2, r2, #1
 8006216:	589b      	ldr	r3, [r3, r2]
 8006218:	0021      	movs	r1, r4
 800621a:	0030      	movs	r0, r6
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	4798      	blx	r3
 8006220:	2800      	cmp	r0, #0
 8006222:	d0aa      	beq.n	800617a <__ssvfiscanf_r+0x1ce>
 8006224:	e788      	b.n	8006138 <__ssvfiscanf_r+0x18c>
 8006226:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8006228:	9200      	str	r2, [sp, #0]
 800622a:	3201      	adds	r2, #1
 800622c:	9247      	str	r2, [sp, #284]	; 0x11c
 800622e:	6862      	ldr	r2, [r4, #4]
 8006230:	3a01      	subs	r2, #1
 8006232:	6062      	str	r2, [r4, #4]
 8006234:	2a00      	cmp	r2, #0
 8006236:	dd02      	ble.n	800623e <__ssvfiscanf_r+0x292>
 8006238:	3301      	adds	r3, #1
 800623a:	6023      	str	r3, [r4, #0]
 800623c:	e7a1      	b.n	8006182 <__ssvfiscanf_r+0x1d6>
 800623e:	22c0      	movs	r2, #192	; 0xc0
 8006240:	ab43      	add	r3, sp, #268	; 0x10c
 8006242:	0052      	lsls	r2, r2, #1
 8006244:	589b      	ldr	r3, [r3, r2]
 8006246:	0021      	movs	r1, r4
 8006248:	0030      	movs	r0, r6
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	4798      	blx	r3
 800624e:	2800      	cmp	r0, #0
 8006250:	d097      	beq.n	8006182 <__ssvfiscanf_r+0x1d6>
 8006252:	e771      	b.n	8006138 <__ssvfiscanf_r+0x18c>
 8006254:	2b04      	cmp	r3, #4
 8006256:	dc06      	bgt.n	8006266 <__ssvfiscanf_r+0x2ba>
 8006258:	0022      	movs	r2, r4
 800625a:	0030      	movs	r0, r6
 800625c:	ab02      	add	r3, sp, #8
 800625e:	a943      	add	r1, sp, #268	; 0x10c
 8006260:	f000 fa02 	bl	8006668 <_scanf_i>
 8006264:	e79d      	b.n	80061a2 <__ssvfiscanf_r+0x1f6>
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <__ssvfiscanf_r+0x2f8>)
 8006268:	2b00      	cmp	r3, #0
 800626a:	d100      	bne.n	800626e <__ssvfiscanf_r+0x2c2>
 800626c:	e6c9      	b.n	8006002 <__ssvfiscanf_r+0x56>
 800626e:	0022      	movs	r2, r4
 8006270:	0030      	movs	r0, r6
 8006272:	ab02      	add	r3, sp, #8
 8006274:	a943      	add	r1, sp, #268	; 0x10c
 8006276:	e000      	b.n	800627a <__ssvfiscanf_r+0x2ce>
 8006278:	bf00      	nop
 800627a:	e792      	b.n	80061a2 <__ssvfiscanf_r+0x1f6>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	065b      	lsls	r3, r3, #25
 8006280:	d400      	bmi.n	8006284 <__ssvfiscanf_r+0x2d8>
 8006282:	e75e      	b.n	8006142 <__ssvfiscanf_r+0x196>
 8006284:	2001      	movs	r0, #1
 8006286:	4240      	negs	r0, r0
 8006288:	e75b      	b.n	8006142 <__ssvfiscanf_r+0x196>
 800628a:	9846      	ldr	r0, [sp, #280]	; 0x118
 800628c:	e759      	b.n	8006142 <__ssvfiscanf_r+0x196>
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	fffffd6c 	.word	0xfffffd6c
 8006294:	08005ef5 	.word	0x08005ef5
 8006298:	08005f6d 	.word	0x08005f6d
 800629c:	0800710b 	.word	0x0800710b
 80062a0:	080070c2 	.word	0x080070c2
 80062a4:	00000000 	.word	0x00000000

080062a8 <_printf_common>:
 80062a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062aa:	0015      	movs	r5, r2
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	688a      	ldr	r2, [r1, #8]
 80062b0:	690b      	ldr	r3, [r1, #16]
 80062b2:	000c      	movs	r4, r1
 80062b4:	9000      	str	r0, [sp, #0]
 80062b6:	4293      	cmp	r3, r2
 80062b8:	da00      	bge.n	80062bc <_printf_common+0x14>
 80062ba:	0013      	movs	r3, r2
 80062bc:	0022      	movs	r2, r4
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	3243      	adds	r2, #67	; 0x43
 80062c2:	7812      	ldrb	r2, [r2, #0]
 80062c4:	2a00      	cmp	r2, #0
 80062c6:	d001      	beq.n	80062cc <_printf_common+0x24>
 80062c8:	3301      	adds	r3, #1
 80062ca:	602b      	str	r3, [r5, #0]
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	069b      	lsls	r3, r3, #26
 80062d0:	d502      	bpl.n	80062d8 <_printf_common+0x30>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	3302      	adds	r3, #2
 80062d6:	602b      	str	r3, [r5, #0]
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	2306      	movs	r3, #6
 80062dc:	0017      	movs	r7, r2
 80062de:	401f      	ands	r7, r3
 80062e0:	421a      	tst	r2, r3
 80062e2:	d027      	beq.n	8006334 <_printf_common+0x8c>
 80062e4:	0023      	movs	r3, r4
 80062e6:	3343      	adds	r3, #67	; 0x43
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	1e5a      	subs	r2, r3, #1
 80062ec:	4193      	sbcs	r3, r2
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	0692      	lsls	r2, r2, #26
 80062f2:	d430      	bmi.n	8006356 <_printf_common+0xae>
 80062f4:	0022      	movs	r2, r4
 80062f6:	9901      	ldr	r1, [sp, #4]
 80062f8:	9800      	ldr	r0, [sp, #0]
 80062fa:	9e08      	ldr	r6, [sp, #32]
 80062fc:	3243      	adds	r2, #67	; 0x43
 80062fe:	47b0      	blx	r6
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d025      	beq.n	8006350 <_printf_common+0xa8>
 8006304:	2306      	movs	r3, #6
 8006306:	6820      	ldr	r0, [r4, #0]
 8006308:	682a      	ldr	r2, [r5, #0]
 800630a:	68e1      	ldr	r1, [r4, #12]
 800630c:	2500      	movs	r5, #0
 800630e:	4003      	ands	r3, r0
 8006310:	2b04      	cmp	r3, #4
 8006312:	d103      	bne.n	800631c <_printf_common+0x74>
 8006314:	1a8d      	subs	r5, r1, r2
 8006316:	43eb      	mvns	r3, r5
 8006318:	17db      	asrs	r3, r3, #31
 800631a:	401d      	ands	r5, r3
 800631c:	68a3      	ldr	r3, [r4, #8]
 800631e:	6922      	ldr	r2, [r4, #16]
 8006320:	4293      	cmp	r3, r2
 8006322:	dd01      	ble.n	8006328 <_printf_common+0x80>
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	18ed      	adds	r5, r5, r3
 8006328:	2700      	movs	r7, #0
 800632a:	42bd      	cmp	r5, r7
 800632c:	d120      	bne.n	8006370 <_printf_common+0xc8>
 800632e:	2000      	movs	r0, #0
 8006330:	e010      	b.n	8006354 <_printf_common+0xac>
 8006332:	3701      	adds	r7, #1
 8006334:	68e3      	ldr	r3, [r4, #12]
 8006336:	682a      	ldr	r2, [r5, #0]
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	42bb      	cmp	r3, r7
 800633c:	ddd2      	ble.n	80062e4 <_printf_common+0x3c>
 800633e:	0022      	movs	r2, r4
 8006340:	2301      	movs	r3, #1
 8006342:	9901      	ldr	r1, [sp, #4]
 8006344:	9800      	ldr	r0, [sp, #0]
 8006346:	9e08      	ldr	r6, [sp, #32]
 8006348:	3219      	adds	r2, #25
 800634a:	47b0      	blx	r6
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d1f0      	bne.n	8006332 <_printf_common+0x8a>
 8006350:	2001      	movs	r0, #1
 8006352:	4240      	negs	r0, r0
 8006354:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006356:	2030      	movs	r0, #48	; 0x30
 8006358:	18e1      	adds	r1, r4, r3
 800635a:	3143      	adds	r1, #67	; 0x43
 800635c:	7008      	strb	r0, [r1, #0]
 800635e:	0021      	movs	r1, r4
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	3145      	adds	r1, #69	; 0x45
 8006364:	7809      	ldrb	r1, [r1, #0]
 8006366:	18a2      	adds	r2, r4, r2
 8006368:	3243      	adds	r2, #67	; 0x43
 800636a:	3302      	adds	r3, #2
 800636c:	7011      	strb	r1, [r2, #0]
 800636e:	e7c1      	b.n	80062f4 <_printf_common+0x4c>
 8006370:	0022      	movs	r2, r4
 8006372:	2301      	movs	r3, #1
 8006374:	9901      	ldr	r1, [sp, #4]
 8006376:	9800      	ldr	r0, [sp, #0]
 8006378:	9e08      	ldr	r6, [sp, #32]
 800637a:	321a      	adds	r2, #26
 800637c:	47b0      	blx	r6
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	d0e6      	beq.n	8006350 <_printf_common+0xa8>
 8006382:	3701      	adds	r7, #1
 8006384:	e7d1      	b.n	800632a <_printf_common+0x82>
	...

08006388 <_printf_i>:
 8006388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638a:	b08b      	sub	sp, #44	; 0x2c
 800638c:	9206      	str	r2, [sp, #24]
 800638e:	000a      	movs	r2, r1
 8006390:	3243      	adds	r2, #67	; 0x43
 8006392:	9307      	str	r3, [sp, #28]
 8006394:	9005      	str	r0, [sp, #20]
 8006396:	9204      	str	r2, [sp, #16]
 8006398:	7e0a      	ldrb	r2, [r1, #24]
 800639a:	000c      	movs	r4, r1
 800639c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800639e:	2a78      	cmp	r2, #120	; 0x78
 80063a0:	d807      	bhi.n	80063b2 <_printf_i+0x2a>
 80063a2:	2a62      	cmp	r2, #98	; 0x62
 80063a4:	d809      	bhi.n	80063ba <_printf_i+0x32>
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	d100      	bne.n	80063ac <_printf_i+0x24>
 80063aa:	e0c1      	b.n	8006530 <_printf_i+0x1a8>
 80063ac:	2a58      	cmp	r2, #88	; 0x58
 80063ae:	d100      	bne.n	80063b2 <_printf_i+0x2a>
 80063b0:	e08c      	b.n	80064cc <_printf_i+0x144>
 80063b2:	0026      	movs	r6, r4
 80063b4:	3642      	adds	r6, #66	; 0x42
 80063b6:	7032      	strb	r2, [r6, #0]
 80063b8:	e022      	b.n	8006400 <_printf_i+0x78>
 80063ba:	0010      	movs	r0, r2
 80063bc:	3863      	subs	r0, #99	; 0x63
 80063be:	2815      	cmp	r0, #21
 80063c0:	d8f7      	bhi.n	80063b2 <_printf_i+0x2a>
 80063c2:	f7f9 fea9 	bl	8000118 <__gnu_thumb1_case_shi>
 80063c6:	0016      	.short	0x0016
 80063c8:	fff6001f 	.word	0xfff6001f
 80063cc:	fff6fff6 	.word	0xfff6fff6
 80063d0:	001ffff6 	.word	0x001ffff6
 80063d4:	fff6fff6 	.word	0xfff6fff6
 80063d8:	fff6fff6 	.word	0xfff6fff6
 80063dc:	003600a8 	.word	0x003600a8
 80063e0:	fff6009a 	.word	0xfff6009a
 80063e4:	00b9fff6 	.word	0x00b9fff6
 80063e8:	0036fff6 	.word	0x0036fff6
 80063ec:	fff6fff6 	.word	0xfff6fff6
 80063f0:	009e      	.short	0x009e
 80063f2:	0026      	movs	r6, r4
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	3642      	adds	r6, #66	; 0x42
 80063f8:	1d11      	adds	r1, r2, #4
 80063fa:	6019      	str	r1, [r3, #0]
 80063fc:	6813      	ldr	r3, [r2, #0]
 80063fe:	7033      	strb	r3, [r6, #0]
 8006400:	2301      	movs	r3, #1
 8006402:	e0a7      	b.n	8006554 <_printf_i+0x1cc>
 8006404:	6808      	ldr	r0, [r1, #0]
 8006406:	6819      	ldr	r1, [r3, #0]
 8006408:	1d0a      	adds	r2, r1, #4
 800640a:	0605      	lsls	r5, r0, #24
 800640c:	d50b      	bpl.n	8006426 <_printf_i+0x9e>
 800640e:	680d      	ldr	r5, [r1, #0]
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	2d00      	cmp	r5, #0
 8006414:	da03      	bge.n	800641e <_printf_i+0x96>
 8006416:	232d      	movs	r3, #45	; 0x2d
 8006418:	9a04      	ldr	r2, [sp, #16]
 800641a:	426d      	negs	r5, r5
 800641c:	7013      	strb	r3, [r2, #0]
 800641e:	4b61      	ldr	r3, [pc, #388]	; (80065a4 <_printf_i+0x21c>)
 8006420:	270a      	movs	r7, #10
 8006422:	9303      	str	r3, [sp, #12]
 8006424:	e01b      	b.n	800645e <_printf_i+0xd6>
 8006426:	680d      	ldr	r5, [r1, #0]
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	0641      	lsls	r1, r0, #25
 800642c:	d5f1      	bpl.n	8006412 <_printf_i+0x8a>
 800642e:	b22d      	sxth	r5, r5
 8006430:	e7ef      	b.n	8006412 <_printf_i+0x8a>
 8006432:	680d      	ldr	r5, [r1, #0]
 8006434:	6819      	ldr	r1, [r3, #0]
 8006436:	1d08      	adds	r0, r1, #4
 8006438:	6018      	str	r0, [r3, #0]
 800643a:	062e      	lsls	r6, r5, #24
 800643c:	d501      	bpl.n	8006442 <_printf_i+0xba>
 800643e:	680d      	ldr	r5, [r1, #0]
 8006440:	e003      	b.n	800644a <_printf_i+0xc2>
 8006442:	066d      	lsls	r5, r5, #25
 8006444:	d5fb      	bpl.n	800643e <_printf_i+0xb6>
 8006446:	680d      	ldr	r5, [r1, #0]
 8006448:	b2ad      	uxth	r5, r5
 800644a:	4b56      	ldr	r3, [pc, #344]	; (80065a4 <_printf_i+0x21c>)
 800644c:	2708      	movs	r7, #8
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	2a6f      	cmp	r2, #111	; 0x6f
 8006452:	d000      	beq.n	8006456 <_printf_i+0xce>
 8006454:	3702      	adds	r7, #2
 8006456:	0023      	movs	r3, r4
 8006458:	2200      	movs	r2, #0
 800645a:	3343      	adds	r3, #67	; 0x43
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6863      	ldr	r3, [r4, #4]
 8006460:	60a3      	str	r3, [r4, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	db03      	blt.n	800646e <_printf_i+0xe6>
 8006466:	2204      	movs	r2, #4
 8006468:	6821      	ldr	r1, [r4, #0]
 800646a:	4391      	bics	r1, r2
 800646c:	6021      	str	r1, [r4, #0]
 800646e:	2d00      	cmp	r5, #0
 8006470:	d102      	bne.n	8006478 <_printf_i+0xf0>
 8006472:	9e04      	ldr	r6, [sp, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00c      	beq.n	8006492 <_printf_i+0x10a>
 8006478:	9e04      	ldr	r6, [sp, #16]
 800647a:	0028      	movs	r0, r5
 800647c:	0039      	movs	r1, r7
 800647e:	f7f9 fedb 	bl	8000238 <__aeabi_uidivmod>
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	3e01      	subs	r6, #1
 8006486:	5c5b      	ldrb	r3, [r3, r1]
 8006488:	7033      	strb	r3, [r6, #0]
 800648a:	002b      	movs	r3, r5
 800648c:	0005      	movs	r5, r0
 800648e:	429f      	cmp	r7, r3
 8006490:	d9f3      	bls.n	800647a <_printf_i+0xf2>
 8006492:	2f08      	cmp	r7, #8
 8006494:	d109      	bne.n	80064aa <_printf_i+0x122>
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	07db      	lsls	r3, r3, #31
 800649a:	d506      	bpl.n	80064aa <_printf_i+0x122>
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	6922      	ldr	r2, [r4, #16]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	dc02      	bgt.n	80064aa <_printf_i+0x122>
 80064a4:	2330      	movs	r3, #48	; 0x30
 80064a6:	3e01      	subs	r6, #1
 80064a8:	7033      	strb	r3, [r6, #0]
 80064aa:	9b04      	ldr	r3, [sp, #16]
 80064ac:	1b9b      	subs	r3, r3, r6
 80064ae:	6123      	str	r3, [r4, #16]
 80064b0:	9b07      	ldr	r3, [sp, #28]
 80064b2:	0021      	movs	r1, r4
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	9805      	ldr	r0, [sp, #20]
 80064b8:	9b06      	ldr	r3, [sp, #24]
 80064ba:	aa09      	add	r2, sp, #36	; 0x24
 80064bc:	f7ff fef4 	bl	80062a8 <_printf_common>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d14c      	bne.n	800655e <_printf_i+0x1d6>
 80064c4:	2001      	movs	r0, #1
 80064c6:	4240      	negs	r0, r0
 80064c8:	b00b      	add	sp, #44	; 0x2c
 80064ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064cc:	3145      	adds	r1, #69	; 0x45
 80064ce:	700a      	strb	r2, [r1, #0]
 80064d0:	4a34      	ldr	r2, [pc, #208]	; (80065a4 <_printf_i+0x21c>)
 80064d2:	9203      	str	r2, [sp, #12]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	ca20      	ldmia	r2!, {r5}
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	0608      	lsls	r0, r1, #24
 80064de:	d516      	bpl.n	800650e <_printf_i+0x186>
 80064e0:	07cb      	lsls	r3, r1, #31
 80064e2:	d502      	bpl.n	80064ea <_printf_i+0x162>
 80064e4:	2320      	movs	r3, #32
 80064e6:	4319      	orrs	r1, r3
 80064e8:	6021      	str	r1, [r4, #0]
 80064ea:	2710      	movs	r7, #16
 80064ec:	2d00      	cmp	r5, #0
 80064ee:	d1b2      	bne.n	8006456 <_printf_i+0xce>
 80064f0:	2320      	movs	r3, #32
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	439a      	bics	r2, r3
 80064f6:	6022      	str	r2, [r4, #0]
 80064f8:	e7ad      	b.n	8006456 <_printf_i+0xce>
 80064fa:	2220      	movs	r2, #32
 80064fc:	6809      	ldr	r1, [r1, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	6022      	str	r2, [r4, #0]
 8006502:	0022      	movs	r2, r4
 8006504:	2178      	movs	r1, #120	; 0x78
 8006506:	3245      	adds	r2, #69	; 0x45
 8006508:	7011      	strb	r1, [r2, #0]
 800650a:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <_printf_i+0x220>)
 800650c:	e7e1      	b.n	80064d2 <_printf_i+0x14a>
 800650e:	0648      	lsls	r0, r1, #25
 8006510:	d5e6      	bpl.n	80064e0 <_printf_i+0x158>
 8006512:	b2ad      	uxth	r5, r5
 8006514:	e7e4      	b.n	80064e0 <_printf_i+0x158>
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	680d      	ldr	r5, [r1, #0]
 800651a:	1d10      	adds	r0, r2, #4
 800651c:	6949      	ldr	r1, [r1, #20]
 800651e:	6018      	str	r0, [r3, #0]
 8006520:	6813      	ldr	r3, [r2, #0]
 8006522:	062e      	lsls	r6, r5, #24
 8006524:	d501      	bpl.n	800652a <_printf_i+0x1a2>
 8006526:	6019      	str	r1, [r3, #0]
 8006528:	e002      	b.n	8006530 <_printf_i+0x1a8>
 800652a:	066d      	lsls	r5, r5, #25
 800652c:	d5fb      	bpl.n	8006526 <_printf_i+0x19e>
 800652e:	8019      	strh	r1, [r3, #0]
 8006530:	2300      	movs	r3, #0
 8006532:	9e04      	ldr	r6, [sp, #16]
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	e7bb      	b.n	80064b0 <_printf_i+0x128>
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	1d11      	adds	r1, r2, #4
 800653c:	6019      	str	r1, [r3, #0]
 800653e:	6816      	ldr	r6, [r2, #0]
 8006540:	2100      	movs	r1, #0
 8006542:	0030      	movs	r0, r6
 8006544:	6862      	ldr	r2, [r4, #4]
 8006546:	f000 fb2f 	bl	8006ba8 <memchr>
 800654a:	2800      	cmp	r0, #0
 800654c:	d001      	beq.n	8006552 <_printf_i+0x1ca>
 800654e:	1b80      	subs	r0, r0, r6
 8006550:	6060      	str	r0, [r4, #4]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	6123      	str	r3, [r4, #16]
 8006556:	2300      	movs	r3, #0
 8006558:	9a04      	ldr	r2, [sp, #16]
 800655a:	7013      	strb	r3, [r2, #0]
 800655c:	e7a8      	b.n	80064b0 <_printf_i+0x128>
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	0032      	movs	r2, r6
 8006562:	9906      	ldr	r1, [sp, #24]
 8006564:	9805      	ldr	r0, [sp, #20]
 8006566:	9d07      	ldr	r5, [sp, #28]
 8006568:	47a8      	blx	r5
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d0aa      	beq.n	80064c4 <_printf_i+0x13c>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	079b      	lsls	r3, r3, #30
 8006572:	d415      	bmi.n	80065a0 <_printf_i+0x218>
 8006574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006576:	68e0      	ldr	r0, [r4, #12]
 8006578:	4298      	cmp	r0, r3
 800657a:	daa5      	bge.n	80064c8 <_printf_i+0x140>
 800657c:	0018      	movs	r0, r3
 800657e:	e7a3      	b.n	80064c8 <_printf_i+0x140>
 8006580:	0022      	movs	r2, r4
 8006582:	2301      	movs	r3, #1
 8006584:	9906      	ldr	r1, [sp, #24]
 8006586:	9805      	ldr	r0, [sp, #20]
 8006588:	9e07      	ldr	r6, [sp, #28]
 800658a:	3219      	adds	r2, #25
 800658c:	47b0      	blx	r6
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d098      	beq.n	80064c4 <_printf_i+0x13c>
 8006592:	3501      	adds	r5, #1
 8006594:	68e3      	ldr	r3, [r4, #12]
 8006596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	42ab      	cmp	r3, r5
 800659c:	dcf0      	bgt.n	8006580 <_printf_i+0x1f8>
 800659e:	e7e9      	b.n	8006574 <_printf_i+0x1ec>
 80065a0:	2500      	movs	r5, #0
 80065a2:	e7f7      	b.n	8006594 <_printf_i+0x20c>
 80065a4:	080070cd 	.word	0x080070cd
 80065a8:	080070de 	.word	0x080070de

080065ac <_scanf_chars>:
 80065ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ae:	0015      	movs	r5, r2
 80065b0:	688a      	ldr	r2, [r1, #8]
 80065b2:	000c      	movs	r4, r1
 80065b4:	9001      	str	r0, [sp, #4]
 80065b6:	2a00      	cmp	r2, #0
 80065b8:	d105      	bne.n	80065c6 <_scanf_chars+0x1a>
 80065ba:	6989      	ldr	r1, [r1, #24]
 80065bc:	3201      	adds	r2, #1
 80065be:	2900      	cmp	r1, #0
 80065c0:	d000      	beq.n	80065c4 <_scanf_chars+0x18>
 80065c2:	3a02      	subs	r2, #2
 80065c4:	60a2      	str	r2, [r4, #8]
 80065c6:	6822      	ldr	r2, [r4, #0]
 80065c8:	06d2      	lsls	r2, r2, #27
 80065ca:	d403      	bmi.n	80065d4 <_scanf_chars+0x28>
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	1d11      	adds	r1, r2, #4
 80065d0:	6019      	str	r1, [r3, #0]
 80065d2:	6817      	ldr	r7, [r2, #0]
 80065d4:	2600      	movs	r6, #0
 80065d6:	69a0      	ldr	r0, [r4, #24]
 80065d8:	2800      	cmp	r0, #0
 80065da:	d013      	beq.n	8006604 <_scanf_chars+0x58>
 80065dc:	2801      	cmp	r0, #1
 80065de:	d108      	bne.n	80065f2 <_scanf_chars+0x46>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	6962      	ldr	r2, [r4, #20]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	5cd3      	ldrb	r3, [r2, r3]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10b      	bne.n	8006604 <_scanf_chars+0x58>
 80065ec:	2e00      	cmp	r6, #0
 80065ee:	d038      	beq.n	8006662 <_scanf_chars+0xb6>
 80065f0:	e026      	b.n	8006640 <_scanf_chars+0x94>
 80065f2:	2802      	cmp	r0, #2
 80065f4:	d124      	bne.n	8006640 <_scanf_chars+0x94>
 80065f6:	682b      	ldr	r3, [r5, #0]
 80065f8:	4a1a      	ldr	r2, [pc, #104]	; (8006664 <_scanf_chars+0xb8>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	5cd3      	ldrb	r3, [r2, r3]
 80065fe:	2208      	movs	r2, #8
 8006600:	4213      	tst	r3, r2
 8006602:	d11d      	bne.n	8006640 <_scanf_chars+0x94>
 8006604:	2210      	movs	r2, #16
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	3601      	adds	r6, #1
 800660a:	4213      	tst	r3, r2
 800660c:	d103      	bne.n	8006616 <_scanf_chars+0x6a>
 800660e:	682b      	ldr	r3, [r5, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	703b      	strb	r3, [r7, #0]
 8006614:	3701      	adds	r7, #1
 8006616:	682a      	ldr	r2, [r5, #0]
 8006618:	686b      	ldr	r3, [r5, #4]
 800661a:	3201      	adds	r2, #1
 800661c:	602a      	str	r2, [r5, #0]
 800661e:	68a2      	ldr	r2, [r4, #8]
 8006620:	3b01      	subs	r3, #1
 8006622:	3a01      	subs	r2, #1
 8006624:	606b      	str	r3, [r5, #4]
 8006626:	60a2      	str	r2, [r4, #8]
 8006628:	2a00      	cmp	r2, #0
 800662a:	d009      	beq.n	8006640 <_scanf_chars+0x94>
 800662c:	2b00      	cmp	r3, #0
 800662e:	dcd2      	bgt.n	80065d6 <_scanf_chars+0x2a>
 8006630:	23c0      	movs	r3, #192	; 0xc0
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	0029      	movs	r1, r5
 8006636:	58e3      	ldr	r3, [r4, r3]
 8006638:	9801      	ldr	r0, [sp, #4]
 800663a:	4798      	blx	r3
 800663c:	2800      	cmp	r0, #0
 800663e:	d0ca      	beq.n	80065d6 <_scanf_chars+0x2a>
 8006640:	6822      	ldr	r2, [r4, #0]
 8006642:	2310      	movs	r3, #16
 8006644:	0011      	movs	r1, r2
 8006646:	4019      	ands	r1, r3
 8006648:	421a      	tst	r2, r3
 800664a:	d106      	bne.n	800665a <_scanf_chars+0xae>
 800664c:	68e3      	ldr	r3, [r4, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60e3      	str	r3, [r4, #12]
 8006652:	69a3      	ldr	r3, [r4, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d000      	beq.n	800665a <_scanf_chars+0xae>
 8006658:	7039      	strb	r1, [r7, #0]
 800665a:	2000      	movs	r0, #0
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	199e      	adds	r6, r3, r6
 8006660:	6126      	str	r6, [r4, #16]
 8006662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006664:	0800710b 	.word	0x0800710b

08006668 <_scanf_i>:
 8006668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800666a:	000c      	movs	r4, r1
 800666c:	b08d      	sub	sp, #52	; 0x34
 800666e:	9302      	str	r3, [sp, #8]
 8006670:	4b79      	ldr	r3, [pc, #484]	; (8006858 <_scanf_i+0x1f0>)
 8006672:	0016      	movs	r6, r2
 8006674:	9005      	str	r0, [sp, #20]
 8006676:	aa09      	add	r2, sp, #36	; 0x24
 8006678:	cb23      	ldmia	r3!, {r0, r1, r5}
 800667a:	c223      	stmia	r2!, {r0, r1, r5}
 800667c:	4b77      	ldr	r3, [pc, #476]	; (800685c <_scanf_i+0x1f4>)
 800667e:	9306      	str	r3, [sp, #24]
 8006680:	69a3      	ldr	r3, [r4, #24]
 8006682:	2b03      	cmp	r3, #3
 8006684:	d001      	beq.n	800668a <_scanf_i+0x22>
 8006686:	4b76      	ldr	r3, [pc, #472]	; (8006860 <_scanf_i+0x1f8>)
 8006688:	9306      	str	r3, [sp, #24]
 800668a:	22ae      	movs	r2, #174	; 0xae
 800668c:	2000      	movs	r0, #0
 800668e:	68a3      	ldr	r3, [r4, #8]
 8006690:	0052      	lsls	r2, r2, #1
 8006692:	1e59      	subs	r1, r3, #1
 8006694:	9004      	str	r0, [sp, #16]
 8006696:	4291      	cmp	r1, r2
 8006698:	d905      	bls.n	80066a6 <_scanf_i+0x3e>
 800669a:	3b5e      	subs	r3, #94	; 0x5e
 800669c:	3bff      	subs	r3, #255	; 0xff
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	235e      	movs	r3, #94	; 0x5e
 80066a2:	33ff      	adds	r3, #255	; 0xff
 80066a4:	60a3      	str	r3, [r4, #8]
 80066a6:	0023      	movs	r3, r4
 80066a8:	331c      	adds	r3, #28
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	23d0      	movs	r3, #208	; 0xd0
 80066ae:	2700      	movs	r7, #0
 80066b0:	6822      	ldr	r2, [r4, #0]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	4313      	orrs	r3, r2
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	9b01      	ldr	r3, [sp, #4]
 80066ba:	9303      	str	r3, [sp, #12]
 80066bc:	6833      	ldr	r3, [r6, #0]
 80066be:	a809      	add	r0, sp, #36	; 0x24
 80066c0:	7819      	ldrb	r1, [r3, #0]
 80066c2:	00bb      	lsls	r3, r7, #2
 80066c4:	2202      	movs	r2, #2
 80066c6:	5818      	ldr	r0, [r3, r0]
 80066c8:	f000 fa6e 	bl	8006ba8 <memchr>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d02b      	beq.n	8006728 <_scanf_i+0xc0>
 80066d0:	2f01      	cmp	r7, #1
 80066d2:	d162      	bne.n	800679a <_scanf_i+0x132>
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <_scanf_i+0x80>
 80066da:	3308      	adds	r3, #8
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	6063      	str	r3, [r4, #4]
 80066e0:	33f9      	adds	r3, #249	; 0xf9
 80066e2:	33ff      	adds	r3, #255	; 0xff
 80066e4:	4313      	orrs	r3, r2
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	4b5e      	ldr	r3, [pc, #376]	; (8006864 <_scanf_i+0x1fc>)
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	4013      	ands	r3, r2
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	68a3      	ldr	r3, [r4, #8]
 80066f2:	1e5a      	subs	r2, r3, #1
 80066f4:	60a2      	str	r2, [r4, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d016      	beq.n	8006728 <_scanf_i+0xc0>
 80066fa:	6833      	ldr	r3, [r6, #0]
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	6032      	str	r2, [r6, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	9a03      	ldr	r2, [sp, #12]
 8006704:	7013      	strb	r3, [r2, #0]
 8006706:	6873      	ldr	r3, [r6, #4]
 8006708:	1c55      	adds	r5, r2, #1
 800670a:	3b01      	subs	r3, #1
 800670c:	6073      	str	r3, [r6, #4]
 800670e:	9503      	str	r5, [sp, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	dc09      	bgt.n	8006728 <_scanf_i+0xc0>
 8006714:	23c0      	movs	r3, #192	; 0xc0
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	58e3      	ldr	r3, [r4, r3]
 800671a:	0031      	movs	r1, r6
 800671c:	9805      	ldr	r0, [sp, #20]
 800671e:	9307      	str	r3, [sp, #28]
 8006720:	4798      	blx	r3
 8006722:	2800      	cmp	r0, #0
 8006724:	d000      	beq.n	8006728 <_scanf_i+0xc0>
 8006726:	e081      	b.n	800682c <_scanf_i+0x1c4>
 8006728:	3701      	adds	r7, #1
 800672a:	2f03      	cmp	r7, #3
 800672c:	d1c6      	bne.n	80066bc <_scanf_i+0x54>
 800672e:	6863      	ldr	r3, [r4, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <_scanf_i+0xd0>
 8006734:	330a      	adds	r3, #10
 8006736:	6063      	str	r3, [r4, #4]
 8006738:	2110      	movs	r1, #16
 800673a:	2700      	movs	r7, #0
 800673c:	6863      	ldr	r3, [r4, #4]
 800673e:	6960      	ldr	r0, [r4, #20]
 8006740:	1ac9      	subs	r1, r1, r3
 8006742:	4b49      	ldr	r3, [pc, #292]	; (8006868 <_scanf_i+0x200>)
 8006744:	18c9      	adds	r1, r1, r3
 8006746:	f000 f893 	bl	8006870 <__sccl>
 800674a:	9d03      	ldr	r5, [sp, #12]
 800674c:	68a3      	ldr	r3, [r4, #8]
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	9303      	str	r3, [sp, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d041      	beq.n	80067da <_scanf_i+0x172>
 8006756:	6831      	ldr	r1, [r6, #0]
 8006758:	6963      	ldr	r3, [r4, #20]
 800675a:	7808      	ldrb	r0, [r1, #0]
 800675c:	5c1b      	ldrb	r3, [r3, r0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d03b      	beq.n	80067da <_scanf_i+0x172>
 8006762:	2830      	cmp	r0, #48	; 0x30
 8006764:	d129      	bne.n	80067ba <_scanf_i+0x152>
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	421a      	tst	r2, r3
 800676c:	d025      	beq.n	80067ba <_scanf_i+0x152>
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	3701      	adds	r7, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <_scanf_i+0x11a>
 8006776:	001a      	movs	r2, r3
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	3a01      	subs	r2, #1
 800677c:	3301      	adds	r3, #1
 800677e:	9204      	str	r2, [sp, #16]
 8006780:	60a3      	str	r3, [r4, #8]
 8006782:	6873      	ldr	r3, [r6, #4]
 8006784:	3b01      	subs	r3, #1
 8006786:	6073      	str	r3, [r6, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dd1d      	ble.n	80067c8 <_scanf_i+0x160>
 800678c:	6833      	ldr	r3, [r6, #0]
 800678e:	3301      	adds	r3, #1
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	3b01      	subs	r3, #1
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	e7d8      	b.n	800674c <_scanf_i+0xe4>
 800679a:	2f02      	cmp	r7, #2
 800679c:	d1a8      	bne.n	80066f0 <_scanf_i+0x88>
 800679e:	21c0      	movs	r1, #192	; 0xc0
 80067a0:	2380      	movs	r3, #128	; 0x80
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	00c9      	lsls	r1, r1, #3
 80067a6:	4011      	ands	r1, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4299      	cmp	r1, r3
 80067ac:	d1bf      	bne.n	800672e <_scanf_i+0xc6>
 80067ae:	3bf1      	subs	r3, #241	; 0xf1
 80067b0:	3bff      	subs	r3, #255	; 0xff
 80067b2:	6063      	str	r3, [r4, #4]
 80067b4:	33f0      	adds	r3, #240	; 0xf0
 80067b6:	4313      	orrs	r3, r2
 80067b8:	e799      	b.n	80066ee <_scanf_i+0x86>
 80067ba:	4b2c      	ldr	r3, [pc, #176]	; (800686c <_scanf_i+0x204>)
 80067bc:	4013      	ands	r3, r2
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	780b      	ldrb	r3, [r1, #0]
 80067c2:	702b      	strb	r3, [r5, #0]
 80067c4:	3501      	adds	r5, #1
 80067c6:	e7dc      	b.n	8006782 <_scanf_i+0x11a>
 80067c8:	23c0      	movs	r3, #192	; 0xc0
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	58e3      	ldr	r3, [r4, r3]
 80067ce:	0031      	movs	r1, r6
 80067d0:	9805      	ldr	r0, [sp, #20]
 80067d2:	9303      	str	r3, [sp, #12]
 80067d4:	4798      	blx	r3
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d0db      	beq.n	8006792 <_scanf_i+0x12a>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	05db      	lsls	r3, r3, #23
 80067de:	d50e      	bpl.n	80067fe <_scanf_i+0x196>
 80067e0:	9b01      	ldr	r3, [sp, #4]
 80067e2:	429d      	cmp	r5, r3
 80067e4:	d907      	bls.n	80067f6 <_scanf_i+0x18e>
 80067e6:	23be      	movs	r3, #190	; 0xbe
 80067e8:	3d01      	subs	r5, #1
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	0032      	movs	r2, r6
 80067ee:	7829      	ldrb	r1, [r5, #0]
 80067f0:	58e3      	ldr	r3, [r4, r3]
 80067f2:	9805      	ldr	r0, [sp, #20]
 80067f4:	4798      	blx	r3
 80067f6:	9b01      	ldr	r3, [sp, #4]
 80067f8:	2001      	movs	r0, #1
 80067fa:	429d      	cmp	r5, r3
 80067fc:	d029      	beq.n	8006852 <_scanf_i+0x1ea>
 80067fe:	6821      	ldr	r1, [r4, #0]
 8006800:	2310      	movs	r3, #16
 8006802:	000a      	movs	r2, r1
 8006804:	401a      	ands	r2, r3
 8006806:	4219      	tst	r1, r3
 8006808:	d11c      	bne.n	8006844 <_scanf_i+0x1dc>
 800680a:	702a      	strb	r2, [r5, #0]
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	9901      	ldr	r1, [sp, #4]
 8006810:	9805      	ldr	r0, [sp, #20]
 8006812:	9e06      	ldr	r6, [sp, #24]
 8006814:	47b0      	blx	r6
 8006816:	9b02      	ldr	r3, [sp, #8]
 8006818:	6821      	ldr	r1, [r4, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	068a      	lsls	r2, r1, #26
 800681e:	d507      	bpl.n	8006830 <_scanf_i+0x1c8>
 8006820:	1d1a      	adds	r2, r3, #4
 8006822:	9902      	ldr	r1, [sp, #8]
 8006824:	600a      	str	r2, [r1, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6018      	str	r0, [r3, #0]
 800682a:	e008      	b.n	800683e <_scanf_i+0x1d6>
 800682c:	2700      	movs	r7, #0
 800682e:	e7d4      	b.n	80067da <_scanf_i+0x172>
 8006830:	1d1a      	adds	r2, r3, #4
 8006832:	07ce      	lsls	r6, r1, #31
 8006834:	d5f5      	bpl.n	8006822 <_scanf_i+0x1ba>
 8006836:	9902      	ldr	r1, [sp, #8]
 8006838:	600a      	str	r2, [r1, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	8018      	strh	r0, [r3, #0]
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60e3      	str	r3, [r4, #12]
 8006844:	2000      	movs	r0, #0
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	1aed      	subs	r5, r5, r3
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	19ef      	adds	r7, r5, r7
 800684e:	19df      	adds	r7, r3, r7
 8006850:	6127      	str	r7, [r4, #16]
 8006852:	b00d      	add	sp, #52	; 0x34
 8006854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	08007034 	.word	0x08007034
 800685c:	08006a05 	.word	0x08006a05
 8006860:	08006b21 	.word	0x08006b21
 8006864:	fffffaff 	.word	0xfffffaff
 8006868:	080070f8 	.word	0x080070f8
 800686c:	fffff6ff 	.word	0xfffff6ff

08006870 <__sccl>:
 8006870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006872:	780b      	ldrb	r3, [r1, #0]
 8006874:	0004      	movs	r4, r0
 8006876:	2b5e      	cmp	r3, #94	; 0x5e
 8006878:	d00c      	beq.n	8006894 <__sccl+0x24>
 800687a:	1c48      	adds	r0, r1, #1
 800687c:	2100      	movs	r1, #0
 800687e:	0022      	movs	r2, r4
 8006880:	1c65      	adds	r5, r4, #1
 8006882:	35ff      	adds	r5, #255	; 0xff
 8006884:	7011      	strb	r1, [r2, #0]
 8006886:	3201      	adds	r2, #1
 8006888:	42aa      	cmp	r2, r5
 800688a:	d1fb      	bne.n	8006884 <__sccl+0x14>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <__sccl+0x2c>
 8006890:	3801      	subs	r0, #1
 8006892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006894:	784b      	ldrb	r3, [r1, #1]
 8006896:	1c88      	adds	r0, r1, #2
 8006898:	2101      	movs	r1, #1
 800689a:	e7f0      	b.n	800687e <__sccl+0xe>
 800689c:	2201      	movs	r2, #1
 800689e:	262d      	movs	r6, #45	; 0x2d
 80068a0:	4051      	eors	r1, r2
 80068a2:	0002      	movs	r2, r0
 80068a4:	54e1      	strb	r1, [r4, r3]
 80068a6:	7815      	ldrb	r5, [r2, #0]
 80068a8:	1c50      	adds	r0, r2, #1
 80068aa:	2d2d      	cmp	r5, #45	; 0x2d
 80068ac:	d009      	beq.n	80068c2 <__sccl+0x52>
 80068ae:	2d5d      	cmp	r5, #93	; 0x5d
 80068b0:	d0ef      	beq.n	8006892 <__sccl+0x22>
 80068b2:	2d00      	cmp	r5, #0
 80068b4:	d101      	bne.n	80068ba <__sccl+0x4a>
 80068b6:	0010      	movs	r0, r2
 80068b8:	e7eb      	b.n	8006892 <__sccl+0x22>
 80068ba:	002b      	movs	r3, r5
 80068bc:	e7f1      	b.n	80068a2 <__sccl+0x32>
 80068be:	0033      	movs	r3, r6
 80068c0:	e7ef      	b.n	80068a2 <__sccl+0x32>
 80068c2:	7855      	ldrb	r5, [r2, #1]
 80068c4:	2d5d      	cmp	r5, #93	; 0x5d
 80068c6:	d0fa      	beq.n	80068be <__sccl+0x4e>
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	dcf8      	bgt.n	80068be <__sccl+0x4e>
 80068cc:	0018      	movs	r0, r3
 80068ce:	3202      	adds	r2, #2
 80068d0:	3001      	adds	r0, #1
 80068d2:	5421      	strb	r1, [r4, r0]
 80068d4:	4285      	cmp	r5, r0
 80068d6:	dcfb      	bgt.n	80068d0 <__sccl+0x60>
 80068d8:	2000      	movs	r0, #0
 80068da:	1c5f      	adds	r7, r3, #1
 80068dc:	42ab      	cmp	r3, r5
 80068de:	da01      	bge.n	80068e4 <__sccl+0x74>
 80068e0:	1ae8      	subs	r0, r5, r3
 80068e2:	3801      	subs	r0, #1
 80068e4:	183b      	adds	r3, r7, r0
 80068e6:	e7de      	b.n	80068a6 <__sccl+0x36>

080068e8 <_strtol_l.constprop.0>:
 80068e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ea:	b087      	sub	sp, #28
 80068ec:	001e      	movs	r6, r3
 80068ee:	9005      	str	r0, [sp, #20]
 80068f0:	9101      	str	r1, [sp, #4]
 80068f2:	9202      	str	r2, [sp, #8]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d045      	beq.n	8006984 <_strtol_l.constprop.0+0x9c>
 80068f8:	000b      	movs	r3, r1
 80068fa:	2e24      	cmp	r6, #36	; 0x24
 80068fc:	d842      	bhi.n	8006984 <_strtol_l.constprop.0+0x9c>
 80068fe:	4a3f      	ldr	r2, [pc, #252]	; (80069fc <_strtol_l.constprop.0+0x114>)
 8006900:	2108      	movs	r1, #8
 8006902:	4694      	mov	ip, r2
 8006904:	001a      	movs	r2, r3
 8006906:	4660      	mov	r0, ip
 8006908:	7814      	ldrb	r4, [r2, #0]
 800690a:	3301      	adds	r3, #1
 800690c:	5d00      	ldrb	r0, [r0, r4]
 800690e:	001d      	movs	r5, r3
 8006910:	0007      	movs	r7, r0
 8006912:	400f      	ands	r7, r1
 8006914:	4208      	tst	r0, r1
 8006916:	d1f5      	bne.n	8006904 <_strtol_l.constprop.0+0x1c>
 8006918:	2c2d      	cmp	r4, #45	; 0x2d
 800691a:	d13a      	bne.n	8006992 <_strtol_l.constprop.0+0xaa>
 800691c:	2701      	movs	r7, #1
 800691e:	781c      	ldrb	r4, [r3, #0]
 8006920:	1c95      	adds	r5, r2, #2
 8006922:	2e00      	cmp	r6, #0
 8006924:	d065      	beq.n	80069f2 <_strtol_l.constprop.0+0x10a>
 8006926:	2e10      	cmp	r6, #16
 8006928:	d109      	bne.n	800693e <_strtol_l.constprop.0+0x56>
 800692a:	2c30      	cmp	r4, #48	; 0x30
 800692c:	d107      	bne.n	800693e <_strtol_l.constprop.0+0x56>
 800692e:	2220      	movs	r2, #32
 8006930:	782b      	ldrb	r3, [r5, #0]
 8006932:	4393      	bics	r3, r2
 8006934:	2b58      	cmp	r3, #88	; 0x58
 8006936:	d157      	bne.n	80069e8 <_strtol_l.constprop.0+0x100>
 8006938:	2610      	movs	r6, #16
 800693a:	786c      	ldrb	r4, [r5, #1]
 800693c:	3502      	adds	r5, #2
 800693e:	4b30      	ldr	r3, [pc, #192]	; (8006a00 <_strtol_l.constprop.0+0x118>)
 8006940:	0031      	movs	r1, r6
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	0018      	movs	r0, r3
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	f7f9 fc76 	bl	8000238 <__aeabi_uidivmod>
 800694c:	2300      	movs	r3, #0
 800694e:	2201      	movs	r2, #1
 8006950:	4684      	mov	ip, r0
 8006952:	0018      	movs	r0, r3
 8006954:	9104      	str	r1, [sp, #16]
 8006956:	4252      	negs	r2, r2
 8006958:	0021      	movs	r1, r4
 800695a:	3930      	subs	r1, #48	; 0x30
 800695c:	2909      	cmp	r1, #9
 800695e:	d81d      	bhi.n	800699c <_strtol_l.constprop.0+0xb4>
 8006960:	000c      	movs	r4, r1
 8006962:	42a6      	cmp	r6, r4
 8006964:	dd28      	ble.n	80069b8 <_strtol_l.constprop.0+0xd0>
 8006966:	2b00      	cmp	r3, #0
 8006968:	db24      	blt.n	80069b4 <_strtol_l.constprop.0+0xcc>
 800696a:	0013      	movs	r3, r2
 800696c:	4584      	cmp	ip, r0
 800696e:	d306      	bcc.n	800697e <_strtol_l.constprop.0+0x96>
 8006970:	d102      	bne.n	8006978 <_strtol_l.constprop.0+0x90>
 8006972:	9904      	ldr	r1, [sp, #16]
 8006974:	42a1      	cmp	r1, r4
 8006976:	db02      	blt.n	800697e <_strtol_l.constprop.0+0x96>
 8006978:	2301      	movs	r3, #1
 800697a:	4370      	muls	r0, r6
 800697c:	1820      	adds	r0, r4, r0
 800697e:	782c      	ldrb	r4, [r5, #0]
 8006980:	3501      	adds	r5, #1
 8006982:	e7e9      	b.n	8006958 <_strtol_l.constprop.0+0x70>
 8006984:	f7ff f8d8 	bl	8005b38 <__errno>
 8006988:	2316      	movs	r3, #22
 800698a:	6003      	str	r3, [r0, #0]
 800698c:	2000      	movs	r0, #0
 800698e:	b007      	add	sp, #28
 8006990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006992:	2c2b      	cmp	r4, #43	; 0x2b
 8006994:	d1c5      	bne.n	8006922 <_strtol_l.constprop.0+0x3a>
 8006996:	781c      	ldrb	r4, [r3, #0]
 8006998:	1c95      	adds	r5, r2, #2
 800699a:	e7c2      	b.n	8006922 <_strtol_l.constprop.0+0x3a>
 800699c:	0021      	movs	r1, r4
 800699e:	3941      	subs	r1, #65	; 0x41
 80069a0:	2919      	cmp	r1, #25
 80069a2:	d801      	bhi.n	80069a8 <_strtol_l.constprop.0+0xc0>
 80069a4:	3c37      	subs	r4, #55	; 0x37
 80069a6:	e7dc      	b.n	8006962 <_strtol_l.constprop.0+0x7a>
 80069a8:	0021      	movs	r1, r4
 80069aa:	3961      	subs	r1, #97	; 0x61
 80069ac:	2919      	cmp	r1, #25
 80069ae:	d803      	bhi.n	80069b8 <_strtol_l.constprop.0+0xd0>
 80069b0:	3c57      	subs	r4, #87	; 0x57
 80069b2:	e7d6      	b.n	8006962 <_strtol_l.constprop.0+0x7a>
 80069b4:	0013      	movs	r3, r2
 80069b6:	e7e2      	b.n	800697e <_strtol_l.constprop.0+0x96>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	da09      	bge.n	80069d0 <_strtol_l.constprop.0+0xe8>
 80069bc:	2322      	movs	r3, #34	; 0x22
 80069be:	9a05      	ldr	r2, [sp, #20]
 80069c0:	9803      	ldr	r0, [sp, #12]
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	9b02      	ldr	r3, [sp, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0e1      	beq.n	800698e <_strtol_l.constprop.0+0xa6>
 80069ca:	1e6b      	subs	r3, r5, #1
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	e007      	b.n	80069e0 <_strtol_l.constprop.0+0xf8>
 80069d0:	2f00      	cmp	r7, #0
 80069d2:	d000      	beq.n	80069d6 <_strtol_l.constprop.0+0xee>
 80069d4:	4240      	negs	r0, r0
 80069d6:	9a02      	ldr	r2, [sp, #8]
 80069d8:	2a00      	cmp	r2, #0
 80069da:	d0d8      	beq.n	800698e <_strtol_l.constprop.0+0xa6>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f4      	bne.n	80069ca <_strtol_l.constprop.0+0xe2>
 80069e0:	9b02      	ldr	r3, [sp, #8]
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e7d2      	b.n	800698e <_strtol_l.constprop.0+0xa6>
 80069e8:	2430      	movs	r4, #48	; 0x30
 80069ea:	2e00      	cmp	r6, #0
 80069ec:	d1a7      	bne.n	800693e <_strtol_l.constprop.0+0x56>
 80069ee:	3608      	adds	r6, #8
 80069f0:	e7a5      	b.n	800693e <_strtol_l.constprop.0+0x56>
 80069f2:	2c30      	cmp	r4, #48	; 0x30
 80069f4:	d09b      	beq.n	800692e <_strtol_l.constprop.0+0x46>
 80069f6:	260a      	movs	r6, #10
 80069f8:	e7a1      	b.n	800693e <_strtol_l.constprop.0+0x56>
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	0800710b 	.word	0x0800710b
 8006a00:	7fffffff 	.word	0x7fffffff

08006a04 <_strtol_r>:
 8006a04:	b510      	push	{r4, lr}
 8006a06:	f7ff ff6f 	bl	80068e8 <_strtol_l.constprop.0>
 8006a0a:	bd10      	pop	{r4, pc}

08006a0c <_strtoul_l.constprop.0>:
 8006a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	9202      	str	r2, [sp, #8]
 8006a12:	4a42      	ldr	r2, [pc, #264]	; (8006b1c <_strtoul_l.constprop.0+0x110>)
 8006a14:	001e      	movs	r6, r3
 8006a16:	9101      	str	r1, [sp, #4]
 8006a18:	000b      	movs	r3, r1
 8006a1a:	4694      	mov	ip, r2
 8006a1c:	2108      	movs	r1, #8
 8006a1e:	9005      	str	r0, [sp, #20]
 8006a20:	001a      	movs	r2, r3
 8006a22:	4660      	mov	r0, ip
 8006a24:	7814      	ldrb	r4, [r2, #0]
 8006a26:	3301      	adds	r3, #1
 8006a28:	5d00      	ldrb	r0, [r0, r4]
 8006a2a:	001d      	movs	r5, r3
 8006a2c:	0007      	movs	r7, r0
 8006a2e:	400f      	ands	r7, r1
 8006a30:	4208      	tst	r0, r1
 8006a32:	d1f5      	bne.n	8006a20 <_strtoul_l.constprop.0+0x14>
 8006a34:	2c2d      	cmp	r4, #45	; 0x2d
 8006a36:	d13a      	bne.n	8006aae <_strtoul_l.constprop.0+0xa2>
 8006a38:	2701      	movs	r7, #1
 8006a3a:	781c      	ldrb	r4, [r3, #0]
 8006a3c:	1c95      	adds	r5, r2, #2
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	d067      	beq.n	8006b12 <_strtoul_l.constprop.0+0x106>
 8006a42:	2e10      	cmp	r6, #16
 8006a44:	d109      	bne.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006a46:	2c30      	cmp	r4, #48	; 0x30
 8006a48:	d107      	bne.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	782b      	ldrb	r3, [r5, #0]
 8006a4e:	4393      	bics	r3, r2
 8006a50:	2b58      	cmp	r3, #88	; 0x58
 8006a52:	d159      	bne.n	8006b08 <_strtoul_l.constprop.0+0xfc>
 8006a54:	2610      	movs	r6, #16
 8006a56:	786c      	ldrb	r4, [r5, #1]
 8006a58:	3502      	adds	r5, #2
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	0031      	movs	r1, r6
 8006a5e:	4240      	negs	r0, r0
 8006a60:	f7f9 fb64 	bl	800012c <__udivsi3>
 8006a64:	9003      	str	r0, [sp, #12]
 8006a66:	2001      	movs	r0, #1
 8006a68:	0031      	movs	r1, r6
 8006a6a:	4240      	negs	r0, r0
 8006a6c:	f7f9 fbe4 	bl	8000238 <__aeabi_uidivmod>
 8006a70:	2300      	movs	r3, #0
 8006a72:	9104      	str	r1, [sp, #16]
 8006a74:	2101      	movs	r1, #1
 8006a76:	2201      	movs	r2, #1
 8006a78:	0018      	movs	r0, r3
 8006a7a:	468c      	mov	ip, r1
 8006a7c:	4252      	negs	r2, r2
 8006a7e:	0021      	movs	r1, r4
 8006a80:	3930      	subs	r1, #48	; 0x30
 8006a82:	2909      	cmp	r1, #9
 8006a84:	d818      	bhi.n	8006ab8 <_strtoul_l.constprop.0+0xac>
 8006a86:	000c      	movs	r4, r1
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	dd23      	ble.n	8006ad4 <_strtoul_l.constprop.0+0xc8>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	db1f      	blt.n	8006ad0 <_strtoul_l.constprop.0+0xc4>
 8006a90:	9903      	ldr	r1, [sp, #12]
 8006a92:	0013      	movs	r3, r2
 8006a94:	4281      	cmp	r1, r0
 8006a96:	d307      	bcc.n	8006aa8 <_strtoul_l.constprop.0+0x9c>
 8006a98:	d103      	bne.n	8006aa2 <_strtoul_l.constprop.0+0x96>
 8006a9a:	9904      	ldr	r1, [sp, #16]
 8006a9c:	0013      	movs	r3, r2
 8006a9e:	42a1      	cmp	r1, r4
 8006aa0:	db02      	blt.n	8006aa8 <_strtoul_l.constprop.0+0x9c>
 8006aa2:	4663      	mov	r3, ip
 8006aa4:	4370      	muls	r0, r6
 8006aa6:	1820      	adds	r0, r4, r0
 8006aa8:	782c      	ldrb	r4, [r5, #0]
 8006aaa:	3501      	adds	r5, #1
 8006aac:	e7e7      	b.n	8006a7e <_strtoul_l.constprop.0+0x72>
 8006aae:	2c2b      	cmp	r4, #43	; 0x2b
 8006ab0:	d1c5      	bne.n	8006a3e <_strtoul_l.constprop.0+0x32>
 8006ab2:	781c      	ldrb	r4, [r3, #0]
 8006ab4:	1c95      	adds	r5, r2, #2
 8006ab6:	e7c2      	b.n	8006a3e <_strtoul_l.constprop.0+0x32>
 8006ab8:	0021      	movs	r1, r4
 8006aba:	3941      	subs	r1, #65	; 0x41
 8006abc:	2919      	cmp	r1, #25
 8006abe:	d801      	bhi.n	8006ac4 <_strtoul_l.constprop.0+0xb8>
 8006ac0:	3c37      	subs	r4, #55	; 0x37
 8006ac2:	e7e1      	b.n	8006a88 <_strtoul_l.constprop.0+0x7c>
 8006ac4:	0021      	movs	r1, r4
 8006ac6:	3961      	subs	r1, #97	; 0x61
 8006ac8:	2919      	cmp	r1, #25
 8006aca:	d803      	bhi.n	8006ad4 <_strtoul_l.constprop.0+0xc8>
 8006acc:	3c57      	subs	r4, #87	; 0x57
 8006ace:	e7db      	b.n	8006a88 <_strtoul_l.constprop.0+0x7c>
 8006ad0:	0013      	movs	r3, r2
 8006ad2:	e7e9      	b.n	8006aa8 <_strtoul_l.constprop.0+0x9c>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	da09      	bge.n	8006aec <_strtoul_l.constprop.0+0xe0>
 8006ad8:	2322      	movs	r3, #34	; 0x22
 8006ada:	2001      	movs	r0, #1
 8006adc:	9a05      	ldr	r2, [sp, #20]
 8006ade:	4240      	negs	r0, r0
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	9b02      	ldr	r3, [sp, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <_strtoul_l.constprop.0+0xf0>
 8006ae8:	b007      	add	sp, #28
 8006aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aec:	2f00      	cmp	r7, #0
 8006aee:	d000      	beq.n	8006af2 <_strtoul_l.constprop.0+0xe6>
 8006af0:	4240      	negs	r0, r0
 8006af2:	9a02      	ldr	r2, [sp, #8]
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	d0f7      	beq.n	8006ae8 <_strtoul_l.constprop.0+0xdc>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <_strtoul_l.constprop.0+0xf4>
 8006afc:	1e6b      	subs	r3, r5, #1
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	9b02      	ldr	r3, [sp, #8]
 8006b02:	9a01      	ldr	r2, [sp, #4]
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	e7ef      	b.n	8006ae8 <_strtoul_l.constprop.0+0xdc>
 8006b08:	2430      	movs	r4, #48	; 0x30
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d1a5      	bne.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006b0e:	3608      	adds	r6, #8
 8006b10:	e7a3      	b.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006b12:	2c30      	cmp	r4, #48	; 0x30
 8006b14:	d099      	beq.n	8006a4a <_strtoul_l.constprop.0+0x3e>
 8006b16:	260a      	movs	r6, #10
 8006b18:	e79f      	b.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	0800710b 	.word	0x0800710b

08006b20 <_strtoul_r>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	f7ff ff73 	bl	8006a0c <_strtoul_l.constprop.0>
 8006b26:	bd10      	pop	{r4, pc}

08006b28 <__submore>:
 8006b28:	000b      	movs	r3, r1
 8006b2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b2c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006b2e:	3344      	adds	r3, #68	; 0x44
 8006b30:	000c      	movs	r4, r1
 8006b32:	429d      	cmp	r5, r3
 8006b34:	d11c      	bne.n	8006b70 <__submore+0x48>
 8006b36:	2680      	movs	r6, #128	; 0x80
 8006b38:	00f6      	lsls	r6, r6, #3
 8006b3a:	0031      	movs	r1, r6
 8006b3c:	f000 f8c8 	bl	8006cd0 <_malloc_r>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d102      	bne.n	8006b4a <__submore+0x22>
 8006b44:	2001      	movs	r0, #1
 8006b46:	4240      	negs	r0, r0
 8006b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b4a:	0023      	movs	r3, r4
 8006b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b4e:	63a6      	str	r6, [r4, #56]	; 0x38
 8006b50:	3346      	adds	r3, #70	; 0x46
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <__submore+0x70>)
 8006b56:	54c2      	strb	r2, [r0, r3]
 8006b58:	0023      	movs	r3, r4
 8006b5a:	3345      	adds	r3, #69	; 0x45
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <__submore+0x74>)
 8006b60:	54c2      	strb	r2, [r0, r3]
 8006b62:	782a      	ldrb	r2, [r5, #0]
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <__submore+0x78>)
 8006b66:	54c2      	strb	r2, [r0, r3]
 8006b68:	18c0      	adds	r0, r0, r3
 8006b6a:	6020      	str	r0, [r4, #0]
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e7eb      	b.n	8006b48 <__submore+0x20>
 8006b70:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006b72:	0029      	movs	r1, r5
 8006b74:	0073      	lsls	r3, r6, #1
 8006b76:	001a      	movs	r2, r3
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	f000 f91f 	bl	8006dbc <_realloc_r>
 8006b7e:	1e05      	subs	r5, r0, #0
 8006b80:	d0e0      	beq.n	8006b44 <__submore+0x1c>
 8006b82:	1987      	adds	r7, r0, r6
 8006b84:	0001      	movs	r1, r0
 8006b86:	0032      	movs	r2, r6
 8006b88:	0038      	movs	r0, r7
 8006b8a:	f000 f818 	bl	8006bbe <memcpy>
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	6027      	str	r7, [r4, #0]
 8006b92:	6365      	str	r5, [r4, #52]	; 0x34
 8006b94:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b96:	e7e9      	b.n	8006b6c <__submore+0x44>
 8006b98:	000003ff 	.word	0x000003ff
 8006b9c:	000003fe 	.word	0x000003fe
 8006ba0:	000003fd 	.word	0x000003fd

08006ba4 <__retarget_lock_acquire_recursive>:
 8006ba4:	4770      	bx	lr

08006ba6 <__retarget_lock_release_recursive>:
 8006ba6:	4770      	bx	lr

08006ba8 <memchr>:
 8006ba8:	b2c9      	uxtb	r1, r1
 8006baa:	1882      	adds	r2, r0, r2
 8006bac:	4290      	cmp	r0, r2
 8006bae:	d101      	bne.n	8006bb4 <memchr+0xc>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	4770      	bx	lr
 8006bb4:	7803      	ldrb	r3, [r0, #0]
 8006bb6:	428b      	cmp	r3, r1
 8006bb8:	d0fb      	beq.n	8006bb2 <memchr+0xa>
 8006bba:	3001      	adds	r0, #1
 8006bbc:	e7f6      	b.n	8006bac <memchr+0x4>

08006bbe <memcpy>:
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d100      	bne.n	8006bc8 <memcpy+0xa>
 8006bc6:	bd10      	pop	{r4, pc}
 8006bc8:	5ccc      	ldrb	r4, [r1, r3]
 8006bca:	54c4      	strb	r4, [r0, r3]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	e7f8      	b.n	8006bc2 <memcpy+0x4>

08006bd0 <memmove>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	4288      	cmp	r0, r1
 8006bd4:	d902      	bls.n	8006bdc <memmove+0xc>
 8006bd6:	188b      	adds	r3, r1, r2
 8006bd8:	4298      	cmp	r0, r3
 8006bda:	d303      	bcc.n	8006be4 <memmove+0x14>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e007      	b.n	8006bf0 <memmove+0x20>
 8006be0:	5c8b      	ldrb	r3, [r1, r2]
 8006be2:	5483      	strb	r3, [r0, r2]
 8006be4:	3a01      	subs	r2, #1
 8006be6:	d2fb      	bcs.n	8006be0 <memmove+0x10>
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	5ccc      	ldrb	r4, [r1, r3]
 8006bec:	54c4      	strb	r4, [r0, r3]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d1fa      	bne.n	8006bea <memmove+0x1a>
 8006bf4:	e7f8      	b.n	8006be8 <memmove+0x18>
	...

08006bf8 <_free_r>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	0005      	movs	r5, r0
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	d010      	beq.n	8006c22 <_free_r+0x2a>
 8006c00:	1f0c      	subs	r4, r1, #4
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da00      	bge.n	8006c0a <_free_r+0x12>
 8006c08:	18e4      	adds	r4, r4, r3
 8006c0a:	0028      	movs	r0, r5
 8006c0c:	f000 f918 	bl	8006e40 <__malloc_lock>
 8006c10:	4a1d      	ldr	r2, [pc, #116]	; (8006c88 <_free_r+0x90>)
 8006c12:	6813      	ldr	r3, [r2, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d105      	bne.n	8006c24 <_free_r+0x2c>
 8006c18:	6063      	str	r3, [r4, #4]
 8006c1a:	6014      	str	r4, [r2, #0]
 8006c1c:	0028      	movs	r0, r5
 8006c1e:	f000 f917 	bl	8006e50 <__malloc_unlock>
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d908      	bls.n	8006c3a <_free_r+0x42>
 8006c28:	6821      	ldr	r1, [r4, #0]
 8006c2a:	1860      	adds	r0, r4, r1
 8006c2c:	4283      	cmp	r3, r0
 8006c2e:	d1f3      	bne.n	8006c18 <_free_r+0x20>
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	1841      	adds	r1, r0, r1
 8006c36:	6021      	str	r1, [r4, #0]
 8006c38:	e7ee      	b.n	8006c18 <_free_r+0x20>
 8006c3a:	001a      	movs	r2, r3
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <_free_r+0x4e>
 8006c42:	42a3      	cmp	r3, r4
 8006c44:	d9f9      	bls.n	8006c3a <_free_r+0x42>
 8006c46:	6811      	ldr	r1, [r2, #0]
 8006c48:	1850      	adds	r0, r2, r1
 8006c4a:	42a0      	cmp	r0, r4
 8006c4c:	d10b      	bne.n	8006c66 <_free_r+0x6e>
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	1809      	adds	r1, r1, r0
 8006c52:	1850      	adds	r0, r2, r1
 8006c54:	6011      	str	r1, [r2, #0]
 8006c56:	4283      	cmp	r3, r0
 8006c58:	d1e0      	bne.n	8006c1c <_free_r+0x24>
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	1841      	adds	r1, r0, r1
 8006c60:	6011      	str	r1, [r2, #0]
 8006c62:	6053      	str	r3, [r2, #4]
 8006c64:	e7da      	b.n	8006c1c <_free_r+0x24>
 8006c66:	42a0      	cmp	r0, r4
 8006c68:	d902      	bls.n	8006c70 <_free_r+0x78>
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	602b      	str	r3, [r5, #0]
 8006c6e:	e7d5      	b.n	8006c1c <_free_r+0x24>
 8006c70:	6821      	ldr	r1, [r4, #0]
 8006c72:	1860      	adds	r0, r4, r1
 8006c74:	4283      	cmp	r3, r0
 8006c76:	d103      	bne.n	8006c80 <_free_r+0x88>
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	1841      	adds	r1, r0, r1
 8006c7e:	6021      	str	r1, [r4, #0]
 8006c80:	6063      	str	r3, [r4, #4]
 8006c82:	6054      	str	r4, [r2, #4]
 8006c84:	e7ca      	b.n	8006c1c <_free_r+0x24>
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	20000268 	.word	0x20000268

08006c8c <sbrk_aligned>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	4e0f      	ldr	r6, [pc, #60]	; (8006ccc <sbrk_aligned+0x40>)
 8006c90:	000d      	movs	r5, r1
 8006c92:	6831      	ldr	r1, [r6, #0]
 8006c94:	0004      	movs	r4, r0
 8006c96:	2900      	cmp	r1, #0
 8006c98:	d102      	bne.n	8006ca0 <sbrk_aligned+0x14>
 8006c9a:	f000 f8bf 	bl	8006e1c <_sbrk_r>
 8006c9e:	6030      	str	r0, [r6, #0]
 8006ca0:	0029      	movs	r1, r5
 8006ca2:	0020      	movs	r0, r4
 8006ca4:	f000 f8ba 	bl	8006e1c <_sbrk_r>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d00a      	beq.n	8006cc2 <sbrk_aligned+0x36>
 8006cac:	2303      	movs	r3, #3
 8006cae:	1cc5      	adds	r5, r0, #3
 8006cb0:	439d      	bics	r5, r3
 8006cb2:	42a8      	cmp	r0, r5
 8006cb4:	d007      	beq.n	8006cc6 <sbrk_aligned+0x3a>
 8006cb6:	1a29      	subs	r1, r5, r0
 8006cb8:	0020      	movs	r0, r4
 8006cba:	f000 f8af 	bl	8006e1c <_sbrk_r>
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	d101      	bne.n	8006cc6 <sbrk_aligned+0x3a>
 8006cc2:	2501      	movs	r5, #1
 8006cc4:	426d      	negs	r5, r5
 8006cc6:	0028      	movs	r0, r5
 8006cc8:	bd70      	pop	{r4, r5, r6, pc}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	2000026c 	.word	0x2000026c

08006cd0 <_malloc_r>:
 8006cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	1ccb      	adds	r3, r1, #3
 8006cd6:	4393      	bics	r3, r2
 8006cd8:	3308      	adds	r3, #8
 8006cda:	0006      	movs	r6, r0
 8006cdc:	001f      	movs	r7, r3
 8006cde:	2b0c      	cmp	r3, #12
 8006ce0:	d232      	bcs.n	8006d48 <_malloc_r+0x78>
 8006ce2:	270c      	movs	r7, #12
 8006ce4:	42b9      	cmp	r1, r7
 8006ce6:	d831      	bhi.n	8006d4c <_malloc_r+0x7c>
 8006ce8:	0030      	movs	r0, r6
 8006cea:	f000 f8a9 	bl	8006e40 <__malloc_lock>
 8006cee:	4d32      	ldr	r5, [pc, #200]	; (8006db8 <_malloc_r+0xe8>)
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	001c      	movs	r4, r3
 8006cf4:	2c00      	cmp	r4, #0
 8006cf6:	d12e      	bne.n	8006d56 <_malloc_r+0x86>
 8006cf8:	0039      	movs	r1, r7
 8006cfa:	0030      	movs	r0, r6
 8006cfc:	f7ff ffc6 	bl	8006c8c <sbrk_aligned>
 8006d00:	0004      	movs	r4, r0
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	d11e      	bne.n	8006d44 <_malloc_r+0x74>
 8006d06:	682c      	ldr	r4, [r5, #0]
 8006d08:	0025      	movs	r5, r4
 8006d0a:	2d00      	cmp	r5, #0
 8006d0c:	d14a      	bne.n	8006da4 <_malloc_r+0xd4>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	0029      	movs	r1, r5
 8006d12:	18e3      	adds	r3, r4, r3
 8006d14:	0030      	movs	r0, r6
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	f000 f880 	bl	8006e1c <_sbrk_r>
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	4283      	cmp	r3, r0
 8006d20:	d143      	bne.n	8006daa <_malloc_r+0xda>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	3703      	adds	r7, #3
 8006d26:	1aff      	subs	r7, r7, r3
 8006d28:	2303      	movs	r3, #3
 8006d2a:	439f      	bics	r7, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	2f0c      	cmp	r7, #12
 8006d30:	d200      	bcs.n	8006d34 <_malloc_r+0x64>
 8006d32:	270c      	movs	r7, #12
 8006d34:	0039      	movs	r1, r7
 8006d36:	0030      	movs	r0, r6
 8006d38:	f7ff ffa8 	bl	8006c8c <sbrk_aligned>
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d034      	beq.n	8006daa <_malloc_r+0xda>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	19df      	adds	r7, r3, r7
 8006d44:	6027      	str	r7, [r4, #0]
 8006d46:	e013      	b.n	8006d70 <_malloc_r+0xa0>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dacb      	bge.n	8006ce4 <_malloc_r+0x14>
 8006d4c:	230c      	movs	r3, #12
 8006d4e:	2500      	movs	r5, #0
 8006d50:	6033      	str	r3, [r6, #0]
 8006d52:	0028      	movs	r0, r5
 8006d54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	1bd1      	subs	r1, r2, r7
 8006d5a:	d420      	bmi.n	8006d9e <_malloc_r+0xce>
 8006d5c:	290b      	cmp	r1, #11
 8006d5e:	d917      	bls.n	8006d90 <_malloc_r+0xc0>
 8006d60:	19e2      	adds	r2, r4, r7
 8006d62:	6027      	str	r7, [r4, #0]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	d111      	bne.n	8006d8c <_malloc_r+0xbc>
 8006d68:	602a      	str	r2, [r5, #0]
 8006d6a:	6863      	ldr	r3, [r4, #4]
 8006d6c:	6011      	str	r1, [r2, #0]
 8006d6e:	6053      	str	r3, [r2, #4]
 8006d70:	0030      	movs	r0, r6
 8006d72:	0025      	movs	r5, r4
 8006d74:	f000 f86c 	bl	8006e50 <__malloc_unlock>
 8006d78:	2207      	movs	r2, #7
 8006d7a:	350b      	adds	r5, #11
 8006d7c:	1d23      	adds	r3, r4, #4
 8006d7e:	4395      	bics	r5, r2
 8006d80:	1aea      	subs	r2, r5, r3
 8006d82:	429d      	cmp	r5, r3
 8006d84:	d0e5      	beq.n	8006d52 <_malloc_r+0x82>
 8006d86:	1b5b      	subs	r3, r3, r5
 8006d88:	50a3      	str	r3, [r4, r2]
 8006d8a:	e7e2      	b.n	8006d52 <_malloc_r+0x82>
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	e7ec      	b.n	8006d6a <_malloc_r+0x9a>
 8006d90:	6862      	ldr	r2, [r4, #4]
 8006d92:	42a3      	cmp	r3, r4
 8006d94:	d101      	bne.n	8006d9a <_malloc_r+0xca>
 8006d96:	602a      	str	r2, [r5, #0]
 8006d98:	e7ea      	b.n	8006d70 <_malloc_r+0xa0>
 8006d9a:	605a      	str	r2, [r3, #4]
 8006d9c:	e7e8      	b.n	8006d70 <_malloc_r+0xa0>
 8006d9e:	0023      	movs	r3, r4
 8006da0:	6864      	ldr	r4, [r4, #4]
 8006da2:	e7a7      	b.n	8006cf4 <_malloc_r+0x24>
 8006da4:	002c      	movs	r4, r5
 8006da6:	686d      	ldr	r5, [r5, #4]
 8006da8:	e7af      	b.n	8006d0a <_malloc_r+0x3a>
 8006daa:	230c      	movs	r3, #12
 8006dac:	0030      	movs	r0, r6
 8006dae:	6033      	str	r3, [r6, #0]
 8006db0:	f000 f84e 	bl	8006e50 <__malloc_unlock>
 8006db4:	e7cd      	b.n	8006d52 <_malloc_r+0x82>
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	20000268 	.word	0x20000268

08006dbc <_realloc_r>:
 8006dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dbe:	0007      	movs	r7, r0
 8006dc0:	000e      	movs	r6, r1
 8006dc2:	0014      	movs	r4, r2
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	d105      	bne.n	8006dd4 <_realloc_r+0x18>
 8006dc8:	0011      	movs	r1, r2
 8006dca:	f7ff ff81 	bl	8006cd0 <_malloc_r>
 8006dce:	0005      	movs	r5, r0
 8006dd0:	0028      	movs	r0, r5
 8006dd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	d103      	bne.n	8006de0 <_realloc_r+0x24>
 8006dd8:	f7ff ff0e 	bl	8006bf8 <_free_r>
 8006ddc:	0025      	movs	r5, r4
 8006dde:	e7f7      	b.n	8006dd0 <_realloc_r+0x14>
 8006de0:	f000 f83e 	bl	8006e60 <_malloc_usable_size_r>
 8006de4:	9001      	str	r0, [sp, #4]
 8006de6:	4284      	cmp	r4, r0
 8006de8:	d803      	bhi.n	8006df2 <_realloc_r+0x36>
 8006dea:	0035      	movs	r5, r6
 8006dec:	0843      	lsrs	r3, r0, #1
 8006dee:	42a3      	cmp	r3, r4
 8006df0:	d3ee      	bcc.n	8006dd0 <_realloc_r+0x14>
 8006df2:	0021      	movs	r1, r4
 8006df4:	0038      	movs	r0, r7
 8006df6:	f7ff ff6b 	bl	8006cd0 <_malloc_r>
 8006dfa:	1e05      	subs	r5, r0, #0
 8006dfc:	d0e8      	beq.n	8006dd0 <_realloc_r+0x14>
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	0022      	movs	r2, r4
 8006e02:	429c      	cmp	r4, r3
 8006e04:	d900      	bls.n	8006e08 <_realloc_r+0x4c>
 8006e06:	001a      	movs	r2, r3
 8006e08:	0031      	movs	r1, r6
 8006e0a:	0028      	movs	r0, r5
 8006e0c:	f7ff fed7 	bl	8006bbe <memcpy>
 8006e10:	0031      	movs	r1, r6
 8006e12:	0038      	movs	r0, r7
 8006e14:	f7ff fef0 	bl	8006bf8 <_free_r>
 8006e18:	e7da      	b.n	8006dd0 <_realloc_r+0x14>
	...

08006e1c <_sbrk_r>:
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	b570      	push	{r4, r5, r6, lr}
 8006e20:	4d06      	ldr	r5, [pc, #24]	; (8006e3c <_sbrk_r+0x20>)
 8006e22:	0004      	movs	r4, r0
 8006e24:	0008      	movs	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7fb f94c 	bl	80020c4 <_sbrk>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d103      	bne.n	8006e38 <_sbrk_r+0x1c>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d000      	beq.n	8006e38 <_sbrk_r+0x1c>
 8006e36:	6023      	str	r3, [r4, #0]
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	20000260 	.word	0x20000260

08006e40 <__malloc_lock>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	4802      	ldr	r0, [pc, #8]	; (8006e4c <__malloc_lock+0xc>)
 8006e44:	f7ff feae 	bl	8006ba4 <__retarget_lock_acquire_recursive>
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	20000264 	.word	0x20000264

08006e50 <__malloc_unlock>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4802      	ldr	r0, [pc, #8]	; (8006e5c <__malloc_unlock+0xc>)
 8006e54:	f7ff fea7 	bl	8006ba6 <__retarget_lock_release_recursive>
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	20000264 	.word	0x20000264

08006e60 <_malloc_usable_size_r>:
 8006e60:	1f0b      	subs	r3, r1, #4
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	1f18      	subs	r0, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da01      	bge.n	8006e6e <_malloc_usable_size_r+0xe>
 8006e6a:	580b      	ldr	r3, [r1, r0]
 8006e6c:	18c0      	adds	r0, r0, r3
 8006e6e:	4770      	bx	lr

08006e70 <_init>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr

08006e7c <_fini>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr
